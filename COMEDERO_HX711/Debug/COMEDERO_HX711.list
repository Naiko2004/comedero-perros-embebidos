
COMEDERO_HX711.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080036cc  080036cc  000046cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003770  08003770  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003770  08003770  00004770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003778  08003778  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003778  08003778  00004778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800377c  0800377c  0000477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003780  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  080037e8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080037e8  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6cf  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc8  00000000  00000000  00010760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00012328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a27  00000000  00000000  00013038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017358  00000000  00000000  00013a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eded  00000000  00000000  0002adb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a87d  00000000  00000000  00039ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca0  00000000  00000000  000c4464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c8104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080036b4 	.word	0x080036b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080036b4 	.word	0x080036b4

0800014c <__aeabi_ldivmod>:
 800014c:	b97b      	cbnz	r3, 800016e <__aeabi_ldivmod+0x22>
 800014e:	b972      	cbnz	r2, 800016e <__aeabi_ldivmod+0x22>
 8000150:	2900      	cmp	r1, #0
 8000152:	bfbe      	ittt	lt
 8000154:	2000      	movlt	r0, #0
 8000156:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800015a:	e006      	blt.n	800016a <__aeabi_ldivmod+0x1e>
 800015c:	bf08      	it	eq
 800015e:	2800      	cmpeq	r0, #0
 8000160:	bf1c      	itt	ne
 8000162:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000166:	f04f 30ff 	movne.w	r0, #4294967295
 800016a:	f000 b9bf 	b.w	80004ec <__aeabi_idiv0>
 800016e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000172:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000176:	2900      	cmp	r1, #0
 8000178:	db09      	blt.n	800018e <__aeabi_ldivmod+0x42>
 800017a:	2b00      	cmp	r3, #0
 800017c:	db1a      	blt.n	80001b4 <__aeabi_ldivmod+0x68>
 800017e:	f000 f835 	bl	80001ec <__udivmoddi4>
 8000182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018a:	b004      	add	sp, #16
 800018c:	4770      	bx	lr
 800018e:	4240      	negs	r0, r0
 8000190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	db1b      	blt.n	80001d0 <__aeabi_ldivmod+0x84>
 8000198:	f000 f828 	bl	80001ec <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4240      	negs	r0, r0
 80001a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ac:	4252      	negs	r2, r2
 80001ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b2:	4770      	bx	lr
 80001b4:	4252      	negs	r2, r2
 80001b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ba:	f000 f817 	bl	80001ec <__udivmoddi4>
 80001be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c6:	b004      	add	sp, #16
 80001c8:	4240      	negs	r0, r0
 80001ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ce:	4770      	bx	lr
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	f000 f809 	bl	80001ec <__udivmoddi4>
 80001da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e2:	b004      	add	sp, #16
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	9d08      	ldr	r5, [sp, #32]
 80001f2:	468e      	mov	lr, r1
 80001f4:	4604      	mov	r4, r0
 80001f6:	4688      	mov	r8, r1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d14a      	bne.n	8000292 <__udivmoddi4+0xa6>
 80001fc:	428a      	cmp	r2, r1
 80001fe:	4617      	mov	r7, r2
 8000200:	d962      	bls.n	80002c8 <__udivmoddi4+0xdc>
 8000202:	fab2 f682 	clz	r6, r2
 8000206:	b14e      	cbz	r6, 800021c <__udivmoddi4+0x30>
 8000208:	f1c6 0320 	rsb	r3, r6, #32
 800020c:	fa01 f806 	lsl.w	r8, r1, r6
 8000210:	fa20 f303 	lsr.w	r3, r0, r3
 8000214:	40b7      	lsls	r7, r6
 8000216:	ea43 0808 	orr.w	r8, r3, r8
 800021a:	40b4      	lsls	r4, r6
 800021c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000220:	fbb8 f1fe 	udiv	r1, r8, lr
 8000224:	fa1f fc87 	uxth.w	ip, r7
 8000228:	fb0e 8811 	mls	r8, lr, r1, r8
 800022c:	fb01 f20c 	mul.w	r2, r1, ip
 8000230:	0c23      	lsrs	r3, r4, #16
 8000232:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000236:	429a      	cmp	r2, r3
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x62>
 800023a:	18fb      	adds	r3, r7, r3
 800023c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000240:	f080 80eb 	bcs.w	800041a <__udivmoddi4+0x22e>
 8000244:	429a      	cmp	r2, r3
 8000246:	f240 80e8 	bls.w	800041a <__udivmoddi4+0x22e>
 800024a:	3902      	subs	r1, #2
 800024c:	443b      	add	r3, r7
 800024e:	1a9a      	subs	r2, r3, r2
 8000250:	fbb2 f0fe 	udiv	r0, r2, lr
 8000254:	fb0e 2210 	mls	r2, lr, r0, r2
 8000258:	fb00 fc0c 	mul.w	ip, r0, ip
 800025c:	b2a3      	uxth	r3, r4
 800025e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000262:	459c      	cmp	ip, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x8e>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f100 32ff 	add.w	r2, r0, #4294967295
 800026c:	f080 80d7 	bcs.w	800041e <__udivmoddi4+0x232>
 8000270:	459c      	cmp	ip, r3
 8000272:	f240 80d4 	bls.w	800041e <__udivmoddi4+0x232>
 8000276:	443b      	add	r3, r7
 8000278:	3802      	subs	r0, #2
 800027a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800027e:	2100      	movs	r1, #0
 8000280:	eba3 030c 	sub.w	r3, r3, ip
 8000284:	b11d      	cbz	r5, 800028e <__udivmoddi4+0xa2>
 8000286:	2200      	movs	r2, #0
 8000288:	40f3      	lsrs	r3, r6
 800028a:	e9c5 3200 	strd	r3, r2, [r5]
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	428b      	cmp	r3, r1
 8000294:	d905      	bls.n	80002a2 <__udivmoddi4+0xb6>
 8000296:	b10d      	cbz	r5, 800029c <__udivmoddi4+0xb0>
 8000298:	e9c5 0100 	strd	r0, r1, [r5]
 800029c:	2100      	movs	r1, #0
 800029e:	4608      	mov	r0, r1
 80002a0:	e7f5      	b.n	800028e <__udivmoddi4+0xa2>
 80002a2:	fab3 f183 	clz	r1, r3
 80002a6:	2900      	cmp	r1, #0
 80002a8:	d146      	bne.n	8000338 <__udivmoddi4+0x14c>
 80002aa:	4573      	cmp	r3, lr
 80002ac:	d302      	bcc.n	80002b4 <__udivmoddi4+0xc8>
 80002ae:	4282      	cmp	r2, r0
 80002b0:	f200 8108 	bhi.w	80004c4 <__udivmoddi4+0x2d8>
 80002b4:	1a84      	subs	r4, r0, r2
 80002b6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ba:	2001      	movs	r0, #1
 80002bc:	4690      	mov	r8, r2
 80002be:	2d00      	cmp	r5, #0
 80002c0:	d0e5      	beq.n	800028e <__udivmoddi4+0xa2>
 80002c2:	e9c5 4800 	strd	r4, r8, [r5]
 80002c6:	e7e2      	b.n	800028e <__udivmoddi4+0xa2>
 80002c8:	2a00      	cmp	r2, #0
 80002ca:	f000 8091 	beq.w	80003f0 <__udivmoddi4+0x204>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f040 80a5 	bne.w	8000422 <__udivmoddi4+0x236>
 80002d8:	1a8a      	subs	r2, r1, r2
 80002da:	2101      	movs	r1, #1
 80002dc:	0c03      	lsrs	r3, r0, #16
 80002de:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e2:	b280      	uxth	r0, r0
 80002e4:	b2bc      	uxth	r4, r7
 80002e6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002ea:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002f2:	fb04 f20c 	mul.w	r2, r4, ip
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d907      	bls.n	800030a <__udivmoddi4+0x11e>
 80002fa:	18fb      	adds	r3, r7, r3
 80002fc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x11c>
 8000302:	429a      	cmp	r2, r3
 8000304:	f200 80e3 	bhi.w	80004ce <__udivmoddi4+0x2e2>
 8000308:	46c4      	mov	ip, r8
 800030a:	1a9b      	subs	r3, r3, r2
 800030c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000310:	fb0e 3312 	mls	r3, lr, r2, r3
 8000314:	fb02 f404 	mul.w	r4, r2, r4
 8000318:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800031c:	429c      	cmp	r4, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x144>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f102 30ff 	add.w	r0, r2, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x142>
 8000328:	429c      	cmp	r4, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2dc>
 800032e:	4602      	mov	r2, r0
 8000330:	1b1b      	subs	r3, r3, r4
 8000332:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000336:	e7a5      	b.n	8000284 <__udivmoddi4+0x98>
 8000338:	f1c1 0620 	rsb	r6, r1, #32
 800033c:	408b      	lsls	r3, r1
 800033e:	fa22 f706 	lsr.w	r7, r2, r6
 8000342:	431f      	orrs	r7, r3
 8000344:	fa2e fa06 	lsr.w	sl, lr, r6
 8000348:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800034c:	fbba f8f9 	udiv	r8, sl, r9
 8000350:	fa0e fe01 	lsl.w	lr, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fb09 aa18 	mls	sl, r9, r8, sl
 800035c:	fa1f fc87 	uxth.w	ip, r7
 8000360:	ea43 030e 	orr.w	r3, r3, lr
 8000364:	fa00 fe01 	lsl.w	lr, r0, r1
 8000368:	fb08 f00c 	mul.w	r0, r8, ip
 800036c:	0c1c      	lsrs	r4, r3, #16
 800036e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000372:	42a0      	cmp	r0, r4
 8000374:	fa02 f201 	lsl.w	r2, r2, r1
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x1a4>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000380:	f080 809e 	bcs.w	80004c0 <__udivmoddi4+0x2d4>
 8000384:	42a0      	cmp	r0, r4
 8000386:	f240 809b 	bls.w	80004c0 <__udivmoddi4+0x2d4>
 800038a:	f1a8 0802 	sub.w	r8, r8, #2
 800038e:	443c      	add	r4, r7
 8000390:	1a24      	subs	r4, r4, r0
 8000392:	b298      	uxth	r0, r3
 8000394:	fbb4 f3f9 	udiv	r3, r4, r9
 8000398:	fb09 4413 	mls	r4, r9, r3, r4
 800039c:	fb03 fc0c 	mul.w	ip, r3, ip
 80003a0:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1d0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ae:	f080 8085 	bcs.w	80004bc <__udivmoddi4+0x2d0>
 80003b2:	45a4      	cmp	ip, r4
 80003b4:	f240 8082 	bls.w	80004bc <__udivmoddi4+0x2d0>
 80003b8:	3b02      	subs	r3, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c0:	eba4 040c 	sub.w	r4, r4, ip
 80003c4:	fba0 8c02 	umull	r8, ip, r0, r2
 80003c8:	4564      	cmp	r4, ip
 80003ca:	4643      	mov	r3, r8
 80003cc:	46e1      	mov	r9, ip
 80003ce:	d364      	bcc.n	800049a <__udivmoddi4+0x2ae>
 80003d0:	d061      	beq.n	8000496 <__udivmoddi4+0x2aa>
 80003d2:	b15d      	cbz	r5, 80003ec <__udivmoddi4+0x200>
 80003d4:	ebbe 0203 	subs.w	r2, lr, r3
 80003d8:	eb64 0409 	sbc.w	r4, r4, r9
 80003dc:	fa04 f606 	lsl.w	r6, r4, r6
 80003e0:	fa22 f301 	lsr.w	r3, r2, r1
 80003e4:	431e      	orrs	r6, r3
 80003e6:	40cc      	lsrs	r4, r1
 80003e8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ec:	2100      	movs	r1, #0
 80003ee:	e74e      	b.n	800028e <__udivmoddi4+0xa2>
 80003f0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003f4:	0c01      	lsrs	r1, r0, #16
 80003f6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003fa:	b280      	uxth	r0, r0
 80003fc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000400:	463b      	mov	r3, r7
 8000402:	fbb1 f1f7 	udiv	r1, r1, r7
 8000406:	4638      	mov	r0, r7
 8000408:	463c      	mov	r4, r7
 800040a:	46b8      	mov	r8, r7
 800040c:	46be      	mov	lr, r7
 800040e:	2620      	movs	r6, #32
 8000410:	eba2 0208 	sub.w	r2, r2, r8
 8000414:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000418:	e765      	b.n	80002e6 <__udivmoddi4+0xfa>
 800041a:	4601      	mov	r1, r0
 800041c:	e717      	b.n	800024e <__udivmoddi4+0x62>
 800041e:	4610      	mov	r0, r2
 8000420:	e72b      	b.n	800027a <__udivmoddi4+0x8e>
 8000422:	f1c6 0120 	rsb	r1, r6, #32
 8000426:	fa2e fc01 	lsr.w	ip, lr, r1
 800042a:	40b7      	lsls	r7, r6
 800042c:	fa0e fe06 	lsl.w	lr, lr, r6
 8000430:	fa20 f101 	lsr.w	r1, r0, r1
 8000434:	ea41 010e 	orr.w	r1, r1, lr
 8000438:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043c:	fbbc f8fe 	udiv	r8, ip, lr
 8000440:	b2bc      	uxth	r4, r7
 8000442:	fb0e cc18 	mls	ip, lr, r8, ip
 8000446:	fb08 f904 	mul.w	r9, r8, r4
 800044a:	0c0a      	lsrs	r2, r1, #16
 800044c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000450:	40b0      	lsls	r0, r6
 8000452:	4591      	cmp	r9, r2
 8000454:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000458:	b280      	uxth	r0, r0
 800045a:	d93e      	bls.n	80004da <__udivmoddi4+0x2ee>
 800045c:	18ba      	adds	r2, r7, r2
 800045e:	f108 3cff 	add.w	ip, r8, #4294967295
 8000462:	d201      	bcs.n	8000468 <__udivmoddi4+0x27c>
 8000464:	4591      	cmp	r9, r2
 8000466:	d81f      	bhi.n	80004a8 <__udivmoddi4+0x2bc>
 8000468:	eba2 0209 	sub.w	r2, r2, r9
 800046c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000470:	fb09 f804 	mul.w	r8, r9, r4
 8000474:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000478:	b28a      	uxth	r2, r1
 800047a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800047e:	4542      	cmp	r2, r8
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ea>
 8000482:	18ba      	adds	r2, r7, r2
 8000484:	f109 31ff 	add.w	r1, r9, #4294967295
 8000488:	d2c2      	bcs.n	8000410 <__udivmoddi4+0x224>
 800048a:	4542      	cmp	r2, r8
 800048c:	d2c0      	bcs.n	8000410 <__udivmoddi4+0x224>
 800048e:	f1a9 0102 	sub.w	r1, r9, #2
 8000492:	443a      	add	r2, r7
 8000494:	e7bc      	b.n	8000410 <__udivmoddi4+0x224>
 8000496:	45c6      	cmp	lr, r8
 8000498:	d29b      	bcs.n	80003d2 <__udivmoddi4+0x1e6>
 800049a:	ebb8 0302 	subs.w	r3, r8, r2
 800049e:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	46e1      	mov	r9, ip
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1e6>
 80004a8:	eba7 0909 	sub.w	r9, r7, r9
 80004ac:	444a      	add	r2, r9
 80004ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80004b2:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b6:	fb09 f804 	mul.w	r8, r9, r4
 80004ba:	e7db      	b.n	8000474 <__udivmoddi4+0x288>
 80004bc:	4603      	mov	r3, r0
 80004be:	e77d      	b.n	80003bc <__udivmoddi4+0x1d0>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e765      	b.n	8000390 <__udivmoddi4+0x1a4>
 80004c4:	4608      	mov	r0, r1
 80004c6:	e6fa      	b.n	80002be <__udivmoddi4+0xd2>
 80004c8:	443b      	add	r3, r7
 80004ca:	3a02      	subs	r2, #2
 80004cc:	e730      	b.n	8000330 <__udivmoddi4+0x144>
 80004ce:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d2:	443b      	add	r3, r7
 80004d4:	e719      	b.n	800030a <__udivmoddi4+0x11e>
 80004d6:	4649      	mov	r1, r9
 80004d8:	e79a      	b.n	8000410 <__udivmoddi4+0x224>
 80004da:	eba2 0209 	sub.w	r2, r2, r9
 80004de:	fbb2 f9fe 	udiv	r9, r2, lr
 80004e2:	46c4      	mov	ip, r8
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7c4      	b.n	8000474 <__udivmoddi4+0x288>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af02      	add	r7, sp, #8
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <I2C_LCD_ExpanderWrite+0x60>)
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	4413      	add	r3, r2
 8000508:	785a      	ldrb	r2, [r3, #1]
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	4313      	orrs	r3, r2
 800050e:	b2db      	uxtb	r3, r3
 8000510:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000512:	79fa      	ldrb	r2, [r7, #7]
 8000514:	490f      	ldr	r1, [pc, #60]	@ (8000554 <I2C_LCD_ExpanderWrite+0x64>)
 8000516:	4613      	mov	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4413      	add	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	440b      	add	r3, r1
 8000520:	3304      	adds	r3, #4
 8000522:	6818      	ldr	r0, [r3, #0]
 8000524:	79fa      	ldrb	r2, [r7, #7]
 8000526:	490b      	ldr	r1, [pc, #44]	@ (8000554 <I2C_LCD_ExpanderWrite+0x64>)
 8000528:	4613      	mov	r3, r2
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	4413      	add	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	440b      	add	r3, r1
 8000532:	3308      	adds	r3, #8
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	b299      	uxth	r1, r3
 800053a:	f107 020f 	add.w	r2, r7, #15
 800053e:	2364      	movs	r3, #100	@ 0x64
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2301      	movs	r3, #1
 8000544:	f001 f9ee 	bl	8001924 <HAL_I2C_Master_Transmit>
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000084 	.word	0x20000084
 8000554:	08003704 	.word	0x08003704

08000558 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	b2da      	uxtb	r2, r3
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ffbb 	bl	80004f0 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <I2C_LCD_EnPulse+0xac>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <I2C_LCD_EnPulse+0xb0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <I2C_LCD_EnPulse+0xb4>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	0c9b      	lsrs	r3, r3, #18
 800058c:	005a      	lsls	r2, r3, #1
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <I2C_LCD_EnPulse+0xb0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	491e      	ldr	r1, [pc, #120]	@ (800060c <I2C_LCD_EnPulse+0xb4>)
 8000594:	fba1 1303 	umull	r1, r3, r1, r3
 8000598:	0c9b      	lsrs	r3, r3, #18
 800059a:	085b      	lsrs	r3, r3, #1
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <I2C_LCD_EnPulse+0xac>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d8f8      	bhi.n	80005a0 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	f023 0304 	bic.w	r3, r3, #4
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff98 	bl	80004f0 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <I2C_LCD_EnPulse+0xac>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <I2C_LCD_EnPulse+0xb0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a10      	ldr	r2, [pc, #64]	@ (800060c <I2C_LCD_EnPulse+0xb4>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	0c9b      	lsrs	r3, r3, #18
 80005d2:	2232      	movs	r2, #50	@ 0x32
 80005d4:	fb03 f202 	mul.w	r2, r3, r2
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <I2C_LCD_EnPulse+0xb0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	490b      	ldr	r1, [pc, #44]	@ (800060c <I2C_LCD_EnPulse+0xb4>)
 80005de:	fba1 1303 	umull	r1, r3, r1, r3
 80005e2:	0c9b      	lsrs	r3, r3, #18
 80005e4:	085b      	lsrs	r3, r3, #1
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <I2C_LCD_EnPulse+0xac>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d8f8      	bhi.n	80005ea <I2C_LCD_EnPulse+0x92>
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	e000e010 	.word	0xe000e010
 8000608:	2000000c 	.word	0x2000000c
 800060c:	431bde83 	.word	0x431bde83

08000610 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8000620:	79ba      	ldrb	r2, [r7, #6]
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff62 	bl	80004f0 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 800062c:	79ba      	ldrb	r2, [r7, #6]
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff90 	bl	8000558 <I2C_LCD_EnPulse>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	460b      	mov	r3, r1
 800064c:	71bb      	strb	r3, [r7, #6]
 800064e:	4613      	mov	r3, r2
 8000650:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	f023 030f 	bic.w	r3, r3, #15
 8000658:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8000660:	7bfa      	ldrb	r2, [r7, #15]
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	4313      	orrs	r3, r2
 8000666:	b2da      	uxtb	r2, r3
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffcf 	bl	8000610 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8000672:	7bba      	ldrb	r2, [r7, #14]
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	4313      	orrs	r3, r2
 8000678:	b2da      	uxtb	r2, r3
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffc6 	bl	8000610 <I2C_LCD_Write4Bits>
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 800069c:	79b9      	ldrb	r1, [r7, #6]
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2200      	movs	r2, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffcc 	bl	8000640 <I2C_LCD_Send>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80006c0:	79b9      	ldrb	r1, [r7, #6]
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffba 	bl	8000640 <I2C_LCD_Send>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80006de:	bf00      	nop
 80006e0:	f000 fd16 	bl	8001110 <HAL_GetTick>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b31      	cmp	r3, #49	@ 0x31
 80006e8:	d9fa      	bls.n	80006e0 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2130      	movs	r1, #48	@ 0x30
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffcc 	bl	800068c <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f8:	e01f      	b.n	800073a <I2C_LCD_Init+0x66>
 80006fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000828 <I2C_LCD_Init+0x154>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	4b4a      	ldr	r3, [pc, #296]	@ (800082c <I2C_LCD_Init+0x158>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a4a      	ldr	r2, [pc, #296]	@ (8000830 <I2C_LCD_Init+0x15c>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000710:	fb03 f202 	mul.w	r2, r3, r2
 8000714:	4b45      	ldr	r3, [pc, #276]	@ (800082c <I2C_LCD_Init+0x158>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4945      	ldr	r1, [pc, #276]	@ (8000830 <I2C_LCD_Init+0x15c>)
 800071a:	fba1 1303 	umull	r1, r3, r1, r3
 800071e:	0c9b      	lsrs	r3, r3, #18
 8000720:	085b      	lsrs	r3, r3, #1
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b40      	ldr	r3, [pc, #256]	@ (8000828 <I2C_LCD_Init+0x154>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	429a      	cmp	r2, r3
 8000732:	d8f8      	bhi.n	8000726 <I2C_LCD_Init+0x52>
 8000734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000736:	3301      	adds	r3, #1
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	2b04      	cmp	r3, #4
 800073e:	d9dc      	bls.n	80006fa <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2130      	movs	r1, #48	@ 0x30
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffa1 	bl	800068c <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
 800074e:	e01f      	b.n	8000790 <I2C_LCD_Init+0xbc>
 8000750:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <I2C_LCD_Init+0x154>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	4b35      	ldr	r3, [pc, #212]	@ (800082c <I2C_LCD_Init+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a35      	ldr	r2, [pc, #212]	@ (8000830 <I2C_LCD_Init+0x15c>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	0c9b      	lsrs	r3, r3, #18
 8000762:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000766:	fb03 f202 	mul.w	r2, r3, r2
 800076a:	4b30      	ldr	r3, [pc, #192]	@ (800082c <I2C_LCD_Init+0x158>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4930      	ldr	r1, [pc, #192]	@ (8000830 <I2C_LCD_Init+0x15c>)
 8000770:	fba1 1303 	umull	r1, r3, r1, r3
 8000774:	0c9b      	lsrs	r3, r3, #18
 8000776:	085b      	lsrs	r3, r3, #1
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <I2C_LCD_Init+0x154>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	429a      	cmp	r2, r3
 8000788:	d8f8      	bhi.n	800077c <I2C_LCD_Init+0xa8>
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	3301      	adds	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	2b04      	cmp	r3, #4
 8000794:	d9dc      	bls.n	8000750 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2130      	movs	r1, #48	@ 0x30
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff76 	bl	800068c <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80007a0:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <I2C_LCD_Init+0x154>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	4b21      	ldr	r3, [pc, #132]	@ (800082c <I2C_LCD_Init+0x158>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <I2C_LCD_Init+0x15c>)
 80007ac:	fba2 2303 	umull	r2, r3, r2, r3
 80007b0:	0c9b      	lsrs	r3, r3, #18
 80007b2:	2296      	movs	r2, #150	@ 0x96
 80007b4:	fb03 f202 	mul.w	r2, r3, r2
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <I2C_LCD_Init+0x158>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	491c      	ldr	r1, [pc, #112]	@ (8000830 <I2C_LCD_Init+0x15c>)
 80007be:	fba1 1303 	umull	r1, r3, r1, r3
 80007c2:	0c9b      	lsrs	r3, r3, #18
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <I2C_LCD_Init+0x154>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	69fa      	ldr	r2, [r7, #28]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8f8      	bhi.n	80007ca <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff55 	bl	800068c <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2128      	movs	r1, #40	@ 0x28
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff50 	bl	800068c <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	210c      	movs	r1, #12
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff4b 	bl	800068c <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2106      	movs	r1, #6
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff46 	bl	800068c <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4a0c      	ldr	r2, [pc, #48]	@ (8000834 <I2C_LCD_Init+0x160>)
 8000804:	2104      	movs	r1, #4
 8000806:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4a09      	ldr	r2, [pc, #36]	@ (8000834 <I2C_LCD_Init+0x160>)
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4413      	add	r3, r2
 8000812:	2208      	movs	r2, #8
 8000814:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f80d 	bl	8000838 <I2C_LCD_Clear>
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000e010 	.word	0xe000e010
 800082c:	2000000c 	.word	0x2000000c
 8000830:	431bde83 	.word	0x431bde83
 8000834:	20000084 	.word	0x20000084

08000838 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2101      	movs	r1, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff20 	bl	800068c <I2C_LCD_Cmd>
    DELAY_MS(2);
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	e01f      	b.n	8000892 <I2C_LCD_Clear+0x5a>
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <I2C_LCD_Clear+0x6c>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <I2C_LCD_Clear+0x70>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <I2C_LCD_Clear+0x74>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	0c9b      	lsrs	r3, r3, #18
 8000864:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000868:	fb03 f202 	mul.w	r2, r3, r2
 800086c:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <I2C_LCD_Clear+0x70>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	490e      	ldr	r1, [pc, #56]	@ (80008ac <I2C_LCD_Clear+0x74>)
 8000872:	fba1 1303 	umull	r1, r3, r1, r3
 8000876:	0c9b      	lsrs	r3, r3, #18
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <I2C_LCD_Clear+0x6c>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	429a      	cmp	r2, r3
 800088a:	d8f8      	bhi.n	800087e <I2C_LCD_Clear+0x46>
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d9dc      	bls.n	8000852 <I2C_LCD_Clear+0x1a>
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010
 80008a8:	2000000c 	.word	0x2000000c
 80008ac:	431bde83 	.word	0x431bde83

080008b0 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	460b      	mov	r3, r1
 80008bc:	71bb      	strb	r3, [r7, #6]
 80008be:	4613      	mov	r3, r2
 80008c0:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <I2C_LCD_SetCursor+0x7c>)
 80008c4:	f107 0408 	add.w	r4, r7, #8
 80008c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	4917      	ldr	r1, [pc, #92]	@ (8000930 <I2C_LCD_SetCursor+0x80>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	440b      	add	r3, r1
 80008dc:	330a      	adds	r3, #10
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	797a      	ldrb	r2, [r7, #5]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d90a      	bls.n	80008fc <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	4911      	ldr	r1, [pc, #68]	@ (8000930 <I2C_LCD_SetCursor+0x80>)
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	330a      	adds	r3, #10
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	3318      	adds	r3, #24
 8000902:	443b      	add	r3, r7
 8000904:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	4413      	add	r3, r2
 800090e:	b2db      	uxtb	r3, r3
 8000910:	b25b      	sxtb	r3, r3
 8000912:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000916:	b25b      	sxtb	r3, r3
 8000918:	b2da      	uxtb	r2, r3
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff feb4 	bl	800068c <I2C_LCD_Cmd>
}
 8000924:	bf00      	nop
 8000926:	371c      	adds	r7, #28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	080036cc 	.word	0x080036cc
 8000930:	08003704 	.word	0x08003704

08000934 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8000940:	e008      	b.n	8000954 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	603a      	str	r2, [r7, #0]
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff feae 	bl	80006b0 <I2C_LCD_Data>
    while (*Str)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f2      	bne.n	8000942 <I2C_LCD_WriteString+0xe>
    }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <I2C_LCD_WriteInt32>:
{
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CharIndex, RS);
}

// Funciones NICO
void I2C_LCD_WriteInt32(uint8_t I2C_LCD_InstanceIndex, int32_t Number){
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
	char buffer[12];
	sprintf(buffer, "%ld", (long)Number);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	4907      	ldr	r1, [pc, #28]	@ (8000998 <I2C_LCD_WriteInt32+0x30>)
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f9e9 	bl	8002d54 <siprintf>
	I2C_LCD_WriteString(I2C_LCD_InstanceIndex, buffer);
 8000982:	f107 020c 	add.w	r2, r7, #12
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffd2 	bl	8000934 <I2C_LCD_WriteString>
};
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	080036dc 	.word	0x080036dc

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 fb5e 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f858 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 f914 	bl	8000bd4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009ac:	f000 f8c6 	bl	8000b3c <MX_TIM2_Init>
  MX_I2C1_Init();
 80009b0:	f000 f896 	bl	8000ae0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80009b4:	4822      	ldr	r0, [pc, #136]	@ (8000a40 <main+0xa4>)
 80009b6:	f001 ff59 	bl	800286c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c0:	4820      	ldr	r0, [pc, #128]	@ (8000a44 <main+0xa8>)
 80009c2:	f000 fe52 	bl	800166a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80009c6:	200a      	movs	r0, #10
 80009c8:	f000 fbac 	bl	8001124 <HAL_Delay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009d2:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <main+0xa8>)
 80009d4:	f000 fe49 	bl	800166a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f000 fba3 	bl	8001124 <HAL_Delay>

  I2C_LCD_Init(MyI2C_LCD);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff fe78 	bl	80006d4 <I2C_LCD_Init>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff ff61 	bl	80008b0 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "Peso medido");
 80009ee:	4916      	ldr	r1, [pc, #88]	@ (8000a48 <main+0xac>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff ff9f 	bl	8000934 <I2C_LCD_WriteString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  weight = weigh();
 80009f6:	f000 f9c5 	bl	8000d84 <weigh>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a13      	ldr	r2, [pc, #76]	@ (8000a4c <main+0xb0>)
 80009fe:	6013      	str	r3, [r2, #0]
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ff53 	bl	80008b0 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, "                ");
 8000a0a:	4911      	ldr	r1, [pc, #68]	@ (8000a50 <main+0xb4>)
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff ff91 	bl	8000934 <I2C_LCD_WriteString>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2100      	movs	r1, #0
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ff4a 	bl	80008b0 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteInt32(MyI2C_LCD, weight);
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <main+0xb0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ffa0 	bl	8000968 <I2C_LCD_WriteInt32>
	  I2C_LCD_SetCursor(MyI2C_LCD, 14, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	210e      	movs	r1, #14
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ff3f 	bl	80008b0 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, "mg");
 8000a32:	4908      	ldr	r1, [pc, #32]	@ (8000a54 <main+0xb8>)
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff ff7d 	bl	8000934 <I2C_LCD_WriteString>
	  weight = weigh();
 8000a3a:	bf00      	nop
 8000a3c:	e7db      	b.n	80009f6 <main+0x5a>
 8000a3e:	bf00      	nop
 8000a40:	200000dc 	.word	0x200000dc
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	080036e0 	.word	0x080036e0
 8000a4c:	20000124 	.word	0x20000124
 8000a50:	080036ec 	.word	0x080036ec
 8000a54:	08003700 	.word	0x08003700

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	@ 0x40
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	2228      	movs	r2, #40	@ 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 f996 	bl	8002d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fa98 	bl	8001fd4 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000aaa:	f000 f9b9 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fd06 	bl	80024d8 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ad2:	f000 f9a5 	bl	8000e20 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	@ 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000ae6:	4a13      	ldr	r2, [pc, #76]	@ (8000b34 <MX_I2C1_Init+0x54>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000aec:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <MX_I2C1_Init+0x58>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000afe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <MX_I2C1_Init+0x50>)
 8000b1e:	f000 fdbd 	bl	800169c <HAL_I2C_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b28:	f000 f97a 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000088 	.word	0x20000088
 8000b34:	40005400 	.word	0x40005400
 8000b38:	000186a0 	.word	0x000186a0

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000b62:	220f      	movs	r2, #15
 8000b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b80:	4813      	ldr	r0, [pc, #76]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000b82:	f001 fe23 	bl	80027cc <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b8c:	f000 f948 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000b9e:	f001 feaf 	bl	8002900 <HAL_TIM_ConfigClockSource>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ba8:	f000 f93a 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_TIM2_Init+0x94>)
 8000bba:	f002 f86d 	bl	8002c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 f92c 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000dc 	.word	0x200000dc

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a23      	ldr	r2, [pc, #140]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000bee:	f043 0320 	orr.w	r3, r3, #32
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0320 	and.w	r3, r3, #32
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a1d      	ldr	r2, [pc, #116]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c36:	4812      	ldr	r0, [pc, #72]	@ (8000c80 <MX_GPIO_Init+0xac>)
 8000c38:	f000 fd17 	bl	800166a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <MX_GPIO_Init+0xac>)
 8000c52:	f000 fb6f 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_GPIO_Init+0xac>)
 8000c70:	f000 fb60 	bl	8001334 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <microDelay>:

/* USER CODE BEGIN 4 */

void microDelay(uint16_t delay){
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
    uint16_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <microDelay+0x34>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c94:	81fb      	strh	r3, [r7, #14]
    while((uint16_t)(__HAL_TIM_GET_COUNTER(&htim2) - start) < delay);
 8000c96:	bf00      	nop
 8000c98:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <microDelay+0x34>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f5      	bhi.n	8000c98 <microDelay+0x14>
};
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	200000dc 	.word	0x200000dc

08000cbc <getHX711>:
int32_t getHX711(void){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick();
 8000cc6:	f000 fa23 	bl	8001110 <HAL_GetTick>
 8000cca:	6078      	str	r0, [r7, #4]
	while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000ccc:	e008      	b.n	8000ce0 <getHX711+0x24>
	{
		if(HAL_GetTick() - startTime > 200)
 8000cce:	f000 fa1f 	bl	8001110 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2bc8      	cmp	r3, #200	@ 0xc8
 8000cda:	d901      	bls.n	8000ce0 <getHX711+0x24>
		{
			return 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e04b      	b.n	8000d78 <getHX711+0xbc>
	while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000ce0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce4:	4826      	ldr	r0, [pc, #152]	@ (8000d80 <getHX711+0xc4>)
 8000ce6:	f000 fca9 	bl	800163c <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d0ee      	beq.n	8000cce <getHX711+0x12>
		}
	}
	for(int8_t len = 0; len < 24; len++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	72fb      	strb	r3, [r7, #11]
 8000cf4:	e025      	b.n	8000d42 <getHX711+0x86>
	{
		HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cfc:	4820      	ldr	r0, [pc, #128]	@ (8000d80 <getHX711+0xc4>)
 8000cfe:	f000 fcb4 	bl	800166a <HAL_GPIO_WritePin>
		microDelay(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff ffbe 	bl	8000c84 <microDelay>
		data = data << 1;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d14:	481a      	ldr	r0, [pc, #104]	@ (8000d80 <getHX711+0xc4>)
 8000d16:	f000 fca8 	bl	800166a <HAL_GPIO_WritePin>
		microDelay(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff ffb2 	bl	8000c84 <microDelay>
		if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000d20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d24:	4816      	ldr	r0, [pc, #88]	@ (8000d80 <getHX711+0xc4>)
 8000d26:	f000 fc89 	bl	800163c <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d102      	bne.n	8000d36 <getHX711+0x7a>
		{
			data++;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
	for(int8_t len = 0; len < 24; len++)
 8000d36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	72fb      	strb	r3, [r7, #11]
 8000d42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d46:	2b17      	cmp	r3, #23
 8000d48:	ddd5      	ble.n	8000cf6 <getHX711+0x3a>
		}
	}
	data = data ^ 0x800000;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8000d50:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d58:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <getHX711+0xc4>)
 8000d5a:	f000 fc86 	bl	800166a <HAL_GPIO_WritePin>
	microDelay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ff90 	bl	8000c84 <microDelay>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <getHX711+0xc4>)
 8000d6c:	f000 fc7d 	bl	800166a <HAL_GPIO_WritePin>
	microDelay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ff87 	bl	8000c84 <microDelay>
	return data;
 8000d76:	68fb      	ldr	r3, [r7, #12]
};
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40010c00 	.word	0x40010c00

08000d84 <weigh>:

int32_t weigh()
{
 8000d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
	int64_t total = 0;
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t samples = 10;
 8000d98:	230a      	movs	r3, #10
 8000d9a:	60bb      	str	r3, [r7, #8]
	int32_t miligram;
	for(uint16_t i = 0; i<samples; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	81fb      	strh	r3, [r7, #14]
 8000da0:	e010      	b.n	8000dc4 <weigh+0x40>
	{
		total += getHX711();
 8000da2:	f7ff ff8b 	bl	8000cbc <getHX711>
 8000da6:	4603      	mov	r3, r0
 8000da8:	17da      	asrs	r2, r3, #31
 8000daa:	461c      	mov	r4, r3
 8000dac:	4615      	mov	r5, r2
 8000dae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000db2:	eb12 0804 	adds.w	r8, r2, r4
 8000db6:	eb43 0905 	adc.w	r9, r3, r5
 8000dba:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for(uint16_t i = 0; i<samples; i++)
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	81fb      	strh	r3, [r7, #14]
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dcea      	bgt.n	8000da2 <weigh+0x1e>
	}
	total = (int64_t)(total / samples);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	17da      	asrs	r2, r3, #31
 8000dd0:	469a      	mov	sl, r3
 8000dd2:	4693      	mov	fp, r2
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ddc:	f7ff f9b6 	bl	800014c <__aeabi_ldivmod>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	miligram = (int32_t)(total - tare)*knownOriginal;
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <weigh+0x90>)
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <weigh+0x94>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	607b      	str	r3, [r7, #4]
	miligram = miligram / knownHX711;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <weigh+0x98>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e06:	607b      	str	r3, [r7, #4]
	return miligram;
 8000e08:	687b      	ldr	r3, [r7, #4]

};
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	20000008 	.word	0x20000008

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <Error_Handler+0x8>

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_MspInit+0x60>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_MspInit+0x60>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a15      	ldr	r2, [pc, #84]	@ (8000f00 <HAL_I2C_MspInit+0x70>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d123      	bne.n	8000ef8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec8:	23c0      	movs	r3, #192	@ 0xc0
 8000eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <HAL_I2C_MspInit+0x78>)
 8000edc:	f000 fa2a 	bl	8001334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ee6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eea:	61d3      	str	r3, [r2, #28]
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f1c:	d10b      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1e:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_TIM_Base_MspInit+0x34>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_TIM_Base_MspInit+0x34>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_TIM_Base_MspInit+0x34>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f8aa 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	@ (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f001 feec 	bl	8002da8 <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20005000 	.word	0x20005000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	20000128 	.word	0x20000128
 8001004:	20000278 	.word	0x20000278

08001008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001014:	f7ff fff8 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800101a:	490c      	ldr	r1, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800101c:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <LoopFillZerobss+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a09      	ldr	r2, [pc, #36]	@ (8001054 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001030:	4c09      	ldr	r4, [pc, #36]	@ (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f001 feb9 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff fcab 	bl	800099c <main>
  bx lr
 8001046:	4770      	bx	lr
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001050:	08003780 	.word	0x08003780
  ldr r2, =_sbss
 8001054:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001058:	20000278 	.word	0x20000278

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f92b 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	200f      	movs	r0, #15
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fed6 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f935 	bl	800131a <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f90b 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	@ (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000014 	.word	0x20000014
 80010e8:	20000010 	.word	0x20000010

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_IncTick+0x1c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b05      	ldr	r3, [pc, #20]	@ (800110c <HAL_IncTick+0x20>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a03      	ldr	r2, [pc, #12]	@ (800110c <HAL_IncTick+0x20>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000014 	.word	0x20000014
 800110c:	2000012c 	.word	0x2000012c

08001110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b02      	ldr	r3, [pc, #8]	@ (8001120 <HAL_GetTick+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	2000012c 	.word	0x2000012c

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fff0 	bl	8001110 <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffe0 	bl	8001110 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000014 	.word	0x20000014

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff90 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff49 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff5e 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff90 	bl	8001224 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5f 	bl	80011d0 <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffb0 	bl	8001288 <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b08b      	sub	sp, #44	@ 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001346:	e169      	b.n	800161c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001348:	2201      	movs	r2, #1
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 8158 	bne.w	8001616 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a9a      	ldr	r2, [pc, #616]	@ (80015d4 <HAL_GPIO_Init+0x2a0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d05e      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001370:	4a98      	ldr	r2, [pc, #608]	@ (80015d4 <HAL_GPIO_Init+0x2a0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d875      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001376:	4a98      	ldr	r2, [pc, #608]	@ (80015d8 <HAL_GPIO_Init+0x2a4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d058      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 800137c:	4a96      	ldr	r2, [pc, #600]	@ (80015d8 <HAL_GPIO_Init+0x2a4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d86f      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001382:	4a96      	ldr	r2, [pc, #600]	@ (80015dc <HAL_GPIO_Init+0x2a8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d052      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001388:	4a94      	ldr	r2, [pc, #592]	@ (80015dc <HAL_GPIO_Init+0x2a8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d869      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800138e:	4a94      	ldr	r2, [pc, #592]	@ (80015e0 <HAL_GPIO_Init+0x2ac>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d04c      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001394:	4a92      	ldr	r2, [pc, #584]	@ (80015e0 <HAL_GPIO_Init+0x2ac>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d863      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800139a:	4a92      	ldr	r2, [pc, #584]	@ (80015e4 <HAL_GPIO_Init+0x2b0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d046      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 80013a0:	4a90      	ldr	r2, [pc, #576]	@ (80015e4 <HAL_GPIO_Init+0x2b0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d85d      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d82a      	bhi.n	8001400 <HAL_GPIO_Init+0xcc>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d859      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013ae:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <HAL_GPIO_Init+0x80>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	0800142f 	.word	0x0800142f
 80013b8:	08001409 	.word	0x08001409
 80013bc:	0800141b 	.word	0x0800141b
 80013c0:	0800145d 	.word	0x0800145d
 80013c4:	08001463 	.word	0x08001463
 80013c8:	08001463 	.word	0x08001463
 80013cc:	08001463 	.word	0x08001463
 80013d0:	08001463 	.word	0x08001463
 80013d4:	08001463 	.word	0x08001463
 80013d8:	08001463 	.word	0x08001463
 80013dc:	08001463 	.word	0x08001463
 80013e0:	08001463 	.word	0x08001463
 80013e4:	08001463 	.word	0x08001463
 80013e8:	08001463 	.word	0x08001463
 80013ec:	08001463 	.word	0x08001463
 80013f0:	08001463 	.word	0x08001463
 80013f4:	08001463 	.word	0x08001463
 80013f8:	08001411 	.word	0x08001411
 80013fc:	08001425 	.word	0x08001425
 8001400:	4a79      	ldr	r2, [pc, #484]	@ (80015e8 <HAL_GPIO_Init+0x2b4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001406:	e02c      	b.n	8001462 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e029      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	3304      	adds	r3, #4
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e024      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	3308      	adds	r3, #8
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e01f      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	330c      	adds	r3, #12
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e01a      	b.n	8001464 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001436:	2304      	movs	r3, #4
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e013      	b.n	8001464 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	611a      	str	r2, [r3, #16]
          break;
 800144e:	e009      	b.n	8001464 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2308      	movs	r3, #8
 8001452:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	615a      	str	r2, [r3, #20]
          break;
 800145a:	e003      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x130>
          break;
 8001462:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	@ 0xff
 8001468:	d801      	bhi.n	800146e <HAL_GPIO_Init+0x13a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	e001      	b.n	8001472 <HAL_GPIO_Init+0x13e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2bff      	cmp	r3, #255	@ 0xff
 8001478:	d802      	bhi.n	8001480 <HAL_GPIO_Init+0x14c>
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x152>
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	3b08      	subs	r3, #8
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	210f      	movs	r1, #15
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80b1 	beq.w	8001616 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b4:	4b4d      	ldr	r3, [pc, #308]	@ (80015ec <HAL_GPIO_Init+0x2b8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	@ (80015ec <HAL_GPIO_Init+0x2b8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b4a      	ldr	r3, [pc, #296]	@ (80015ec <HAL_GPIO_Init+0x2b8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014cc:	4a48      	ldr	r2, [pc, #288]	@ (80015f0 <HAL_GPIO_Init+0x2bc>)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a40      	ldr	r2, [pc, #256]	@ (80015f4 <HAL_GPIO_Init+0x2c0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_GPIO_Init+0x1ec>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3f      	ldr	r2, [pc, #252]	@ (80015f8 <HAL_GPIO_Init+0x2c4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00d      	beq.n	800151c <HAL_GPIO_Init+0x1e8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a3e      	ldr	r2, [pc, #248]	@ (80015fc <HAL_GPIO_Init+0x2c8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x1e4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a3d      	ldr	r2, [pc, #244]	@ (8001600 <HAL_GPIO_Init+0x2cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_GPIO_Init+0x1e0>
 8001510:	2303      	movs	r3, #3
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001514:	2304      	movs	r3, #4
 8001516:	e004      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001518:	2302      	movs	r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001520:	2300      	movs	r3, #0
 8001522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4093      	lsls	r3, r2
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001532:	492f      	ldr	r1, [pc, #188]	@ (80015f0 <HAL_GPIO_Init+0x2bc>)
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800154c:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	492c      	ldr	r1, [pc, #176]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800155a:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	4928      	ldr	r1, [pc, #160]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 8001564:	4013      	ands	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	4922      	ldr	r1, [pc, #136]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	60cb      	str	r3, [r1, #12]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	491e      	ldr	r1, [pc, #120]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4918      	ldr	r1, [pc, #96]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4914      	ldr	r1, [pc, #80]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d021      	beq.n	8001608 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	490e      	ldr	r1, [pc, #56]	@ (8001604 <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e021      	b.n	8001616 <HAL_GPIO_Init+0x2e2>
 80015d2:	bf00      	nop
 80015d4:	10320000 	.word	0x10320000
 80015d8:	10310000 	.word	0x10310000
 80015dc:	10220000 	.word	0x10220000
 80015e0:	10210000 	.word	0x10210000
 80015e4:	10120000 	.word	0x10120000
 80015e8:	10110000 	.word	0x10110000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40011000 	.word	0x40011000
 8001600:	40011400 	.word	0x40011400
 8001604:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_GPIO_Init+0x304>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	43db      	mvns	r3, r3
 8001610:	4909      	ldr	r1, [pc, #36]	@ (8001638 <HAL_GPIO_Init+0x304>)
 8001612:	4013      	ands	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	3301      	adds	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f47f ae8e 	bne.w	8001348 <HAL_GPIO_Init+0x14>
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	372c      	adds	r7, #44	@ 0x2c
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	807b      	strh	r3, [r7, #2]
 8001676:	4613      	mov	r3, r2
 8001678:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167a:	787b      	ldrb	r3, [r7, #1]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001680:	887a      	ldrh	r2, [r7, #2]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001686:	e003      	b.n	8001690 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
	...

0800169c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e12b      	b.n	8001906 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fbe4 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2224      	movs	r2, #36	@ 0x24
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001700:	f001 f832 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8001704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a81      	ldr	r2, [pc, #516]	@ (8001910 <HAL_I2C_Init+0x274>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d807      	bhi.n	8001720 <HAL_I2C_Init+0x84>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a80      	ldr	r2, [pc, #512]	@ (8001914 <HAL_I2C_Init+0x278>)
 8001714:	4293      	cmp	r3, r2
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	e006      	b.n	800172e <HAL_I2C_Init+0x92>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a7d      	ldr	r2, [pc, #500]	@ (8001918 <HAL_I2C_Init+0x27c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	bf94      	ite	ls
 8001728:	2301      	movls	r3, #1
 800172a:	2300      	movhi	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0e7      	b.n	8001906 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4a78      	ldr	r2, [pc, #480]	@ (800191c <HAL_I2C_Init+0x280>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9b      	lsrs	r3, r3, #18
 8001740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a6a      	ldr	r2, [pc, #424]	@ (8001910 <HAL_I2C_Init+0x274>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d802      	bhi.n	8001770 <HAL_I2C_Init+0xd4>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3301      	adds	r3, #1
 800176e:	e009      	b.n	8001784 <HAL_I2C_Init+0xe8>
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	4a69      	ldr	r2, [pc, #420]	@ (8001920 <HAL_I2C_Init+0x284>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	3301      	adds	r3, #1
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	430b      	orrs	r3, r1
 800178a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001796:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	495c      	ldr	r1, [pc, #368]	@ (8001910 <HAL_I2C_Init+0x274>)
 80017a0:	428b      	cmp	r3, r1
 80017a2:	d819      	bhi.n	80017d8 <HAL_I2C_Init+0x13c>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1e59      	subs	r1, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017b8:	400b      	ands	r3, r1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00a      	beq.n	80017d4 <HAL_I2C_Init+0x138>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1e59      	subs	r1, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d2:	e051      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 80017d4:	2304      	movs	r3, #4
 80017d6:	e04f      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d111      	bne.n	8001804 <HAL_I2C_Init+0x168>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	440b      	add	r3, r1
 80017ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e012      	b.n	800182a <HAL_I2C_Init+0x18e>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e58      	subs	r0, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	0099      	lsls	r1, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	fbb0 f3f3 	udiv	r3, r0, r3
 800181a:	3301      	adds	r3, #1
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Init+0x196>
 800182e:	2301      	movs	r3, #1
 8001830:	e022      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10e      	bne.n	8001858 <HAL_I2C_Init+0x1bc>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1e58      	subs	r0, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6859      	ldr	r1, [r3, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	440b      	add	r3, r1
 8001848:	fbb0 f3f3 	udiv	r3, r0, r3
 800184c:	3301      	adds	r3, #1
 800184e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001856:	e00f      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	0099      	lsls	r1, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	6809      	ldr	r1, [r1, #0]
 800187c:	4313      	orrs	r3, r2
 800187e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6911      	ldr	r1, [r2, #16]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68d2      	ldr	r2, [r2, #12]
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	000186a0 	.word	0x000186a0
 8001914:	001e847f 	.word	0x001e847f
 8001918:	003d08ff 	.word	0x003d08ff
 800191c:	431bde83 	.word	0x431bde83
 8001920:	10624dd3 	.word	0x10624dd3

08001924 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	460b      	mov	r3, r1
 8001932:	817b      	strh	r3, [r7, #10]
 8001934:	4613      	mov	r3, r2
 8001936:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff fbea 	bl	8001110 <HAL_GetTick>
 800193c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b20      	cmp	r3, #32
 8001948:	f040 80e0 	bne.w	8001b0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2319      	movs	r3, #25
 8001952:	2201      	movs	r2, #1
 8001954:	4970      	ldr	r1, [pc, #448]	@ (8001b18 <HAL_I2C_Master_Transmit+0x1f4>)
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f964 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001962:	2302      	movs	r3, #2
 8001964:	e0d3      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_I2C_Master_Transmit+0x50>
 8001970:	2302      	movs	r3, #2
 8001972:	e0cc      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x1ea>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d007      	beq.n	800199a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2221      	movs	r2, #33	@ 0x21
 80019ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2210      	movs	r2, #16
 80019b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	893a      	ldrh	r2, [r7, #8]
 80019ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4a50      	ldr	r2, [pc, #320]	@ (8001b1c <HAL_I2C_Master_Transmit+0x1f8>)
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019dc:	8979      	ldrh	r1, [r7, #10]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	6a3a      	ldr	r2, [r7, #32]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f89c 	bl	8001b20 <I2C_MasterRequestWrite>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e08d      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a08:	e066      	b.n	8001ad8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	6a39      	ldr	r1, [r7, #32]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fa22 	bl	8001e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00d      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d107      	bne.n	8001a32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e06b      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	781a      	ldrb	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d11b      	bne.n	8001aac <HAL_I2C_Master_Transmit+0x188>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d017      	beq.n	8001aac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	6a39      	ldr	r1, [r7, #32]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fa19 	bl	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00d      	beq.n	8001ad8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d107      	bne.n	8001ad4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e01a      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d194      	bne.n	8001a0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e000      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b0c:	2302      	movs	r3, #2
  }
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	00100002 	.word	0x00100002
 8001b1c:	ffff0000 	.word	0xffff0000

08001b20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d006      	beq.n	8001b4a <I2C_MasterRequestWrite+0x2a>
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d003      	beq.n	8001b4a <I2C_MasterRequestWrite+0x2a>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b48:	d108      	bne.n	8001b5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	e00b      	b.n	8001b74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b60:	2b12      	cmp	r3, #18
 8001b62:	d107      	bne.n	8001b74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f84f 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00d      	beq.n	8001ba8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b9a:	d103      	bne.n	8001ba4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e035      	b.n	8001c14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bb0:	d108      	bne.n	8001bc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bb2:	897b      	ldrh	r3, [r7, #10]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	e01b      	b.n	8001bfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bc4:	897b      	ldrh	r3, [r7, #10]
 8001bc6:	11db      	asrs	r3, r3, #7
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f003 0306 	and.w	r3, r3, #6
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f063 030f 	orn	r3, r3, #15
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	490e      	ldr	r1, [pc, #56]	@ (8001c1c <I2C_MasterRequestWrite+0xfc>)
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f898 	bl	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e010      	b.n	8001c14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4907      	ldr	r1, [pc, #28]	@ (8001c20 <I2C_MasterRequestWrite+0x100>)
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f888 	bl	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	00010008 	.word	0x00010008
 8001c20:	00010002 	.word	0x00010002

08001c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c34:	e048      	b.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d044      	beq.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7ff fa67 	bl	8001110 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d139      	bne.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d10d      	bne.n	8001c7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	43da      	mvns	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	e00c      	b.n	8001c94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	43da      	mvns	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4013      	ands	r3, r2
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d116      	bne.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e023      	b.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10d      	bne.n	8001cee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	e00c      	b.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d093      	beq.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d26:	e071      	b.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d36:	d123      	bne.n	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e067      	b.n	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d86:	d041      	beq.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d88:	f7ff f9c2 	bl	8001110 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d302      	bcc.n	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d136      	bne.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d10c      	bne.n	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4013      	ands	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf14      	ite	ne
 8001dba:	2301      	movne	r3, #1
 8001dbc:	2300      	moveq	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	e00b      	b.n	8001dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d016      	beq.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e021      	b.n	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10c      	bne.n	8001e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e00b      	b.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f47f af6d 	bne.w	8001d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e64:	e034      	b.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f886 	bl	8001f78 <I2C_IsAcknowledgeFailed>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e034      	b.n	8001ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d028      	beq.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7ff f947 	bl	8001110 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11d      	bne.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e9e:	2b80      	cmp	r3, #128	@ 0x80
 8001ea0:	d016      	beq.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e007      	b.n	8001ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eda:	2b80      	cmp	r3, #128	@ 0x80
 8001edc:	d1c3      	bne.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ef4:	e034      	b.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f83e 	bl	8001f78 <I2C_IsAcknowledgeFailed>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e034      	b.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d028      	beq.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7ff f8ff 	bl	8001110 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11d      	bne.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d016      	beq.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e007      	b.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d1c3      	bne.n	8001ef6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8e:	d11b      	bne.n	8001fc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e272      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8087 	beq.w	8002102 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff4:	4b92      	ldr	r3, [pc, #584]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00c      	beq.n	800201a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002000:	4b8f      	ldr	r3, [pc, #572]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d112      	bne.n	8002032 <HAL_RCC_OscConfig+0x5e>
 800200c:	4b8c      	ldr	r3, [pc, #560]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b89      	ldr	r3, [pc, #548]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d06c      	beq.n	8002100 <HAL_RCC_OscConfig+0x12c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d168      	bne.n	8002100 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e24c      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x76>
 800203c:	4b80      	ldr	r3, [pc, #512]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a7f      	ldr	r2, [pc, #508]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b7b      	ldr	r3, [pc, #492]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7a      	ldr	r2, [pc, #488]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b78      	ldr	r3, [pc, #480]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a77      	ldr	r2, [pc, #476]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002064:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0xbc>
 8002076:	4b72      	ldr	r3, [pc, #456]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a71      	ldr	r2, [pc, #452]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 8002090:	4b6b      	ldr	r3, [pc, #428]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6a      	ldr	r2, [pc, #424]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b68      	ldr	r3, [pc, #416]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a67      	ldr	r2, [pc, #412]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff f82e 	bl	8001110 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff f82a 	bl	8001110 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e200      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe4>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff f81a 	bl	8001110 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff f816 	bl	8001110 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1ec      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	4b53      	ldr	r3, [pc, #332]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x10c>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d063      	beq.n	80021d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210e:	4b4c      	ldr	r3, [pc, #304]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800211a:	4b49      	ldr	r3, [pc, #292]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11c      	bne.n	8002160 <HAL_RCC_OscConfig+0x18c>
 8002126:	4b46      	ldr	r3, [pc, #280]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	4b43      	ldr	r3, [pc, #268]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1c0      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b3d      	ldr	r3, [pc, #244]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4939      	ldr	r1, [pc, #228]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	e03a      	b.n	80021d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7fe ffcf 	bl	8001110 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002176:	f7fe ffcb 	bl	8001110 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1a1      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	4b2d      	ldr	r3, [pc, #180]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b2a      	ldr	r3, [pc, #168]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4927      	ldr	r1, [pc, #156]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
 80021a8:	e015      	b.n	80021d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021aa:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe ffae 	bl	8001110 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7fe ffaa 	bl	8001110 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e180      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03a      	beq.n	8002258 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ea:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <HAL_RCC_OscConfig+0x274>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7fe ff8e 	bl	8001110 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7fe ff8a 	bl	8001110 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e160      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <HAL_RCC_OscConfig+0x26c>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002216:	2001      	movs	r0, #1
 8002218:	f000 faba 	bl	8002790 <RCC_Delay>
 800221c:	e01c      	b.n	8002258 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_RCC_OscConfig+0x274>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fe ff74 	bl	8001110 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222a:	e00f      	b.n	800224c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe ff70 	bl	8001110 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d908      	bls.n	800224c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e146      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	42420000 	.word	0x42420000
 8002248:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b92      	ldr	r3, [pc, #584]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e9      	bne.n	800222c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a6 	beq.w	80023b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b8b      	ldr	r3, [pc, #556]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10d      	bne.n	8002292 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b88      	ldr	r3, [pc, #544]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a87      	ldr	r2, [pc, #540]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b85      	ldr	r3, [pc, #532]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b82      	ldr	r3, [pc, #520]	@ (800249c <HAL_RCC_OscConfig+0x4c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b7f      	ldr	r3, [pc, #508]	@ (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7e      	ldr	r2, [pc, #504]	@ (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7fe ff31 	bl	8001110 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe ff2d 	bl	8001110 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	@ 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e103      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b75      	ldr	r3, [pc, #468]	@ (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x312>
 80022d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e02d      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x334>
 80022ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a69      	ldr	r2, [pc, #420]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	4b67      	ldr	r3, [pc, #412]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a66      	ldr	r2, [pc, #408]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	e01c      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x356>
 8002310:	4b61      	ldr	r3, [pc, #388]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a60      	ldr	r2, [pc, #384]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	4b5e      	ldr	r3, [pc, #376]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a5d      	ldr	r2, [pc, #372]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 800232a:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a5a      	ldr	r2, [pc, #360]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b58      	ldr	r3, [pc, #352]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a57      	ldr	r2, [pc, #348]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d015      	beq.n	8002376 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7fe fee1 	bl	8001110 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fedd 	bl	8001110 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0b1      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	4b4b      	ldr	r3, [pc, #300]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ee      	beq.n	8002352 <HAL_RCC_OscConfig+0x37e>
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7fe fecb 	bl	8001110 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe fec7 	bl	8001110 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e09b      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	4b40      	ldr	r3, [pc, #256]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8087 	beq.w	80024ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023bc:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d061      	beq.n	800248c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d146      	bne.n	800245e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b33      	ldr	r3, [pc, #204]	@ (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fe9b 	bl	8001110 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fe97 	bl	8001110 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e06d      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002404:	d108      	bne.n	8002418 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002406:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4921      	ldr	r1, [pc, #132]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002418:	4b1f      	ldr	r3, [pc, #124]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a19      	ldr	r1, [r3, #32]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	430b      	orrs	r3, r1
 800242a:	491b      	ldr	r1, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fe6b 	bl	8001110 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7fe fe67 	bl	8001110 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e03d      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x46a>
 800245c:	e035      	b.n	80024ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fe54 	bl	8001110 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fe50 	bl	8001110 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e026      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x498>
 800248a:	e01e      	b.n	80024ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e019      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <HAL_RCC_OscConfig+0x500>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0d0      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b67      	ldr	r3, [pc, #412]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	4965      	ldr	r1, [pc, #404]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b63      	ldr	r3, [pc, #396]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b8      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	4b59      	ldr	r3, [pc, #356]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a58      	ldr	r2, [pc, #352]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800253e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800254c:	4b53      	ldr	r3, [pc, #332]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a52      	ldr	r2, [pc, #328]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002556:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b50      	ldr	r3, [pc, #320]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	494d      	ldr	r1, [pc, #308]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d040      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d115      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07f      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e073      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06b      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b6:	4b39      	ldr	r3, [pc, #228]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4936      	ldr	r1, [pc, #216]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7fe fda2 	bl	8001110 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7fe fd9e 	bl	8001110 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e053      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	4b2d      	ldr	r3, [pc, #180]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 020c 	and.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1eb      	bne.n	80025d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d210      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4922      	ldr	r1, [pc, #136]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e032      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4916      	ldr	r1, [pc, #88]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002652:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	490e      	ldr	r1, [pc, #56]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002666:	f000 f821 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490a      	ldr	r1, [pc, #40]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002682:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fd00 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40022000 	.word	0x40022000
 800269c:	40021000 	.word	0x40021000
 80026a0:	08003710 	.word	0x08003710
 80026a4:	2000000c 	.word	0x2000000c
 80026a8:	20000010 	.word	0x20000010

080026ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x94>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d002      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x30>
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x36>
 80026da:	e027      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026dc:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x98>)
 80026de:	613b      	str	r3, [r7, #16]
      break;
 80026e0:	e027      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	0c9b      	lsrs	r3, r3, #18
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d010      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026fa:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x94>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0c5b      	lsrs	r3, r3, #17
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	4a11      	ldr	r2, [pc, #68]	@ (800274c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x98>)
 800270e:	fb03 f202 	mul.w	r2, r3, r2
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e004      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a0c      	ldr	r2, [pc, #48]	@ (8002750 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002720:	fb02 f303 	mul.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	613b      	str	r3, [r7, #16]
      break;
 800272a:	e002      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x98>)
 800272e:	613b      	str	r3, [r7, #16]
      break;
 8002730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002732:	693b      	ldr	r3, [r7, #16]
}
 8002734:	4618      	mov	r0, r3
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	007a1200 	.word	0x007a1200
 8002748:	08003728 	.word	0x08003728
 800274c:	08003738 	.word	0x08003738
 8002750:	003d0900 	.word	0x003d0900

08002754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b02      	ldr	r3, [pc, #8]	@ (8002764 <HAL_RCC_GetHCLKFreq+0x10>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	2000000c 	.word	0x2000000c

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800276c:	f7ff fff2 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	@ (800278c <HAL_RCC_GetPCLK1Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	08003720 	.word	0x08003720

08002790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <RCC_Delay+0x34>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <RCC_Delay+0x38>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0a5b      	lsrs	r3, r3, #9
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027ac:	bf00      	nop
  }
  while (Delay --);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	60fa      	str	r2, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f9      	bne.n	80027ac <RCC_Delay+0x1c>
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	2000000c 	.word	0x2000000c
 80027c8:	10624dd3 	.word	0x10624dd3

080027cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e041      	b.n	8002862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fb8a 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f000 f940 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d001      	beq.n	8002884 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e032      	b.n	80028ea <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a18      	ldr	r2, [pc, #96]	@ (80028f4 <HAL_TIM_Base_Start+0x88>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_TIM_Base_Start+0x48>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_Base_Start+0x48>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <HAL_TIM_Base_Start+0x8c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_Base_Start+0x48>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a13      	ldr	r2, [pc, #76]	@ (80028fc <HAL_TIM_Base_Start+0x90>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d111      	bne.n	80028d8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d010      	beq.n	80028e8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	e007      	b.n	80028e8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800

08002900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_TIM_ConfigClockSource+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e0b4      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x186>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800293a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002954:	d03e      	beq.n	80029d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295a:	f200 8087 	bhi.w	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002962:	f000 8086 	beq.w	8002a72 <HAL_TIM_ConfigClockSource+0x172>
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296a:	d87f      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b70      	cmp	r3, #112	@ 0x70
 800296e:	d01a      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002970:	2b70      	cmp	r3, #112	@ 0x70
 8002972:	d87b      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b60      	cmp	r3, #96	@ 0x60
 8002976:	d050      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x11a>
 8002978:	2b60      	cmp	r3, #96	@ 0x60
 800297a:	d877      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b50      	cmp	r3, #80	@ 0x50
 800297e:	d03c      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0xfa>
 8002980:	2b50      	cmp	r3, #80	@ 0x50
 8002982:	d873      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d058      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x13a>
 8002988:	2b40      	cmp	r3, #64	@ 0x40
 800298a:	d86f      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b30      	cmp	r3, #48	@ 0x30
 800298e:	d064      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 8002990:	2b30      	cmp	r3, #48	@ 0x30
 8002992:	d86b      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b20      	cmp	r3, #32
 8002996:	d060      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 8002998:	2b20      	cmp	r3, #32
 800299a:	d867      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d05c      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d05a      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	e062      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029b6:	f000 f950 	bl	8002c5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	609a      	str	r2, [r3, #8]
      break;
 80029d2:	e04f      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029e4:	f000 f939 	bl	8002c5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029f6:	609a      	str	r2, [r3, #8]
      break;
 80029f8:	e03c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	461a      	mov	r2, r3
 8002a08:	f000 f8b0 	bl	8002b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2150      	movs	r1, #80	@ 0x50
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f907 	bl	8002c26 <TIM_ITRx_SetConfig>
      break;
 8002a18:	e02c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a26:	461a      	mov	r2, r3
 8002a28:	f000 f8ce 	bl	8002bc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2160      	movs	r1, #96	@ 0x60
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f8f7 	bl	8002c26 <TIM_ITRx_SetConfig>
      break;
 8002a38:	e01c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a46:	461a      	mov	r2, r3
 8002a48:	f000 f890 	bl	8002b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2140      	movs	r1, #64	@ 0x40
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f8e7 	bl	8002c26 <TIM_ITRx_SetConfig>
      break;
 8002a58:	e00c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f000 f8de 	bl	8002c26 <TIM_ITRx_SetConfig>
      break;
 8002a6a:	e003      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a70:	e000      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b60 <TIM_Base_SetConfig+0xd0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_Base_SetConfig+0x30>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x30>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b64 <TIM_Base_SetConfig+0xd4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x30>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a2b      	ldr	r2, [pc, #172]	@ (8002b68 <TIM_Base_SetConfig+0xd8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <TIM_Base_SetConfig+0xd0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00b      	beq.n	8002af2 <TIM_Base_SetConfig+0x62>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae0:	d007      	beq.n	8002af2 <TIM_Base_SetConfig+0x62>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b64 <TIM_Base_SetConfig+0xd4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <TIM_Base_SetConfig+0x62>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a1e      	ldr	r2, [pc, #120]	@ (8002b68 <TIM_Base_SetConfig+0xd8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d108      	bne.n	8002b04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b60 <TIM_Base_SetConfig+0xd0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d103      	bne.n	8002b38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f023 0201 	bic.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	611a      	str	r2, [r3, #16]
  }
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800

08002b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f023 0201 	bic.w	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f023 030a 	bic.w	r3, r3, #10
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f023 0210 	bic.w	r2, r3, #16
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	031b      	lsls	r3, r3, #12
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	621a      	str	r2, [r3, #32]
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f043 0307 	orr.w	r3, r3, #7
 8002c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b087      	sub	sp, #28
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	609a      	str	r2, [r3, #8]
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e046      	b.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a12      	ldr	r2, [pc, #72]	@ (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a10      	ldr	r2, [pc, #64]	@ (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10c      	bne.n	8002d2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <siprintf>:
 8002d54:	b40e      	push	{r1, r2, r3}
 8002d56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002d5a:	b510      	push	{r4, lr}
 8002d5c:	2400      	movs	r4, #0
 8002d5e:	b09d      	sub	sp, #116	@ 0x74
 8002d60:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002d62:	9002      	str	r0, [sp, #8]
 8002d64:	9006      	str	r0, [sp, #24]
 8002d66:	9107      	str	r1, [sp, #28]
 8002d68:	9104      	str	r1, [sp, #16]
 8002d6a:	4809      	ldr	r0, [pc, #36]	@ (8002d90 <siprintf+0x3c>)
 8002d6c:	4909      	ldr	r1, [pc, #36]	@ (8002d94 <siprintf+0x40>)
 8002d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d72:	9105      	str	r1, [sp, #20]
 8002d74:	6800      	ldr	r0, [r0, #0]
 8002d76:	a902      	add	r1, sp, #8
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002d7c:	f000 f992 	bl	80030a4 <_svfiprintf_r>
 8002d80:	9b02      	ldr	r3, [sp, #8]
 8002d82:	701c      	strb	r4, [r3, #0]
 8002d84:	b01d      	add	sp, #116	@ 0x74
 8002d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d8a:	b003      	add	sp, #12
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000018 	.word	0x20000018
 8002d94:	ffff0208 	.word	0xffff0208

08002d98 <memset>:
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4402      	add	r2, r0
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <memset+0xa>
 8002da0:	4770      	bx	lr
 8002da2:	f803 1b01 	strb.w	r1, [r3], #1
 8002da6:	e7f9      	b.n	8002d9c <memset+0x4>

08002da8 <__errno>:
 8002da8:	4b01      	ldr	r3, [pc, #4]	@ (8002db0 <__errno+0x8>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000018 	.word	0x20000018

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	2600      	movs	r6, #0
 8002db8:	4d0c      	ldr	r5, [pc, #48]	@ (8002dec <__libc_init_array+0x38>)
 8002dba:	4c0d      	ldr	r4, [pc, #52]	@ (8002df0 <__libc_init_array+0x3c>)
 8002dbc:	1b64      	subs	r4, r4, r5
 8002dbe:	10a4      	asrs	r4, r4, #2
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	f000 fc76 	bl	80036b4 <_init>
 8002dc8:	2600      	movs	r6, #0
 8002dca:	4d0a      	ldr	r5, [pc, #40]	@ (8002df4 <__libc_init_array+0x40>)
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8002df8 <__libc_init_array+0x44>)
 8002dce:	1b64      	subs	r4, r4, r5
 8002dd0:	10a4      	asrs	r4, r4, #2
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08003778 	.word	0x08003778
 8002df0:	08003778 	.word	0x08003778
 8002df4:	08003778 	.word	0x08003778
 8002df8:	0800377c 	.word	0x0800377c

08002dfc <__retarget_lock_acquire_recursive>:
 8002dfc:	4770      	bx	lr

08002dfe <__retarget_lock_release_recursive>:
 8002dfe:	4770      	bx	lr

08002e00 <_free_r>:
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	4605      	mov	r5, r0
 8002e04:	2900      	cmp	r1, #0
 8002e06:	d040      	beq.n	8002e8a <_free_r+0x8a>
 8002e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e0c:	1f0c      	subs	r4, r1, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bfb8      	it	lt
 8002e12:	18e4      	addlt	r4, r4, r3
 8002e14:	f000 f8de 	bl	8002fd4 <__malloc_lock>
 8002e18:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <_free_r+0x8c>)
 8002e1a:	6813      	ldr	r3, [r2, #0]
 8002e1c:	b933      	cbnz	r3, 8002e2c <_free_r+0x2c>
 8002e1e:	6063      	str	r3, [r4, #4]
 8002e20:	6014      	str	r4, [r2, #0]
 8002e22:	4628      	mov	r0, r5
 8002e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e28:	f000 b8da 	b.w	8002fe0 <__malloc_unlock>
 8002e2c:	42a3      	cmp	r3, r4
 8002e2e:	d908      	bls.n	8002e42 <_free_r+0x42>
 8002e30:	6820      	ldr	r0, [r4, #0]
 8002e32:	1821      	adds	r1, r4, r0
 8002e34:	428b      	cmp	r3, r1
 8002e36:	bf01      	itttt	eq
 8002e38:	6819      	ldreq	r1, [r3, #0]
 8002e3a:	685b      	ldreq	r3, [r3, #4]
 8002e3c:	1809      	addeq	r1, r1, r0
 8002e3e:	6021      	streq	r1, [r4, #0]
 8002e40:	e7ed      	b.n	8002e1e <_free_r+0x1e>
 8002e42:	461a      	mov	r2, r3
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	b10b      	cbz	r3, 8002e4c <_free_r+0x4c>
 8002e48:	42a3      	cmp	r3, r4
 8002e4a:	d9fa      	bls.n	8002e42 <_free_r+0x42>
 8002e4c:	6811      	ldr	r1, [r2, #0]
 8002e4e:	1850      	adds	r0, r2, r1
 8002e50:	42a0      	cmp	r0, r4
 8002e52:	d10b      	bne.n	8002e6c <_free_r+0x6c>
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	4401      	add	r1, r0
 8002e58:	1850      	adds	r0, r2, r1
 8002e5a:	4283      	cmp	r3, r0
 8002e5c:	6011      	str	r1, [r2, #0]
 8002e5e:	d1e0      	bne.n	8002e22 <_free_r+0x22>
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4408      	add	r0, r1
 8002e66:	6010      	str	r0, [r2, #0]
 8002e68:	6053      	str	r3, [r2, #4]
 8002e6a:	e7da      	b.n	8002e22 <_free_r+0x22>
 8002e6c:	d902      	bls.n	8002e74 <_free_r+0x74>
 8002e6e:	230c      	movs	r3, #12
 8002e70:	602b      	str	r3, [r5, #0]
 8002e72:	e7d6      	b.n	8002e22 <_free_r+0x22>
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	1821      	adds	r1, r4, r0
 8002e78:	428b      	cmp	r3, r1
 8002e7a:	bf01      	itttt	eq
 8002e7c:	6819      	ldreq	r1, [r3, #0]
 8002e7e:	685b      	ldreq	r3, [r3, #4]
 8002e80:	1809      	addeq	r1, r1, r0
 8002e82:	6021      	streq	r1, [r4, #0]
 8002e84:	6063      	str	r3, [r4, #4]
 8002e86:	6054      	str	r4, [r2, #4]
 8002e88:	e7cb      	b.n	8002e22 <_free_r+0x22>
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
 8002e8c:	20000274 	.word	0x20000274

08002e90 <sbrk_aligned>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4e0f      	ldr	r6, [pc, #60]	@ (8002ed0 <sbrk_aligned+0x40>)
 8002e94:	460c      	mov	r4, r1
 8002e96:	6831      	ldr	r1, [r6, #0]
 8002e98:	4605      	mov	r5, r0
 8002e9a:	b911      	cbnz	r1, 8002ea2 <sbrk_aligned+0x12>
 8002e9c:	f000 fba8 	bl	80035f0 <_sbrk_r>
 8002ea0:	6030      	str	r0, [r6, #0]
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f000 fba3 	bl	80035f0 <_sbrk_r>
 8002eaa:	1c43      	adds	r3, r0, #1
 8002eac:	d103      	bne.n	8002eb6 <sbrk_aligned+0x26>
 8002eae:	f04f 34ff 	mov.w	r4, #4294967295
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
 8002eb6:	1cc4      	adds	r4, r0, #3
 8002eb8:	f024 0403 	bic.w	r4, r4, #3
 8002ebc:	42a0      	cmp	r0, r4
 8002ebe:	d0f8      	beq.n	8002eb2 <sbrk_aligned+0x22>
 8002ec0:	1a21      	subs	r1, r4, r0
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f000 fb94 	bl	80035f0 <_sbrk_r>
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d1f2      	bne.n	8002eb2 <sbrk_aligned+0x22>
 8002ecc:	e7ef      	b.n	8002eae <sbrk_aligned+0x1e>
 8002ece:	bf00      	nop
 8002ed0:	20000270 	.word	0x20000270

08002ed4 <_malloc_r>:
 8002ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ed8:	1ccd      	adds	r5, r1, #3
 8002eda:	f025 0503 	bic.w	r5, r5, #3
 8002ede:	3508      	adds	r5, #8
 8002ee0:	2d0c      	cmp	r5, #12
 8002ee2:	bf38      	it	cc
 8002ee4:	250c      	movcc	r5, #12
 8002ee6:	2d00      	cmp	r5, #0
 8002ee8:	4606      	mov	r6, r0
 8002eea:	db01      	blt.n	8002ef0 <_malloc_r+0x1c>
 8002eec:	42a9      	cmp	r1, r5
 8002eee:	d904      	bls.n	8002efa <_malloc_r+0x26>
 8002ef0:	230c      	movs	r3, #12
 8002ef2:	6033      	str	r3, [r6, #0]
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002efa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fd0 <_malloc_r+0xfc>
 8002efe:	f000 f869 	bl	8002fd4 <__malloc_lock>
 8002f02:	f8d8 3000 	ldr.w	r3, [r8]
 8002f06:	461c      	mov	r4, r3
 8002f08:	bb44      	cbnz	r4, 8002f5c <_malloc_r+0x88>
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f7ff ffbf 	bl	8002e90 <sbrk_aligned>
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	4604      	mov	r4, r0
 8002f16:	d158      	bne.n	8002fca <_malloc_r+0xf6>
 8002f18:	f8d8 4000 	ldr.w	r4, [r8]
 8002f1c:	4627      	mov	r7, r4
 8002f1e:	2f00      	cmp	r7, #0
 8002f20:	d143      	bne.n	8002faa <_malloc_r+0xd6>
 8002f22:	2c00      	cmp	r4, #0
 8002f24:	d04b      	beq.n	8002fbe <_malloc_r+0xea>
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	4639      	mov	r1, r7
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	eb04 0903 	add.w	r9, r4, r3
 8002f30:	f000 fb5e 	bl	80035f0 <_sbrk_r>
 8002f34:	4581      	cmp	r9, r0
 8002f36:	d142      	bne.n	8002fbe <_malloc_r+0xea>
 8002f38:	6821      	ldr	r1, [r4, #0]
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	1a6d      	subs	r5, r5, r1
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7ff ffa6 	bl	8002e90 <sbrk_aligned>
 8002f44:	3001      	adds	r0, #1
 8002f46:	d03a      	beq.n	8002fbe <_malloc_r+0xea>
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	442b      	add	r3, r5
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	bb62      	cbnz	r2, 8002fb0 <_malloc_r+0xdc>
 8002f56:	f8c8 7000 	str.w	r7, [r8]
 8002f5a:	e00f      	b.n	8002f7c <_malloc_r+0xa8>
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	1b52      	subs	r2, r2, r5
 8002f60:	d420      	bmi.n	8002fa4 <_malloc_r+0xd0>
 8002f62:	2a0b      	cmp	r2, #11
 8002f64:	d917      	bls.n	8002f96 <_malloc_r+0xc2>
 8002f66:	1961      	adds	r1, r4, r5
 8002f68:	42a3      	cmp	r3, r4
 8002f6a:	6025      	str	r5, [r4, #0]
 8002f6c:	bf18      	it	ne
 8002f6e:	6059      	strne	r1, [r3, #4]
 8002f70:	6863      	ldr	r3, [r4, #4]
 8002f72:	bf08      	it	eq
 8002f74:	f8c8 1000 	streq.w	r1, [r8]
 8002f78:	5162      	str	r2, [r4, r5]
 8002f7a:	604b      	str	r3, [r1, #4]
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f000 f82f 	bl	8002fe0 <__malloc_unlock>
 8002f82:	f104 000b 	add.w	r0, r4, #11
 8002f86:	1d23      	adds	r3, r4, #4
 8002f88:	f020 0007 	bic.w	r0, r0, #7
 8002f8c:	1ac2      	subs	r2, r0, r3
 8002f8e:	bf1c      	itt	ne
 8002f90:	1a1b      	subne	r3, r3, r0
 8002f92:	50a3      	strne	r3, [r4, r2]
 8002f94:	e7af      	b.n	8002ef6 <_malloc_r+0x22>
 8002f96:	6862      	ldr	r2, [r4, #4]
 8002f98:	42a3      	cmp	r3, r4
 8002f9a:	bf0c      	ite	eq
 8002f9c:	f8c8 2000 	streq.w	r2, [r8]
 8002fa0:	605a      	strne	r2, [r3, #4]
 8002fa2:	e7eb      	b.n	8002f7c <_malloc_r+0xa8>
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	6864      	ldr	r4, [r4, #4]
 8002fa8:	e7ae      	b.n	8002f08 <_malloc_r+0x34>
 8002faa:	463c      	mov	r4, r7
 8002fac:	687f      	ldr	r7, [r7, #4]
 8002fae:	e7b6      	b.n	8002f1e <_malloc_r+0x4a>
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	d1fb      	bne.n	8002fb0 <_malloc_r+0xdc>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6053      	str	r3, [r2, #4]
 8002fbc:	e7de      	b.n	8002f7c <_malloc_r+0xa8>
 8002fbe:	230c      	movs	r3, #12
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	6033      	str	r3, [r6, #0]
 8002fc4:	f000 f80c 	bl	8002fe0 <__malloc_unlock>
 8002fc8:	e794      	b.n	8002ef4 <_malloc_r+0x20>
 8002fca:	6005      	str	r5, [r0, #0]
 8002fcc:	e7d6      	b.n	8002f7c <_malloc_r+0xa8>
 8002fce:	bf00      	nop
 8002fd0:	20000274 	.word	0x20000274

08002fd4 <__malloc_lock>:
 8002fd4:	4801      	ldr	r0, [pc, #4]	@ (8002fdc <__malloc_lock+0x8>)
 8002fd6:	f7ff bf11 	b.w	8002dfc <__retarget_lock_acquire_recursive>
 8002fda:	bf00      	nop
 8002fdc:	2000026c 	.word	0x2000026c

08002fe0 <__malloc_unlock>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	@ (8002fe8 <__malloc_unlock+0x8>)
 8002fe2:	f7ff bf0c 	b.w	8002dfe <__retarget_lock_release_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	2000026c 	.word	0x2000026c

08002fec <__ssputs_r>:
 8002fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff0:	461f      	mov	r7, r3
 8002ff2:	688e      	ldr	r6, [r1, #8]
 8002ff4:	4682      	mov	sl, r0
 8002ff6:	42be      	cmp	r6, r7
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	4690      	mov	r8, r2
 8002ffc:	680b      	ldr	r3, [r1, #0]
 8002ffe:	d82d      	bhi.n	800305c <__ssputs_r+0x70>
 8003000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003004:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003008:	d026      	beq.n	8003058 <__ssputs_r+0x6c>
 800300a:	6965      	ldr	r5, [r4, #20]
 800300c:	6909      	ldr	r1, [r1, #16]
 800300e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003012:	eba3 0901 	sub.w	r9, r3, r1
 8003016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800301a:	1c7b      	adds	r3, r7, #1
 800301c:	444b      	add	r3, r9
 800301e:	106d      	asrs	r5, r5, #1
 8003020:	429d      	cmp	r5, r3
 8003022:	bf38      	it	cc
 8003024:	461d      	movcc	r5, r3
 8003026:	0553      	lsls	r3, r2, #21
 8003028:	d527      	bpl.n	800307a <__ssputs_r+0x8e>
 800302a:	4629      	mov	r1, r5
 800302c:	f7ff ff52 	bl	8002ed4 <_malloc_r>
 8003030:	4606      	mov	r6, r0
 8003032:	b360      	cbz	r0, 800308e <__ssputs_r+0xa2>
 8003034:	464a      	mov	r2, r9
 8003036:	6921      	ldr	r1, [r4, #16]
 8003038:	f000 faf8 	bl	800362c <memcpy>
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003046:	81a3      	strh	r3, [r4, #12]
 8003048:	6126      	str	r6, [r4, #16]
 800304a:	444e      	add	r6, r9
 800304c:	6026      	str	r6, [r4, #0]
 800304e:	463e      	mov	r6, r7
 8003050:	6165      	str	r5, [r4, #20]
 8003052:	eba5 0509 	sub.w	r5, r5, r9
 8003056:	60a5      	str	r5, [r4, #8]
 8003058:	42be      	cmp	r6, r7
 800305a:	d900      	bls.n	800305e <__ssputs_r+0x72>
 800305c:	463e      	mov	r6, r7
 800305e:	4632      	mov	r2, r6
 8003060:	4641      	mov	r1, r8
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	f000 faaa 	bl	80035bc <memmove>
 8003068:	2000      	movs	r0, #0
 800306a:	68a3      	ldr	r3, [r4, #8]
 800306c:	1b9b      	subs	r3, r3, r6
 800306e:	60a3      	str	r3, [r4, #8]
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	4433      	add	r3, r6
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307a:	462a      	mov	r2, r5
 800307c:	f000 fae4 	bl	8003648 <_realloc_r>
 8003080:	4606      	mov	r6, r0
 8003082:	2800      	cmp	r0, #0
 8003084:	d1e0      	bne.n	8003048 <__ssputs_r+0x5c>
 8003086:	4650      	mov	r0, sl
 8003088:	6921      	ldr	r1, [r4, #16]
 800308a:	f7ff feb9 	bl	8002e00 <_free_r>
 800308e:	230c      	movs	r3, #12
 8003090:	f8ca 3000 	str.w	r3, [sl]
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	f04f 30ff 	mov.w	r0, #4294967295
 800309a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800309e:	81a3      	strh	r3, [r4, #12]
 80030a0:	e7e9      	b.n	8003076 <__ssputs_r+0x8a>
	...

080030a4 <_svfiprintf_r>:
 80030a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a8:	4698      	mov	r8, r3
 80030aa:	898b      	ldrh	r3, [r1, #12]
 80030ac:	4607      	mov	r7, r0
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	460d      	mov	r5, r1
 80030b2:	4614      	mov	r4, r2
 80030b4:	b09d      	sub	sp, #116	@ 0x74
 80030b6:	d510      	bpl.n	80030da <_svfiprintf_r+0x36>
 80030b8:	690b      	ldr	r3, [r1, #16]
 80030ba:	b973      	cbnz	r3, 80030da <_svfiprintf_r+0x36>
 80030bc:	2140      	movs	r1, #64	@ 0x40
 80030be:	f7ff ff09 	bl	8002ed4 <_malloc_r>
 80030c2:	6028      	str	r0, [r5, #0]
 80030c4:	6128      	str	r0, [r5, #16]
 80030c6:	b930      	cbnz	r0, 80030d6 <_svfiprintf_r+0x32>
 80030c8:	230c      	movs	r3, #12
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	b01d      	add	sp, #116	@ 0x74
 80030d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030d6:	2340      	movs	r3, #64	@ 0x40
 80030d8:	616b      	str	r3, [r5, #20]
 80030da:	2300      	movs	r3, #0
 80030dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80030de:	2320      	movs	r3, #32
 80030e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80030e4:	2330      	movs	r3, #48	@ 0x30
 80030e6:	f04f 0901 	mov.w	r9, #1
 80030ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80030ee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003288 <_svfiprintf_r+0x1e4>
 80030f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80030f6:	4623      	mov	r3, r4
 80030f8:	469a      	mov	sl, r3
 80030fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030fe:	b10a      	cbz	r2, 8003104 <_svfiprintf_r+0x60>
 8003100:	2a25      	cmp	r2, #37	@ 0x25
 8003102:	d1f9      	bne.n	80030f8 <_svfiprintf_r+0x54>
 8003104:	ebba 0b04 	subs.w	fp, sl, r4
 8003108:	d00b      	beq.n	8003122 <_svfiprintf_r+0x7e>
 800310a:	465b      	mov	r3, fp
 800310c:	4622      	mov	r2, r4
 800310e:	4629      	mov	r1, r5
 8003110:	4638      	mov	r0, r7
 8003112:	f7ff ff6b 	bl	8002fec <__ssputs_r>
 8003116:	3001      	adds	r0, #1
 8003118:	f000 80a7 	beq.w	800326a <_svfiprintf_r+0x1c6>
 800311c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800311e:	445a      	add	r2, fp
 8003120:	9209      	str	r2, [sp, #36]	@ 0x24
 8003122:	f89a 3000 	ldrb.w	r3, [sl]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 809f 	beq.w	800326a <_svfiprintf_r+0x1c6>
 800312c:	2300      	movs	r3, #0
 800312e:	f04f 32ff 	mov.w	r2, #4294967295
 8003132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003136:	f10a 0a01 	add.w	sl, sl, #1
 800313a:	9304      	str	r3, [sp, #16]
 800313c:	9307      	str	r3, [sp, #28]
 800313e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003142:	931a      	str	r3, [sp, #104]	@ 0x68
 8003144:	4654      	mov	r4, sl
 8003146:	2205      	movs	r2, #5
 8003148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800314c:	484e      	ldr	r0, [pc, #312]	@ (8003288 <_svfiprintf_r+0x1e4>)
 800314e:	f000 fa5f 	bl	8003610 <memchr>
 8003152:	9a04      	ldr	r2, [sp, #16]
 8003154:	b9d8      	cbnz	r0, 800318e <_svfiprintf_r+0xea>
 8003156:	06d0      	lsls	r0, r2, #27
 8003158:	bf44      	itt	mi
 800315a:	2320      	movmi	r3, #32
 800315c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003160:	0711      	lsls	r1, r2, #28
 8003162:	bf44      	itt	mi
 8003164:	232b      	movmi	r3, #43	@ 0x2b
 8003166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800316a:	f89a 3000 	ldrb.w	r3, [sl]
 800316e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003170:	d015      	beq.n	800319e <_svfiprintf_r+0xfa>
 8003172:	4654      	mov	r4, sl
 8003174:	2000      	movs	r0, #0
 8003176:	f04f 0c0a 	mov.w	ip, #10
 800317a:	9a07      	ldr	r2, [sp, #28]
 800317c:	4621      	mov	r1, r4
 800317e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003182:	3b30      	subs	r3, #48	@ 0x30
 8003184:	2b09      	cmp	r3, #9
 8003186:	d94b      	bls.n	8003220 <_svfiprintf_r+0x17c>
 8003188:	b1b0      	cbz	r0, 80031b8 <_svfiprintf_r+0x114>
 800318a:	9207      	str	r2, [sp, #28]
 800318c:	e014      	b.n	80031b8 <_svfiprintf_r+0x114>
 800318e:	eba0 0308 	sub.w	r3, r0, r8
 8003192:	fa09 f303 	lsl.w	r3, r9, r3
 8003196:	4313      	orrs	r3, r2
 8003198:	46a2      	mov	sl, r4
 800319a:	9304      	str	r3, [sp, #16]
 800319c:	e7d2      	b.n	8003144 <_svfiprintf_r+0xa0>
 800319e:	9b03      	ldr	r3, [sp, #12]
 80031a0:	1d19      	adds	r1, r3, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	9103      	str	r1, [sp, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bfbb      	ittet	lt
 80031aa:	425b      	neglt	r3, r3
 80031ac:	f042 0202 	orrlt.w	r2, r2, #2
 80031b0:	9307      	strge	r3, [sp, #28]
 80031b2:	9307      	strlt	r3, [sp, #28]
 80031b4:	bfb8      	it	lt
 80031b6:	9204      	strlt	r2, [sp, #16]
 80031b8:	7823      	ldrb	r3, [r4, #0]
 80031ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80031bc:	d10a      	bne.n	80031d4 <_svfiprintf_r+0x130>
 80031be:	7863      	ldrb	r3, [r4, #1]
 80031c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80031c2:	d132      	bne.n	800322a <_svfiprintf_r+0x186>
 80031c4:	9b03      	ldr	r3, [sp, #12]
 80031c6:	3402      	adds	r4, #2
 80031c8:	1d1a      	adds	r2, r3, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	9203      	str	r2, [sp, #12]
 80031ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031d2:	9305      	str	r3, [sp, #20]
 80031d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800328c <_svfiprintf_r+0x1e8>
 80031d8:	2203      	movs	r2, #3
 80031da:	4650      	mov	r0, sl
 80031dc:	7821      	ldrb	r1, [r4, #0]
 80031de:	f000 fa17 	bl	8003610 <memchr>
 80031e2:	b138      	cbz	r0, 80031f4 <_svfiprintf_r+0x150>
 80031e4:	2240      	movs	r2, #64	@ 0x40
 80031e6:	9b04      	ldr	r3, [sp, #16]
 80031e8:	eba0 000a 	sub.w	r0, r0, sl
 80031ec:	4082      	lsls	r2, r0
 80031ee:	4313      	orrs	r3, r2
 80031f0:	3401      	adds	r4, #1
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f8:	2206      	movs	r2, #6
 80031fa:	4825      	ldr	r0, [pc, #148]	@ (8003290 <_svfiprintf_r+0x1ec>)
 80031fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003200:	f000 fa06 	bl	8003610 <memchr>
 8003204:	2800      	cmp	r0, #0
 8003206:	d036      	beq.n	8003276 <_svfiprintf_r+0x1d2>
 8003208:	4b22      	ldr	r3, [pc, #136]	@ (8003294 <_svfiprintf_r+0x1f0>)
 800320a:	bb1b      	cbnz	r3, 8003254 <_svfiprintf_r+0x1b0>
 800320c:	9b03      	ldr	r3, [sp, #12]
 800320e:	3307      	adds	r3, #7
 8003210:	f023 0307 	bic.w	r3, r3, #7
 8003214:	3308      	adds	r3, #8
 8003216:	9303      	str	r3, [sp, #12]
 8003218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800321a:	4433      	add	r3, r6
 800321c:	9309      	str	r3, [sp, #36]	@ 0x24
 800321e:	e76a      	b.n	80030f6 <_svfiprintf_r+0x52>
 8003220:	460c      	mov	r4, r1
 8003222:	2001      	movs	r0, #1
 8003224:	fb0c 3202 	mla	r2, ip, r2, r3
 8003228:	e7a8      	b.n	800317c <_svfiprintf_r+0xd8>
 800322a:	2300      	movs	r3, #0
 800322c:	f04f 0c0a 	mov.w	ip, #10
 8003230:	4619      	mov	r1, r3
 8003232:	3401      	adds	r4, #1
 8003234:	9305      	str	r3, [sp, #20]
 8003236:	4620      	mov	r0, r4
 8003238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800323c:	3a30      	subs	r2, #48	@ 0x30
 800323e:	2a09      	cmp	r2, #9
 8003240:	d903      	bls.n	800324a <_svfiprintf_r+0x1a6>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0c6      	beq.n	80031d4 <_svfiprintf_r+0x130>
 8003246:	9105      	str	r1, [sp, #20]
 8003248:	e7c4      	b.n	80031d4 <_svfiprintf_r+0x130>
 800324a:	4604      	mov	r4, r0
 800324c:	2301      	movs	r3, #1
 800324e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003252:	e7f0      	b.n	8003236 <_svfiprintf_r+0x192>
 8003254:	ab03      	add	r3, sp, #12
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	462a      	mov	r2, r5
 800325a:	4638      	mov	r0, r7
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <_svfiprintf_r+0x1f4>)
 800325e:	a904      	add	r1, sp, #16
 8003260:	f3af 8000 	nop.w
 8003264:	1c42      	adds	r2, r0, #1
 8003266:	4606      	mov	r6, r0
 8003268:	d1d6      	bne.n	8003218 <_svfiprintf_r+0x174>
 800326a:	89ab      	ldrh	r3, [r5, #12]
 800326c:	065b      	lsls	r3, r3, #25
 800326e:	f53f af2d 	bmi.w	80030cc <_svfiprintf_r+0x28>
 8003272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003274:	e72c      	b.n	80030d0 <_svfiprintf_r+0x2c>
 8003276:	ab03      	add	r3, sp, #12
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	462a      	mov	r2, r5
 800327c:	4638      	mov	r0, r7
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <_svfiprintf_r+0x1f4>)
 8003280:	a904      	add	r1, sp, #16
 8003282:	f000 f87d 	bl	8003380 <_printf_i>
 8003286:	e7ed      	b.n	8003264 <_svfiprintf_r+0x1c0>
 8003288:	0800373a 	.word	0x0800373a
 800328c:	08003740 	.word	0x08003740
 8003290:	08003744 	.word	0x08003744
 8003294:	00000000 	.word	0x00000000
 8003298:	08002fed 	.word	0x08002fed

0800329c <_printf_common>:
 800329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	4616      	mov	r6, r2
 80032a2:	4698      	mov	r8, r3
 80032a4:	688a      	ldr	r2, [r1, #8]
 80032a6:	690b      	ldr	r3, [r1, #16]
 80032a8:	4607      	mov	r7, r0
 80032aa:	4293      	cmp	r3, r2
 80032ac:	bfb8      	it	lt
 80032ae:	4613      	movlt	r3, r2
 80032b0:	6033      	str	r3, [r6, #0]
 80032b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032b6:	460c      	mov	r4, r1
 80032b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032bc:	b10a      	cbz	r2, 80032c2 <_printf_common+0x26>
 80032be:	3301      	adds	r3, #1
 80032c0:	6033      	str	r3, [r6, #0]
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	0699      	lsls	r1, r3, #26
 80032c6:	bf42      	ittt	mi
 80032c8:	6833      	ldrmi	r3, [r6, #0]
 80032ca:	3302      	addmi	r3, #2
 80032cc:	6033      	strmi	r3, [r6, #0]
 80032ce:	6825      	ldr	r5, [r4, #0]
 80032d0:	f015 0506 	ands.w	r5, r5, #6
 80032d4:	d106      	bne.n	80032e4 <_printf_common+0x48>
 80032d6:	f104 0a19 	add.w	sl, r4, #25
 80032da:	68e3      	ldr	r3, [r4, #12]
 80032dc:	6832      	ldr	r2, [r6, #0]
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	dc2b      	bgt.n	800333c <_printf_common+0xa0>
 80032e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032e8:	6822      	ldr	r2, [r4, #0]
 80032ea:	3b00      	subs	r3, #0
 80032ec:	bf18      	it	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	0692      	lsls	r2, r2, #26
 80032f2:	d430      	bmi.n	8003356 <_printf_common+0xba>
 80032f4:	4641      	mov	r1, r8
 80032f6:	4638      	mov	r0, r7
 80032f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032fc:	47c8      	blx	r9
 80032fe:	3001      	adds	r0, #1
 8003300:	d023      	beq.n	800334a <_printf_common+0xae>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	6922      	ldr	r2, [r4, #16]
 8003306:	f003 0306 	and.w	r3, r3, #6
 800330a:	2b04      	cmp	r3, #4
 800330c:	bf14      	ite	ne
 800330e:	2500      	movne	r5, #0
 8003310:	6833      	ldreq	r3, [r6, #0]
 8003312:	f04f 0600 	mov.w	r6, #0
 8003316:	bf08      	it	eq
 8003318:	68e5      	ldreq	r5, [r4, #12]
 800331a:	f104 041a 	add.w	r4, r4, #26
 800331e:	bf08      	it	eq
 8003320:	1aed      	subeq	r5, r5, r3
 8003322:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003326:	bf08      	it	eq
 8003328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800332c:	4293      	cmp	r3, r2
 800332e:	bfc4      	itt	gt
 8003330:	1a9b      	subgt	r3, r3, r2
 8003332:	18ed      	addgt	r5, r5, r3
 8003334:	42b5      	cmp	r5, r6
 8003336:	d11a      	bne.n	800336e <_printf_common+0xd2>
 8003338:	2000      	movs	r0, #0
 800333a:	e008      	b.n	800334e <_printf_common+0xb2>
 800333c:	2301      	movs	r3, #1
 800333e:	4652      	mov	r2, sl
 8003340:	4641      	mov	r1, r8
 8003342:	4638      	mov	r0, r7
 8003344:	47c8      	blx	r9
 8003346:	3001      	adds	r0, #1
 8003348:	d103      	bne.n	8003352 <_printf_common+0xb6>
 800334a:	f04f 30ff 	mov.w	r0, #4294967295
 800334e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003352:	3501      	adds	r5, #1
 8003354:	e7c1      	b.n	80032da <_printf_common+0x3e>
 8003356:	2030      	movs	r0, #48	@ 0x30
 8003358:	18e1      	adds	r1, r4, r3
 800335a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003364:	4422      	add	r2, r4
 8003366:	3302      	adds	r3, #2
 8003368:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800336c:	e7c2      	b.n	80032f4 <_printf_common+0x58>
 800336e:	2301      	movs	r3, #1
 8003370:	4622      	mov	r2, r4
 8003372:	4641      	mov	r1, r8
 8003374:	4638      	mov	r0, r7
 8003376:	47c8      	blx	r9
 8003378:	3001      	adds	r0, #1
 800337a:	d0e6      	beq.n	800334a <_printf_common+0xae>
 800337c:	3601      	adds	r6, #1
 800337e:	e7d9      	b.n	8003334 <_printf_common+0x98>

08003380 <_printf_i>:
 8003380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	7e0f      	ldrb	r7, [r1, #24]
 8003386:	4691      	mov	r9, r2
 8003388:	2f78      	cmp	r7, #120	@ 0x78
 800338a:	4680      	mov	r8, r0
 800338c:	460c      	mov	r4, r1
 800338e:	469a      	mov	sl, r3
 8003390:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003396:	d807      	bhi.n	80033a8 <_printf_i+0x28>
 8003398:	2f62      	cmp	r7, #98	@ 0x62
 800339a:	d80a      	bhi.n	80033b2 <_printf_i+0x32>
 800339c:	2f00      	cmp	r7, #0
 800339e:	f000 80d1 	beq.w	8003544 <_printf_i+0x1c4>
 80033a2:	2f58      	cmp	r7, #88	@ 0x58
 80033a4:	f000 80b8 	beq.w	8003518 <_printf_i+0x198>
 80033a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033b0:	e03a      	b.n	8003428 <_printf_i+0xa8>
 80033b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033b6:	2b15      	cmp	r3, #21
 80033b8:	d8f6      	bhi.n	80033a8 <_printf_i+0x28>
 80033ba:	a101      	add	r1, pc, #4	@ (adr r1, 80033c0 <_printf_i+0x40>)
 80033bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033c0:	08003419 	.word	0x08003419
 80033c4:	0800342d 	.word	0x0800342d
 80033c8:	080033a9 	.word	0x080033a9
 80033cc:	080033a9 	.word	0x080033a9
 80033d0:	080033a9 	.word	0x080033a9
 80033d4:	080033a9 	.word	0x080033a9
 80033d8:	0800342d 	.word	0x0800342d
 80033dc:	080033a9 	.word	0x080033a9
 80033e0:	080033a9 	.word	0x080033a9
 80033e4:	080033a9 	.word	0x080033a9
 80033e8:	080033a9 	.word	0x080033a9
 80033ec:	0800352b 	.word	0x0800352b
 80033f0:	08003457 	.word	0x08003457
 80033f4:	080034e5 	.word	0x080034e5
 80033f8:	080033a9 	.word	0x080033a9
 80033fc:	080033a9 	.word	0x080033a9
 8003400:	0800354d 	.word	0x0800354d
 8003404:	080033a9 	.word	0x080033a9
 8003408:	08003457 	.word	0x08003457
 800340c:	080033a9 	.word	0x080033a9
 8003410:	080033a9 	.word	0x080033a9
 8003414:	080034ed 	.word	0x080034ed
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	1d1a      	adds	r2, r3, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6032      	str	r2, [r6, #0]
 8003420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003428:	2301      	movs	r3, #1
 800342a:	e09c      	b.n	8003566 <_printf_i+0x1e6>
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	1d19      	adds	r1, r3, #4
 8003432:	6031      	str	r1, [r6, #0]
 8003434:	0606      	lsls	r6, r0, #24
 8003436:	d501      	bpl.n	800343c <_printf_i+0xbc>
 8003438:	681d      	ldr	r5, [r3, #0]
 800343a:	e003      	b.n	8003444 <_printf_i+0xc4>
 800343c:	0645      	lsls	r5, r0, #25
 800343e:	d5fb      	bpl.n	8003438 <_printf_i+0xb8>
 8003440:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003444:	2d00      	cmp	r5, #0
 8003446:	da03      	bge.n	8003450 <_printf_i+0xd0>
 8003448:	232d      	movs	r3, #45	@ 0x2d
 800344a:	426d      	negs	r5, r5
 800344c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003450:	230a      	movs	r3, #10
 8003452:	4858      	ldr	r0, [pc, #352]	@ (80035b4 <_printf_i+0x234>)
 8003454:	e011      	b.n	800347a <_printf_i+0xfa>
 8003456:	6821      	ldr	r1, [r4, #0]
 8003458:	6833      	ldr	r3, [r6, #0]
 800345a:	0608      	lsls	r0, r1, #24
 800345c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003460:	d402      	bmi.n	8003468 <_printf_i+0xe8>
 8003462:	0649      	lsls	r1, r1, #25
 8003464:	bf48      	it	mi
 8003466:	b2ad      	uxthmi	r5, r5
 8003468:	2f6f      	cmp	r7, #111	@ 0x6f
 800346a:	6033      	str	r3, [r6, #0]
 800346c:	bf14      	ite	ne
 800346e:	230a      	movne	r3, #10
 8003470:	2308      	moveq	r3, #8
 8003472:	4850      	ldr	r0, [pc, #320]	@ (80035b4 <_printf_i+0x234>)
 8003474:	2100      	movs	r1, #0
 8003476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800347a:	6866      	ldr	r6, [r4, #4]
 800347c:	2e00      	cmp	r6, #0
 800347e:	60a6      	str	r6, [r4, #8]
 8003480:	db05      	blt.n	800348e <_printf_i+0x10e>
 8003482:	6821      	ldr	r1, [r4, #0]
 8003484:	432e      	orrs	r6, r5
 8003486:	f021 0104 	bic.w	r1, r1, #4
 800348a:	6021      	str	r1, [r4, #0]
 800348c:	d04b      	beq.n	8003526 <_printf_i+0x1a6>
 800348e:	4616      	mov	r6, r2
 8003490:	fbb5 f1f3 	udiv	r1, r5, r3
 8003494:	fb03 5711 	mls	r7, r3, r1, r5
 8003498:	5dc7      	ldrb	r7, [r0, r7]
 800349a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800349e:	462f      	mov	r7, r5
 80034a0:	42bb      	cmp	r3, r7
 80034a2:	460d      	mov	r5, r1
 80034a4:	d9f4      	bls.n	8003490 <_printf_i+0x110>
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d10b      	bne.n	80034c2 <_printf_i+0x142>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	07df      	lsls	r7, r3, #31
 80034ae:	d508      	bpl.n	80034c2 <_printf_i+0x142>
 80034b0:	6923      	ldr	r3, [r4, #16]
 80034b2:	6861      	ldr	r1, [r4, #4]
 80034b4:	4299      	cmp	r1, r3
 80034b6:	bfde      	ittt	le
 80034b8:	2330      	movle	r3, #48	@ 0x30
 80034ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034c2:	1b92      	subs	r2, r2, r6
 80034c4:	6122      	str	r2, [r4, #16]
 80034c6:	464b      	mov	r3, r9
 80034c8:	4621      	mov	r1, r4
 80034ca:	4640      	mov	r0, r8
 80034cc:	f8cd a000 	str.w	sl, [sp]
 80034d0:	aa03      	add	r2, sp, #12
 80034d2:	f7ff fee3 	bl	800329c <_printf_common>
 80034d6:	3001      	adds	r0, #1
 80034d8:	d14a      	bne.n	8003570 <_printf_i+0x1f0>
 80034da:	f04f 30ff 	mov.w	r0, #4294967295
 80034de:	b004      	add	sp, #16
 80034e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	f043 0320 	orr.w	r3, r3, #32
 80034ea:	6023      	str	r3, [r4, #0]
 80034ec:	2778      	movs	r7, #120	@ 0x78
 80034ee:	4832      	ldr	r0, [pc, #200]	@ (80035b8 <_printf_i+0x238>)
 80034f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	6831      	ldr	r1, [r6, #0]
 80034f8:	061f      	lsls	r7, r3, #24
 80034fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80034fe:	d402      	bmi.n	8003506 <_printf_i+0x186>
 8003500:	065f      	lsls	r7, r3, #25
 8003502:	bf48      	it	mi
 8003504:	b2ad      	uxthmi	r5, r5
 8003506:	6031      	str	r1, [r6, #0]
 8003508:	07d9      	lsls	r1, r3, #31
 800350a:	bf44      	itt	mi
 800350c:	f043 0320 	orrmi.w	r3, r3, #32
 8003510:	6023      	strmi	r3, [r4, #0]
 8003512:	b11d      	cbz	r5, 800351c <_printf_i+0x19c>
 8003514:	2310      	movs	r3, #16
 8003516:	e7ad      	b.n	8003474 <_printf_i+0xf4>
 8003518:	4826      	ldr	r0, [pc, #152]	@ (80035b4 <_printf_i+0x234>)
 800351a:	e7e9      	b.n	80034f0 <_printf_i+0x170>
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	f023 0320 	bic.w	r3, r3, #32
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	e7f6      	b.n	8003514 <_printf_i+0x194>
 8003526:	4616      	mov	r6, r2
 8003528:	e7bd      	b.n	80034a6 <_printf_i+0x126>
 800352a:	6833      	ldr	r3, [r6, #0]
 800352c:	6825      	ldr	r5, [r4, #0]
 800352e:	1d18      	adds	r0, r3, #4
 8003530:	6961      	ldr	r1, [r4, #20]
 8003532:	6030      	str	r0, [r6, #0]
 8003534:	062e      	lsls	r6, r5, #24
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	d501      	bpl.n	800353e <_printf_i+0x1be>
 800353a:	6019      	str	r1, [r3, #0]
 800353c:	e002      	b.n	8003544 <_printf_i+0x1c4>
 800353e:	0668      	lsls	r0, r5, #25
 8003540:	d5fb      	bpl.n	800353a <_printf_i+0x1ba>
 8003542:	8019      	strh	r1, [r3, #0]
 8003544:	2300      	movs	r3, #0
 8003546:	4616      	mov	r6, r2
 8003548:	6123      	str	r3, [r4, #16]
 800354a:	e7bc      	b.n	80034c6 <_printf_i+0x146>
 800354c:	6833      	ldr	r3, [r6, #0]
 800354e:	2100      	movs	r1, #0
 8003550:	1d1a      	adds	r2, r3, #4
 8003552:	6032      	str	r2, [r6, #0]
 8003554:	681e      	ldr	r6, [r3, #0]
 8003556:	6862      	ldr	r2, [r4, #4]
 8003558:	4630      	mov	r0, r6
 800355a:	f000 f859 	bl	8003610 <memchr>
 800355e:	b108      	cbz	r0, 8003564 <_printf_i+0x1e4>
 8003560:	1b80      	subs	r0, r0, r6
 8003562:	6060      	str	r0, [r4, #4]
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	6123      	str	r3, [r4, #16]
 8003568:	2300      	movs	r3, #0
 800356a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800356e:	e7aa      	b.n	80034c6 <_printf_i+0x146>
 8003570:	4632      	mov	r2, r6
 8003572:	4649      	mov	r1, r9
 8003574:	4640      	mov	r0, r8
 8003576:	6923      	ldr	r3, [r4, #16]
 8003578:	47d0      	blx	sl
 800357a:	3001      	adds	r0, #1
 800357c:	d0ad      	beq.n	80034da <_printf_i+0x15a>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	079b      	lsls	r3, r3, #30
 8003582:	d413      	bmi.n	80035ac <_printf_i+0x22c>
 8003584:	68e0      	ldr	r0, [r4, #12]
 8003586:	9b03      	ldr	r3, [sp, #12]
 8003588:	4298      	cmp	r0, r3
 800358a:	bfb8      	it	lt
 800358c:	4618      	movlt	r0, r3
 800358e:	e7a6      	b.n	80034de <_printf_i+0x15e>
 8003590:	2301      	movs	r3, #1
 8003592:	4632      	mov	r2, r6
 8003594:	4649      	mov	r1, r9
 8003596:	4640      	mov	r0, r8
 8003598:	47d0      	blx	sl
 800359a:	3001      	adds	r0, #1
 800359c:	d09d      	beq.n	80034da <_printf_i+0x15a>
 800359e:	3501      	adds	r5, #1
 80035a0:	68e3      	ldr	r3, [r4, #12]
 80035a2:	9903      	ldr	r1, [sp, #12]
 80035a4:	1a5b      	subs	r3, r3, r1
 80035a6:	42ab      	cmp	r3, r5
 80035a8:	dcf2      	bgt.n	8003590 <_printf_i+0x210>
 80035aa:	e7eb      	b.n	8003584 <_printf_i+0x204>
 80035ac:	2500      	movs	r5, #0
 80035ae:	f104 0619 	add.w	r6, r4, #25
 80035b2:	e7f5      	b.n	80035a0 <_printf_i+0x220>
 80035b4:	0800374b 	.word	0x0800374b
 80035b8:	0800375c 	.word	0x0800375c

080035bc <memmove>:
 80035bc:	4288      	cmp	r0, r1
 80035be:	b510      	push	{r4, lr}
 80035c0:	eb01 0402 	add.w	r4, r1, r2
 80035c4:	d902      	bls.n	80035cc <memmove+0x10>
 80035c6:	4284      	cmp	r4, r0
 80035c8:	4623      	mov	r3, r4
 80035ca:	d807      	bhi.n	80035dc <memmove+0x20>
 80035cc:	1e43      	subs	r3, r0, #1
 80035ce:	42a1      	cmp	r1, r4
 80035d0:	d008      	beq.n	80035e4 <memmove+0x28>
 80035d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035da:	e7f8      	b.n	80035ce <memmove+0x12>
 80035dc:	4601      	mov	r1, r0
 80035de:	4402      	add	r2, r0
 80035e0:	428a      	cmp	r2, r1
 80035e2:	d100      	bne.n	80035e6 <memmove+0x2a>
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035ee:	e7f7      	b.n	80035e0 <memmove+0x24>

080035f0 <_sbrk_r>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	2300      	movs	r3, #0
 80035f4:	4d05      	ldr	r5, [pc, #20]	@ (800360c <_sbrk_r+0x1c>)
 80035f6:	4604      	mov	r4, r0
 80035f8:	4608      	mov	r0, r1
 80035fa:	602b      	str	r3, [r5, #0]
 80035fc:	f7fd fcce 	bl	8000f9c <_sbrk>
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	d102      	bne.n	800360a <_sbrk_r+0x1a>
 8003604:	682b      	ldr	r3, [r5, #0]
 8003606:	b103      	cbz	r3, 800360a <_sbrk_r+0x1a>
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	bd38      	pop	{r3, r4, r5, pc}
 800360c:	20000268 	.word	0x20000268

08003610 <memchr>:
 8003610:	4603      	mov	r3, r0
 8003612:	b510      	push	{r4, lr}
 8003614:	b2c9      	uxtb	r1, r1
 8003616:	4402      	add	r2, r0
 8003618:	4293      	cmp	r3, r2
 800361a:	4618      	mov	r0, r3
 800361c:	d101      	bne.n	8003622 <memchr+0x12>
 800361e:	2000      	movs	r0, #0
 8003620:	e003      	b.n	800362a <memchr+0x1a>
 8003622:	7804      	ldrb	r4, [r0, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	428c      	cmp	r4, r1
 8003628:	d1f6      	bne.n	8003618 <memchr+0x8>
 800362a:	bd10      	pop	{r4, pc}

0800362c <memcpy>:
 800362c:	440a      	add	r2, r1
 800362e:	4291      	cmp	r1, r2
 8003630:	f100 33ff 	add.w	r3, r0, #4294967295
 8003634:	d100      	bne.n	8003638 <memcpy+0xc>
 8003636:	4770      	bx	lr
 8003638:	b510      	push	{r4, lr}
 800363a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800363e:	4291      	cmp	r1, r2
 8003640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003644:	d1f9      	bne.n	800363a <memcpy+0xe>
 8003646:	bd10      	pop	{r4, pc}

08003648 <_realloc_r>:
 8003648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800364c:	4607      	mov	r7, r0
 800364e:	4614      	mov	r4, r2
 8003650:	460d      	mov	r5, r1
 8003652:	b921      	cbnz	r1, 800365e <_realloc_r+0x16>
 8003654:	4611      	mov	r1, r2
 8003656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800365a:	f7ff bc3b 	b.w	8002ed4 <_malloc_r>
 800365e:	b92a      	cbnz	r2, 800366c <_realloc_r+0x24>
 8003660:	f7ff fbce 	bl	8002e00 <_free_r>
 8003664:	4625      	mov	r5, r4
 8003666:	4628      	mov	r0, r5
 8003668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800366c:	f000 f81a 	bl	80036a4 <_malloc_usable_size_r>
 8003670:	4284      	cmp	r4, r0
 8003672:	4606      	mov	r6, r0
 8003674:	d802      	bhi.n	800367c <_realloc_r+0x34>
 8003676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800367a:	d8f4      	bhi.n	8003666 <_realloc_r+0x1e>
 800367c:	4621      	mov	r1, r4
 800367e:	4638      	mov	r0, r7
 8003680:	f7ff fc28 	bl	8002ed4 <_malloc_r>
 8003684:	4680      	mov	r8, r0
 8003686:	b908      	cbnz	r0, 800368c <_realloc_r+0x44>
 8003688:	4645      	mov	r5, r8
 800368a:	e7ec      	b.n	8003666 <_realloc_r+0x1e>
 800368c:	42b4      	cmp	r4, r6
 800368e:	4622      	mov	r2, r4
 8003690:	4629      	mov	r1, r5
 8003692:	bf28      	it	cs
 8003694:	4632      	movcs	r2, r6
 8003696:	f7ff ffc9 	bl	800362c <memcpy>
 800369a:	4629      	mov	r1, r5
 800369c:	4638      	mov	r0, r7
 800369e:	f7ff fbaf 	bl	8002e00 <_free_r>
 80036a2:	e7f1      	b.n	8003688 <_realloc_r+0x40>

080036a4 <_malloc_usable_size_r>:
 80036a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036a8:	1f18      	subs	r0, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bfbc      	itt	lt
 80036ae:	580b      	ldrlt	r3, [r1, r0]
 80036b0:	18c0      	addlt	r0, r0, r3
 80036b2:	4770      	bx	lr

080036b4 <_init>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr

080036c0 <_fini>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	bf00      	nop
 80036c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c6:	bc08      	pop	{r3}
 80036c8:	469e      	mov	lr, r3
 80036ca:	4770      	bx	lr
