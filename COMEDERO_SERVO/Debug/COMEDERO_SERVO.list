
COMEDERO_SERVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003ce0  08003ce0  00004ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d40  08003d40  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d40  08003d40  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d40  08003d40  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d40  08003d40  00004d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d44  08003d44  00004d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08003d54  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08003d54  000050a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c2a  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b89  00000000  00000000  0000ec5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  000107e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000834  00000000  00000000  000112a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017488  00000000  00000000  00011adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4ef  00000000  00000000  00028f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895d6  00000000  00000000  00035453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bea29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d8c  00000000  00000000  000bea6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c17f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cc8 	.word	0x08003cc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003cc8 	.word	0x08003cc8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	@ 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_d2f>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a98:	bf24      	itt	cs
 8000a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_d2f+0x30>
 8000aa4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac4:	d121      	bne.n	8000b0a <__aeabi_d2f+0x7a>
 8000ac6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aca:	bfbc      	itt	lt
 8000acc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	4770      	bxlt	lr
 8000ad2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ada:	f1c2 0218 	rsb	r2, r2, #24
 8000ade:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aea:	bf18      	it	ne
 8000aec:	f040 0001 	orrne.w	r0, r0, #1
 8000af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000afc:	ea40 000c 	orr.w	r0, r0, ip
 8000b00:	fa23 f302 	lsr.w	r3, r3, r2
 8000b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b08:	e7cc      	b.n	8000aa4 <__aeabi_d2f+0x14>
 8000b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0e:	d107      	bne.n	8000b20 <__aeabi_d2f+0x90>
 8000b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b14:	bf1e      	ittt	ne
 8000b16:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b1a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1e:	4770      	bxne	lr
 8000b20:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_frsub>:
 8000b30:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b34:	e002      	b.n	8000b3c <__addsf3>
 8000b36:	bf00      	nop

08000b38 <__aeabi_fsub>:
 8000b38:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b3c <__addsf3>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	bf1f      	itttt	ne
 8000b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b44:	ea92 0f03 	teqne	r2, r3
 8000b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b50:	d06a      	beq.n	8000c28 <__addsf3+0xec>
 8000b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5a:	bfc1      	itttt	gt
 8000b5c:	18d2      	addgt	r2, r2, r3
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	4048      	eorgt	r0, r1
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	bfb8      	it	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	2b19      	cmp	r3, #25
 8000b6a:	bf88      	it	hi
 8000b6c:	4770      	bxhi	lr
 8000b6e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b76:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b86:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4249      	negne	r1, r1
 8000b8e:	ea92 0f03 	teq	r2, r3
 8000b92:	d03f      	beq.n	8000c14 <__addsf3+0xd8>
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	fa41 fc03 	asr.w	ip, r1, r3
 8000b9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ba0:	f1c3 0320 	rsb	r3, r3, #32
 8000ba4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bac:	d502      	bpl.n	8000bb4 <__addsf3+0x78>
 8000bae:	4249      	negs	r1, r1
 8000bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb8:	d313      	bcc.n	8000be2 <__addsf3+0xa6>
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bbe:	d306      	bcc.n	8000bce <__addsf3+0x92>
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc6:	f102 0201 	add.w	r2, r2, #1
 8000bca:	2afe      	cmp	r2, #254	@ 0xfe
 8000bcc:	d251      	bcs.n	8000c72 <__addsf3+0x136>
 8000bce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	ea40 0003 	orr.w	r0, r0, r3
 8000be0:	4770      	bx	lr
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	eb40 0000 	adc.w	r0, r0, r0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	bf28      	it	cs
 8000bec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bf0:	d2ed      	bcs.n	8000bce <__addsf3+0x92>
 8000bf2:	fab0 fc80 	clz	ip, r0
 8000bf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c02:	bfaa      	itet	ge
 8000c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c08:	4252      	neglt	r2, r2
 8000c0a:	4318      	orrge	r0, r3
 8000c0c:	bfbc      	itt	lt
 8000c0e:	40d0      	lsrlt	r0, r2
 8000c10:	4318      	orrlt	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	f092 0f00 	teq	r2, #0
 8000c18:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c1c:	bf06      	itte	eq
 8000c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c22:	3201      	addeq	r2, #1
 8000c24:	3b01      	subne	r3, #1
 8000c26:	e7b5      	b.n	8000b94 <__addsf3+0x58>
 8000c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c36:	d021      	beq.n	8000c7c <__addsf3+0x140>
 8000c38:	ea92 0f03 	teq	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__addsf3+0x10c>
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	bf08      	it	eq
 8000c44:	4608      	moveq	r0, r1
 8000c46:	4770      	bx	lr
 8000c48:	ea90 0f01 	teq	r0, r1
 8000c4c:	bf1c      	itt	ne
 8000c4e:	2000      	movne	r0, #0
 8000c50:	4770      	bxne	lr
 8000c52:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c56:	d104      	bne.n	8000c62 <__addsf3+0x126>
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c66:	bf3c      	itt	cc
 8000c68:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c6c:	4770      	bxcc	lr
 8000c6e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c72:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c80:	bf16      	itet	ne
 8000c82:	4608      	movne	r0, r1
 8000c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c88:	4601      	movne	r1, r0
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	bf06      	itte	eq
 8000c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c92:	ea90 0f01 	teqeq	r0, r1
 8000c96:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_ui2f>:
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e004      	b.n	8000cac <__aeabi_i2f+0x8>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_i2f>:
 8000ca4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca8:	bf48      	it	mi
 8000caa:	4240      	negmi	r0, r0
 8000cac:	ea5f 0c00 	movs.w	ip, r0
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb8:	4601      	mov	r1, r0
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	e01c      	b.n	8000cfa <__aeabi_l2f+0x2a>

08000cc0 <__aeabi_ul2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e00a      	b.n	8000ce4 <__aeabi_l2f+0x14>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_l2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_l2f+0x14>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	ea5f 0c01 	movs.w	ip, r1
 8000ce8:	bf02      	ittt	eq
 8000cea:	4684      	moveq	ip, r0
 8000cec:	4601      	moveq	r1, r0
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf4:	bf08      	it	eq
 8000cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cfe:	fabc f28c 	clz	r2, ip
 8000d02:	3a08      	subs	r2, #8
 8000d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d08:	db10      	blt.n	8000d2c <__aeabi_l2f+0x5c>
 8000d0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0e:	4463      	add	r3, ip
 8000d10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f102 0220 	add.w	r2, r2, #32
 8000d30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_f2uiz>:
 8000d4c:	0042      	lsls	r2, r0, #1
 8000d4e:	d20e      	bcs.n	8000d6e <__aeabi_f2uiz+0x22>
 8000d50:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d54:	d30b      	bcc.n	8000d6e <__aeabi_f2uiz+0x22>
 8000d56:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d5e:	d409      	bmi.n	8000d74 <__aeabi_f2uiz+0x28>
 8000d60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d68:	fa23 f002 	lsr.w	r0, r3, r2
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2uiz+0x32>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d102      	bne.n	8000d84 <__aeabi_f2uiz+0x38>
 8000d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d82:	4770      	bx	lr
 8000d84:	f04f 0000 	mov.w	r0, #0
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	b0b0      	sub	sp, #192	@ 0xc0
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000dbc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	615a      	str	r2, [r3, #20]
 8000dce:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    uint32_t ARR_Value = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4a87      	ldr	r2, [pc, #540]	@ (8000ffc <SERVO_Init+0x270>)
 8000de0:	015b      	lsls	r3, r3, #5
 8000de2:	4413      	add	r3, r2
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a86      	ldr	r2, [pc, #536]	@ (8001000 <SERVO_Init+0x274>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d10c      	bne.n	8000e06 <SERVO_Init+0x7a>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b85      	ldr	r3, [pc, #532]	@ (8001004 <SERVO_Init+0x278>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a84      	ldr	r2, [pc, #528]	@ (8001004 <SERVO_Init+0x278>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b82      	ldr	r3, [pc, #520]	@ (8001004 <SERVO_Init+0x278>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e04:	e052      	b.n	8000eac <SERVO_Init+0x120>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	4a7c      	ldr	r2, [pc, #496]	@ (8000ffc <SERVO_Init+0x270>)
 8000e0a:	015b      	lsls	r3, r3, #5
 8000e0c:	4413      	add	r3, r2
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a7d      	ldr	r2, [pc, #500]	@ (8001008 <SERVO_Init+0x27c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10c      	bne.n	8000e30 <SERVO_Init+0xa4>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b7b      	ldr	r3, [pc, #492]	@ (8001004 <SERVO_Init+0x278>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a7a      	ldr	r2, [pc, #488]	@ (8001004 <SERVO_Init+0x278>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b78      	ldr	r3, [pc, #480]	@ (8001004 <SERVO_Init+0x278>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2e:	e03d      	b.n	8000eac <SERVO_Init+0x120>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	4a72      	ldr	r2, [pc, #456]	@ (8000ffc <SERVO_Init+0x270>)
 8000e34:	015b      	lsls	r3, r3, #5
 8000e36:	4413      	add	r3, r2
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a74      	ldr	r2, [pc, #464]	@ (800100c <SERVO_Init+0x280>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d10c      	bne.n	8000e5a <SERVO_Init+0xce>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b70      	ldr	r3, [pc, #448]	@ (8001004 <SERVO_Init+0x278>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a6f      	ldr	r2, [pc, #444]	@ (8001004 <SERVO_Init+0x278>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8001004 <SERVO_Init+0x278>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	623b      	str	r3, [r7, #32]
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	e028      	b.n	8000eac <SERVO_Init+0x120>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4a67      	ldr	r2, [pc, #412]	@ (8000ffc <SERVO_Init+0x270>)
 8000e5e:	015b      	lsls	r3, r3, #5
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a6a      	ldr	r2, [pc, #424]	@ (8001010 <SERVO_Init+0x284>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10c      	bne.n	8000e84 <SERVO_Init+0xf8>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b66      	ldr	r3, [pc, #408]	@ (8001004 <SERVO_Init+0x278>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a65      	ldr	r2, [pc, #404]	@ (8001004 <SERVO_Init+0x278>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b63      	ldr	r3, [pc, #396]	@ (8001004 <SERVO_Init+0x278>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0320 	and.w	r3, r3, #32
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	e013      	b.n	8000eac <SERVO_Init+0x120>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	4a5d      	ldr	r2, [pc, #372]	@ (8000ffc <SERVO_Init+0x270>)
 8000e88:	015b      	lsls	r3, r3, #5
 8000e8a:	4413      	add	r3, r2
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a61      	ldr	r2, [pc, #388]	@ (8001014 <SERVO_Init+0x288>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d10b      	bne.n	8000eac <SERVO_Init+0x120>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e94:	4b5b      	ldr	r3, [pc, #364]	@ (8001004 <SERVO_Init+0x278>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a5a      	ldr	r2, [pc, #360]	@ (8001004 <SERVO_Init+0x278>)
 8000e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b58      	ldr	r3, [pc, #352]	@ (8001004 <SERVO_Init+0x278>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	4a53      	ldr	r2, [pc, #332]	@ (8000ffc <SERVO_Init+0x270>)
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	4a4c      	ldr	r2, [pc, #304]	@ (8000ffc <SERVO_Init+0x270>)
 8000ecc:	015b      	lsls	r3, r3, #5
 8000ece:	4413      	add	r3, r2
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 f9fb 	bl	80022d4 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a46      	ldr	r2, [pc, #280]	@ (8000ffc <SERVO_Init+0x270>)
 8000ee2:	015b      	lsls	r3, r3, #5
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3314      	adds	r3, #20
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fb24 	bl	8000538 <__aeabi_ui2d>
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b48      	ldr	r3, [pc, #288]	@ (8001018 <SERVO_Init+0x28c>)
 8000ef6:	f7ff fcc3 	bl	8000880 <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fda5 	bl	8000a50 <__aeabi_d2uiz>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8000ffc <SERVO_Init+0x270>)
 8000f10:	015b      	lsls	r3, r3, #5
 8000f12:	4413      	add	r3, r2
 8000f14:	3314      	adds	r3, #20
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb0d 	bl	8000538 <__aeabi_ui2d>
 8000f1e:	4604      	mov	r4, r0
 8000f20:	460d      	mov	r5, r1
 8000f22:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8000f26:	f7ff fb07 	bl	8000538 <__aeabi_ui2d>
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <SERVO_Init+0x290>)
 8000f30:	f7ff f9c6 	bl	80002c0 <__adddf3>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <SERVO_Init+0x294>)
 8000f42:	f7ff fb73 	bl	800062c <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	f7ff fc97 	bl	8000880 <__aeabi_ddiv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <SERVO_Init+0x290>)
 8000f60:	f7ff f9ac 	bl	80002bc <__aeabi_dsub>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fd70 	bl	8000a50 <__aeabi_d2uiz>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	4a20      	ldr	r2, [pc, #128]	@ (8000ffc <SERVO_Init+0x270>)
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3308      	adds	r3, #8
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <SERVO_Init+0x298>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d10c      	bne.n	8000fa2 <SERVO_Init+0x216>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <SERVO_Init+0x278>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001004 <SERVO_Init+0x278>)
 8000f8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <SERVO_Init+0x278>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	e059      	b.n	8001056 <SERVO_Init+0x2ca>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4a15      	ldr	r2, [pc, #84]	@ (8000ffc <SERVO_Init+0x270>)
 8000fa6:	015b      	lsls	r3, r3, #5
 8000fa8:	4413      	add	r3, r2
 8000faa:	3308      	adds	r3, #8
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fb2:	d10c      	bne.n	8000fce <SERVO_Init+0x242>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <SERVO_Init+0x278>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <SERVO_Init+0x278>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	61d3      	str	r3, [r2, #28]
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <SERVO_Init+0x278>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	e043      	b.n	8001056 <SERVO_Init+0x2ca>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <SERVO_Init+0x270>)
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a13      	ldr	r2, [pc, #76]	@ (8001028 <SERVO_Init+0x29c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d125      	bne.n	800102c <SERVO_Init+0x2a0>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <SERVO_Init+0x278>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <SERVO_Init+0x278>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	61d3      	str	r3, [r2, #28]
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <SERVO_Init+0x278>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	e02d      	b.n	8001056 <SERVO_Init+0x2ca>
 8000ffa:	bf00      	nop
 8000ffc:	08003ce0 	.word	0x08003ce0
 8001000:	40010800 	.word	0x40010800
 8001004:	40021000 	.word	0x40021000
 8001008:	40010c00 	.word	0x40010c00
 800100c:	40011000 	.word	0x40011000
 8001010:	40011400 	.word	0x40011400
 8001014:	40011800 	.word	0x40011800
 8001018:	41490000 	.word	0x41490000
 800101c:	3ff00000 	.word	0x3ff00000
 8001020:	40490000 	.word	0x40490000
 8001024:	40012c00 	.word	0x40012c00
 8001028:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4a5f      	ldr	r2, [pc, #380]	@ (80011ac <SERVO_Init+0x420>)
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	4413      	add	r3, r2
 8001034:	3308      	adds	r3, #8
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a5d      	ldr	r2, [pc, #372]	@ (80011b0 <SERVO_Init+0x424>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10b      	bne.n	8001056 <SERVO_Init+0x2ca>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800103e:	4b5d      	ldr	r3, [pc, #372]	@ (80011b4 <SERVO_Init+0x428>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a5c      	ldr	r2, [pc, #368]	@ (80011b4 <SERVO_Init+0x428>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b5a      	ldr	r3, [pc, #360]	@ (80011b4 <SERVO_Init+0x428>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4a54      	ldr	r2, [pc, #336]	@ (80011ac <SERVO_Init+0x420>)
 800105a:	015b      	lsls	r3, r3, #5
 800105c:	4413      	add	r3, r2
 800105e:	3308      	adds	r3, #8
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
	htim.Init.Prescaler = PSC_Value;
 8001064:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
	htim.Init.Period = ARR_Value;
 800106e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001072:	63bb      	str	r3, [r7, #56]	@ 0x38
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	647b      	str	r3, [r7, #68]	@ 0x44
	HAL_TIM_Base_Init(&htim);
 800107c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001080:	4618      	mov	r0, r3
 8001082:	f002 f813 	bl	80030ac <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800108e:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8001092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fa13 	bl	80034c4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800109e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 f851 	bl	800314a <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 80010b4:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80010b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fd78 	bl	8003bb4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c4:	2360      	movs	r3, #96	@ 0x60
 80010c6:	677b      	str	r3, [r7, #116]	@ 0x74
	sConfigOC.Pulse = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	67bb      	str	r3, [r7, #120]	@ 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4a34      	ldr	r2, [pc, #208]	@ (80011ac <SERVO_Init+0x420>)
 80010da:	015b      	lsls	r3, r3, #5
 80010dc:	4413      	add	r3, r2
 80010de:	3310      	adds	r3, #16
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80010e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f928 	bl	8003340 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80010f0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80010f4:	f7ff fa20 	bl	8000538 <__aeabi_ui2d>
 80010f8:	4604      	mov	r4, r0
 80010fa:	460d      	mov	r5, r1
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4a2b      	ldr	r2, [pc, #172]	@ (80011ac <SERVO_Init+0x420>)
 8001100:	015b      	lsls	r3, r3, #5
 8001102:	4413      	add	r3, r2
 8001104:	3318      	adds	r3, #24
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa37 	bl	800057c <__aeabi_f2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b29      	ldr	r3, [pc, #164]	@ (80011b8 <SERVO_Init+0x42c>)
 8001114:	f7ff fbb4 	bl	8000880 <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4620      	mov	r0, r4
 800111e:	4629      	mov	r1, r5
 8001120:	f7ff fa84 	bl	800062c <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	88fc      	ldrh	r4, [r7, #6]
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fc8f 	bl	8000a50 <__aeabi_d2uiz>
 8001132:	4603      	mov	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <SERVO_Init+0x430>)
 8001138:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800113c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001140:	f7ff f9fa 	bl	8000538 <__aeabi_ui2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <SERVO_Init+0x420>)
 800114c:	015b      	lsls	r3, r3, #5
 800114e:	4413      	add	r3, r2
 8001150:	331c      	adds	r3, #28
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fa11 	bl	800057c <__aeabi_f2d>
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <SERVO_Init+0x42c>)
 8001160:	f7ff fb8e 	bl	8000880 <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4620      	mov	r0, r4
 800116a:	4629      	mov	r1, r5
 800116c:	f7ff fa5e 	bl	800062c <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	88fc      	ldrh	r4, [r7, #6]
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fc69 	bl	8000a50 <__aeabi_d2uiz>
 800117e:	4603      	mov	r3, r0
 8001180:	b299      	uxth	r1, r3
 8001182:	4a0e      	ldr	r2, [pc, #56]	@ (80011bc <SERVO_Init+0x430>)
 8001184:	00a3      	lsls	r3, r4, #2
 8001186:	4413      	add	r3, r2
 8001188:	460a      	mov	r2, r1
 800118a:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <SERVO_Init+0x420>)
 8001190:	015b      	lsls	r3, r3, #5
 8001192:	4413      	add	r3, r2
 8001194:	3310      	adds	r3, #16
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 f82c 	bl	80031fc <HAL_TIM_PWM_Start>
}
 80011a4:	bf00      	nop
 80011a6:	37c0      	adds	r7, #192	@ 0xc0
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bdb0      	pop	{r4, r5, r7, pc}
 80011ac:	08003ce0 	.word	0x08003ce0
 80011b0:	40000800 	.word	0x40000800
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40340000 	.word	0x40340000
 80011bc:	20000028 	.word	0x20000028

080011c0 <SERVO_RawMove>:
	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void SERVO_RawMove(uint16_t au16_SERVO_Instance, uint16_t au16_Pulse)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]
	if(au16_Pulse <= gs_SERVO_info[au16_SERVO_Instance].Period_Max && au16_Pulse >= gs_SERVO_info[au16_SERVO_Instance].Period_Min)
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <SERVO_RawMove+0x48>)
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	885b      	ldrh	r3, [r3, #2]
 80011da:	88ba      	ldrh	r2, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d80e      	bhi.n	80011fe <SERVO_RawMove+0x3e>
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	4a09      	ldr	r2, [pc, #36]	@ (8001208 <SERVO_RawMove+0x48>)
 80011e4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011e8:	88ba      	ldrh	r2, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d307      	bcc.n	80011fe <SERVO_RawMove+0x3e>
	{
		*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4a06      	ldr	r2, [pc, #24]	@ (800120c <SERVO_RawMove+0x4c>)
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	4413      	add	r3, r2
 80011f6:	330c      	adds	r3, #12
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	88ba      	ldrh	r2, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
	}
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000028 	.word	0x20000028
 800120c:	08003ce0 	.word	0x08003ce0

08001210 <SERVO_Get_MaxPulse>:

/* Gets The Maximum Pulse Width Value For A Specific Motor */
uint16_t SERVO_Get_MaxPulse(uint16_t au16_SERVO_Instance)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
	return (gs_SERVO_info[au16_SERVO_Instance].Period_Max);
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <SERVO_Get_MaxPulse+0x20>)
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	885b      	ldrh	r3, [r3, #2]
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000028 	.word	0x20000028

08001234 <SERVO_Get_MinPulse>:


/* Gets The Minimum Pulse Width Value For A Specific Motor */
uint16_t SERVO_Get_MinPulse(uint16_t au16_SERVO_Instance)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
	return (gs_SERVO_info[au16_SERVO_Instance].Period_Min);
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4a03      	ldr	r2, [pc, #12]	@ (8001250 <SERVO_Get_MinPulse+0x1c>)
 8001242:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000028 	.word	0x20000028

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t AD_RES = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	81fb      	strh	r3, [r7, #14]
	uint16_t Min_pulse = 0, Max_pulse = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	81bb      	strh	r3, [r7, #12]
 8001262:	2300      	movs	r3, #0
 8001264:	817b      	strh	r3, [r7, #10]
	float temp = 0;
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
	uint16_t servo_pulse = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	807b      	strh	r3, [r7, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001270:	f000 fa9a 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f852 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f000 f95c 	bl	8001534 <MX_GPIO_Init>
  MX_ADC1_Init();
 800127c:	f000 f8a6 	bl	80013cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8001280:	f000 f8e2 	bl	8001448 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SERVO_Init(SERVO_MOTOR1);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fd81 	bl	8000d8c <SERVO_Init>
  Min_pulse = SERVO_Get_MinPulse(SERVO_MOTOR1);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ffd2 	bl	8001234 <SERVO_Get_MinPulse>
 8001290:	4603      	mov	r3, r0
 8001292:	81bb      	strh	r3, [r7, #12]
  Max_pulse = SERVO_Get_MaxPulse(SERVO_MOTOR1);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ffbb 	bl	8001210 <SERVO_Get_MaxPulse>
 800129a:	4603      	mov	r3, r0
 800129c:	817b      	strh	r3, [r7, #10]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800129e:	481d      	ldr	r0, [pc, #116]	@ (8001314 <main+0xc0>)
 80012a0:	f000 fbe0 	bl	8001a64 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1); // 1 ms timeout
 80012a4:	2101      	movs	r1, #1
 80012a6:	481b      	ldr	r0, [pc, #108]	@ (8001314 <main+0xc0>)
 80012a8:	f000 fc8a 	bl	8001bc0 <HAL_ADC_PollForConversion>
	  AD_RES = HAL_ADC_GetValue(&hadc1);
 80012ac:	4819      	ldr	r0, [pc, #100]	@ (8001314 <main+0xc0>)
 80012ae:	f000 fd8d 	bl	8001dcc <HAL_ADC_GetValue>
 80012b2:	4603      	mov	r3, r0
 80012b4:	81fb      	strh	r3, [r7, #14]

	  temp = ((Max_pulse - Min_pulse) / 4000.0); // chequear porque me niego a usar float
 80012b6:	897a      	ldrh	r2, [r7, #10]
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f94b 	bl	8000558 <__aeabi_i2d>
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <main+0xc4>)
 80012c8:	f7ff fada 	bl	8000880 <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fbdc 	bl	8000a90 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	607b      	str	r3, [r7, #4]
	  servo_pulse = (uint16_t)(AD_RES * temp) + Min_pulse;
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fce0 	bl	8000ca4 <__aeabi_i2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff2f 	bl	800014c <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd2b 	bl	8000d4c <__aeabi_f2uiz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	89bb      	ldrh	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	807b      	strh	r3, [r7, #2]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SERVO_RawMove(SERVO_MOTOR1, servo_pulse);
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	4619      	mov	r1, r3
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ff5b 	bl	80011c0 <SERVO_RawMove>
	  HAL_Delay(10);
 800130a:	200a      	movs	r0, #10
 800130c:	f000 faae 	bl	800186c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001310:	bf00      	nop
 8001312:	e7c4      	b.n	800129e <main+0x4a>
 8001314:	2000002c 	.word	0x2000002c
 8001318:	40af4000 	.word	0x40af4000

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	@ 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001326:	2228      	movs	r2, #40	@ 0x28
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fca0 	bl	8003c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134c:	2301      	movs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001350:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800135a:	2301      	movs	r3, #1
 800135c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001362:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001366:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001368:	2300      	movs	r3, #0
 800136a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001370:	4618      	mov	r0, r3
 8001372:	f001 f933 	bl	80025dc <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800137c:	f000 f8fc 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fba0 	bl	8002ae0 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013a6:	f000 f8e7 	bl	8001578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013aa:	2302      	movs	r3, #2
 80013ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fd0d 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80013c0:	f000 f8da 	bl	8001578 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3750      	adds	r7, #80	@ 0x50
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_ADC1_Init+0x74>)
 80013de:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <MX_ADC1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_ADC1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_ADC1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_ADC1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_ADC1_Init+0x74>)
 80013f6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80013fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <MX_ADC1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_ADC1_Init+0x74>)
 8001404:	2201      	movs	r2, #1
 8001406:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001408:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_ADC1_Init+0x74>)
 800140a:	f000 fa53 	bl	80018b4 <HAL_ADC_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 f8b0 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001418:	2304      	movs	r3, #4
 800141a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800141c:	2301      	movs	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_ADC1_Init+0x74>)
 800142a:	f000 fcdb 	bl	8001de4 <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001434:	f000 f8a0 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000002c 	.word	0x2000002c
 8001444:	40012400 	.word	0x40012400

08001448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	@ 0x38
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <MX_TIM2_Init+0xe8>)
 800147a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001480:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <MX_TIM2_Init+0xe8>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <MX_TIM2_Init+0xe8>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800148c:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <MX_TIM2_Init+0xe8>)
 800148e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001492:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <MX_TIM2_Init+0xe8>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <MX_TIM2_Init+0xe8>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a0:	4823      	ldr	r0, [pc, #140]	@ (8001530 <MX_TIM2_Init+0xe8>)
 80014a2:	f001 fe03 	bl	80030ac <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014ac:	f000 f864 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	4619      	mov	r1, r3
 80014bc:	481c      	ldr	r0, [pc, #112]	@ (8001530 <MX_TIM2_Init+0xe8>)
 80014be:	f002 f801 	bl	80034c4 <HAL_TIM_ConfigClockSource>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014c8:	f000 f856 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014cc:	4818      	ldr	r0, [pc, #96]	@ (8001530 <MX_TIM2_Init+0xe8>)
 80014ce:	f001 fe3c 	bl	800314a <HAL_TIM_PWM_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014d8:	f000 f84e 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4619      	mov	r1, r3
 80014ea:	4811      	ldr	r0, [pc, #68]	@ (8001530 <MX_TIM2_Init+0xe8>)
 80014ec:	f002 fb62 	bl	8003bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014f6:	f000 f83f 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fa:	2360      	movs	r3, #96	@ 0x60
 80014fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4807      	ldr	r0, [pc, #28]	@ (8001530 <MX_TIM2_Init+0xe8>)
 8001512:	f001 ff15 	bl	8003340 <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800151c:	f000 f82c 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001520:	4803      	ldr	r0, [pc, #12]	@ (8001530 <MX_TIM2_Init+0xe8>)
 8001522:	f000 f8b9 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8001526:	bf00      	nop
 8001528:	3738      	adds	r7, #56	@ 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000005c 	.word	0x2000005c

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_GPIO_Init+0x40>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <MX_GPIO_Init+0x40>)
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	6193      	str	r3, [r2, #24]
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <MX_GPIO_Init+0x40>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0320 	and.w	r3, r3, #32
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <MX_GPIO_Init+0x40>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <MX_GPIO_Init+0x40>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <MX_GPIO_Init+0x40>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <Error_Handler+0x8>

08001584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_MspInit+0x5c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <HAL_MspInit+0x5c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6193      	str	r3, [r2, #24]
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_MspInit+0x5c>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_MspInit+0x60>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_MspInit+0x60>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000

080015e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <HAL_ADC_MspInit+0x6c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d121      	bne.n	800164c <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001638:	2310      	movs	r3, #16
 800163a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <HAL_ADC_MspInit+0x74>)
 8001648:	f000 fe44 	bl	80022d4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40012400 	.word	0x40012400
 8001658:	40021000 	.word	0x40021000
 800165c:	40010800 	.word	0x40010800

08001660 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001670:	d10b      	bne.n	800168a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_TIM_Base_MspInit+0x34>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_TIM_Base_MspInit+0x34>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_TIM_Base_MspInit+0x34>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b6:	d117      	bne.n	80016e8 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_TIM_MspPostInit+0x58>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <HAL_TIM_MspPostInit+0x58>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <HAL_TIM_MspPostInit+0x58>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <HAL_TIM_MspPostInit+0x5c>)
 80016e4:	f000 fdf6 	bl	80022d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010800 	.word	0x40010800

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 f874 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800175c:	f7ff fff8 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480b      	ldr	r0, [pc, #44]	@ (8001790 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001762:	490c      	ldr	r1, [pc, #48]	@ (8001794 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001764:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a09      	ldr	r2, [pc, #36]	@ (800179c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001778:	4c09      	ldr	r4, [pc, #36]	@ (80017a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f002 fa7b 	bl	8003c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178a:	f7ff fd63 	bl	8001254 <main>
  bx lr
 800178e:	4770      	bx	lr
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001798:	08003d48 	.word	0x08003d48
  ldr r2, =_sbss
 800179c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017a0:	200000a8 	.word	0x200000a8

080017a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC1_2_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_Init+0x28>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <HAL_Init+0x28>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 fd57 	bl	800226c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	200f      	movs	r0, #15
 80017c0:	f000 f808 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff fede 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_InitTick+0x54>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_InitTick+0x58>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd61 	bl	80022ba <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f000 fd37 	bl	8002282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <HAL_InitTick+0x5c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	20000008 	.word	0x20000008
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_IncTick+0x1c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_IncTick+0x20>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a03      	ldr	r2, [pc, #12]	@ (8001854 <HAL_IncTick+0x20>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000008 	.word	0x20000008
 8001854:	200000a4 	.word	0x200000a4

08001858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b02      	ldr	r3, [pc, #8]	@ (8001868 <HAL_GetTick+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	200000a4 	.word	0x200000a4

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fff0 	bl	8001858 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffe0 	bl	8001858 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008

080018b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0be      	b.n	8001a54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fe78 	bl	80015e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fbc5 	bl	8002088 <ADC_ConversionStop_Disable>
 80018fe:	4603      	mov	r3, r0
 8001900:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8099 	bne.w	8001a42 <HAL_ADC_Init+0x18e>
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 8095 	bne.w	8001a42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001920:	f023 0302 	bic.w	r3, r3, #2
 8001924:	f043 0202 	orr.w	r2, r3, #2
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001934:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7b1b      	ldrb	r3, [r3, #12]
 800193a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800193c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	4313      	orrs	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800194c:	d003      	beq.n	8001956 <HAL_ADC_Init+0xa2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_ADC_Init+0xa8>
 8001956:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800195a:	e000      	b.n	800195e <HAL_ADC_Init+0xaa>
 800195c:	2300      	movs	r3, #0
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7d1b      	ldrb	r3, [r3, #20]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d119      	bne.n	80019a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7b1b      	ldrb	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	3b01      	subs	r3, #1
 800197a:	035a      	lsls	r2, r3, #13
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e00b      	b.n	80019a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	f043 0220 	orr.w	r2, r3, #32
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <HAL_ADC_Init+0x1a8>)
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019d0:	d003      	beq.n	80019da <HAL_ADC_Init+0x126>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d104      	bne.n	80019e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	3b01      	subs	r3, #1
 80019e0:	051b      	lsls	r3, r3, #20
 80019e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_ADC_Init+0x1ac>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d10b      	bne.n	8001a20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a1e:	e018      	b.n	8001a52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	f023 0312 	bic.w	r3, r3, #18
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a40:	e007      	b.n	8001a52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a60:	ff1f0efe 	.word	0xff1f0efe

08001a64 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Start+0x1a>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e098      	b.n	8001bb0 <HAL_ADC_Start+0x14c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 faa4 	bl	8001fd4 <ADC_Enable>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 8087 	bne.w	8001ba6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a41      	ldr	r2, [pc, #260]	@ (8001bb8 <HAL_ADC_Start+0x154>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d105      	bne.n	8001ac2 <HAL_ADC_Start+0x5e>
 8001ab6:	4b41      	ldr	r3, [pc, #260]	@ (8001bbc <HAL_ADC_Start+0x158>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d026      	beq.n	8001b2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ae4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aec:	e01d      	b.n	8001b2a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a2f      	ldr	r2, [pc, #188]	@ (8001bbc <HAL_ADC_Start+0x158>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d004      	beq.n	8001b0e <HAL_ADC_Start+0xaa>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb8 <HAL_ADC_Start+0x154>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10d      	bne.n	8001b2a <HAL_ADC_Start+0xc6>
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bbc <HAL_ADC_Start+0x158>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3a:	f023 0206 	bic.w	r2, r3, #6
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b42:	e002      	b.n	8001b4a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f06f 0202 	mvn.w	r2, #2
 8001b5a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b66:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b6a:	d113      	bne.n	8001b94 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b70:	4a11      	ldr	r2, [pc, #68]	@ (8001bb8 <HAL_ADC_Start+0x154>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d105      	bne.n	8001b82 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_ADC_Start+0x158>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d108      	bne.n	8001b94 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	e00c      	b.n	8001bae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	e003      	b.n	8001bae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40012800 	.word	0x40012800
 8001bbc:	40012400 	.word	0x40012400

08001bc0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bd6:	f7ff fe3f 	bl	8001858 <HAL_GetTick>
 8001bda:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0d3      	b.n	8001daa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d131      	bne.n	8001c74 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d12a      	bne.n	8001c74 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c1e:	e021      	b.n	8001c64 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c26:	d01d      	beq.n	8001c64 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x7e>
 8001c2e:	f7ff fe13 	bl	8001858 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d212      	bcs.n	8001c64 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10b      	bne.n	8001c64 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0a2      	b.n	8001daa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0d6      	beq.n	8001c20 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c72:	e070      	b.n	8001d56 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c74:	4b4f      	ldr	r3, [pc, #316]	@ (8001db4 <HAL_ADC_PollForConversion+0x1f4>)
 8001c76:	681c      	ldr	r4, [r3, #0]
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f001 f961 	bl	8002f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001db8 <HAL_ADC_PollForConversion+0x1f8>)
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x104>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	4b48      	ldr	r3, [pc, #288]	@ (8001dbc <HAL_ADC_PollForConversion+0x1fc>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d111      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x104>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	4b46      	ldr	r3, [pc, #280]	@ (8001dc0 <HAL_ADC_PollForConversion+0x200>)
 8001ca8:	400b      	ands	r3, r1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d108      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x100>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68d9      	ldr	r1, [r3, #12]
 8001cb4:	4b43      	ldr	r3, [pc, #268]	@ (8001dc4 <HAL_ADC_PollForConversion+0x204>)
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x100>
 8001cbc:	2314      	movs	r3, #20
 8001cbe:	e020      	b.n	8001d02 <HAL_ADC_PollForConversion+0x142>
 8001cc0:	2329      	movs	r3, #41	@ 0x29
 8001cc2:	e01e      	b.n	8001d02 <HAL_ADC_PollForConversion+0x142>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6919      	ldr	r1, [r3, #16]
 8001cca:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc0 <HAL_ADC_PollForConversion+0x200>)
 8001ccc:	400b      	ands	r3, r1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_ADC_PollForConversion+0x120>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <HAL_ADC_PollForConversion+0x204>)
 8001cda:	400b      	ands	r3, r1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <HAL_ADC_PollForConversion+0x13c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6919      	ldr	r1, [r3, #16]
 8001ce6:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <HAL_ADC_PollForConversion+0x208>)
 8001ce8:	400b      	ands	r3, r1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_ADC_PollForConversion+0x140>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68d9      	ldr	r1, [r3, #12]
 8001cf4:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <HAL_ADC_PollForConversion+0x208>)
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_PollForConversion+0x140>
 8001cfc:	2354      	movs	r3, #84	@ 0x54
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_PollForConversion+0x142>
 8001d00:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d08:	e021      	b.n	8001d4e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d01a      	beq.n	8001d48 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_ADC_PollForConversion+0x168>
 8001d18:	f7ff fd9e 	bl	8001858 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d20f      	bcs.n	8001d48 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d90b      	bls.n	8001d48 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e030      	b.n	8001daa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d8d9      	bhi.n	8001d0a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f06f 0212 	mvn.w	r2, #18
 8001d5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d76:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d7a:	d115      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d111      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000
 8001db8:	24924924 	.word	0x24924924
 8001dbc:	00924924 	.word	0x00924924
 8001dc0:	12492492 	.word	0x12492492
 8001dc4:	00492492 	.word	0x00492492
 8001dc8:	00249249 	.word	0x00249249

08001dcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x20>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e0dc      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1da>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d81c      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b05      	subs	r3, #5
 8001e26:	221f      	movs	r2, #31
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4019      	ands	r1, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3b05      	subs	r3, #5
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e4c:	e03c      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d81c      	bhi.n	8001e90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	@ 0x23
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4019      	ands	r1, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b23      	subs	r3, #35	@ 0x23
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e8e:	e01b      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b41      	subs	r3, #65	@ 0x41
 8001ea2:	221f      	movs	r2, #31
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4019      	ands	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	@ 0x41
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d91c      	bls.n	8001f0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b1e      	subs	r3, #30
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4019      	ands	r1, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6898      	ldr	r0, [r3, #8]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b1e      	subs	r3, #30
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	e019      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6919      	ldr	r1, [r3, #16]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6898      	ldr	r0, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	fa00 f203 	lsl.w	r2, r0, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d003      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	d132      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d125      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d126      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <HAL_ADC_ConfigChannel+0x1e8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x1b2>
 8001fa2:	e007      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40012400 	.word	0x40012400
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d040      	beq.n	8002074 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002002:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <ADC_Enable+0xac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1f      	ldr	r2, [pc, #124]	@ (8002084 <ADC_Enable+0xb0>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	0c9b      	lsrs	r3, r3, #18
 800200e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002010:	e002      	b.n	8002018 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800201e:	f7ff fc1b 	bl	8001858 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002024:	e01f      	b.n	8002066 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002026:	f7ff fc17 	bl	8001858 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d918      	bls.n	8002066 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d011      	beq.n	8002066 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e007      	b.n	8002076 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d1d8      	bne.n	8002026 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000
 8002084:	431bde83 	.word	0x431bde83

08002088 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d12e      	bne.n	8002100 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020b2:	f7ff fbd1 	bl	8001858 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020b8:	e01b      	b.n	80020f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020ba:	f7ff fbcd 	bl	8001858 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d914      	bls.n	80020f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10d      	bne.n	80020f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e007      	b.n	8002102 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d0dc      	beq.n	80020ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	@ (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	@ (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	@ 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002238:	d301      	bcc.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e00f      	b.n	800225e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <SysTick_Config+0x40>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	210f      	movs	r1, #15
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f7ff ff90 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <SysTick_Config+0x40>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002256:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <SysTick_Config+0x40>)
 8002258:	2207      	movs	r2, #7
 800225a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff49 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff5e 	bl	8002154 <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff90 	bl	80021c4 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5f 	bl	8002170 <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffb0 	bl	8002228 <SysTick_Config>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b08b      	sub	sp, #44	@ 0x2c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e169      	b.n	80025bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022e8:	2201      	movs	r2, #1
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	429a      	cmp	r2, r3
 8002302:	f040 8158 	bne.w	80025b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4a9a      	ldr	r2, [pc, #616]	@ (8002574 <HAL_GPIO_Init+0x2a0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d05e      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 8002310:	4a98      	ldr	r2, [pc, #608]	@ (8002574 <HAL_GPIO_Init+0x2a0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d875      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 8002316:	4a98      	ldr	r2, [pc, #608]	@ (8002578 <HAL_GPIO_Init+0x2a4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d058      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 800231c:	4a96      	ldr	r2, [pc, #600]	@ (8002578 <HAL_GPIO_Init+0x2a4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d86f      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 8002322:	4a96      	ldr	r2, [pc, #600]	@ (800257c <HAL_GPIO_Init+0x2a8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d052      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 8002328:	4a94      	ldr	r2, [pc, #592]	@ (800257c <HAL_GPIO_Init+0x2a8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d869      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 800232e:	4a94      	ldr	r2, [pc, #592]	@ (8002580 <HAL_GPIO_Init+0x2ac>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d04c      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 8002334:	4a92      	ldr	r2, [pc, #584]	@ (8002580 <HAL_GPIO_Init+0x2ac>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d863      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 800233a:	4a92      	ldr	r2, [pc, #584]	@ (8002584 <HAL_GPIO_Init+0x2b0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d046      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 8002340:	4a90      	ldr	r2, [pc, #576]	@ (8002584 <HAL_GPIO_Init+0x2b0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d85d      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 8002346:	2b12      	cmp	r3, #18
 8002348:	d82a      	bhi.n	80023a0 <HAL_GPIO_Init+0xcc>
 800234a:	2b12      	cmp	r3, #18
 800234c:	d859      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 800234e:	a201      	add	r2, pc, #4	@ (adr r2, 8002354 <HAL_GPIO_Init+0x80>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	080023cf 	.word	0x080023cf
 8002358:	080023a9 	.word	0x080023a9
 800235c:	080023bb 	.word	0x080023bb
 8002360:	080023fd 	.word	0x080023fd
 8002364:	08002403 	.word	0x08002403
 8002368:	08002403 	.word	0x08002403
 800236c:	08002403 	.word	0x08002403
 8002370:	08002403 	.word	0x08002403
 8002374:	08002403 	.word	0x08002403
 8002378:	08002403 	.word	0x08002403
 800237c:	08002403 	.word	0x08002403
 8002380:	08002403 	.word	0x08002403
 8002384:	08002403 	.word	0x08002403
 8002388:	08002403 	.word	0x08002403
 800238c:	08002403 	.word	0x08002403
 8002390:	08002403 	.word	0x08002403
 8002394:	08002403 	.word	0x08002403
 8002398:	080023b1 	.word	0x080023b1
 800239c:	080023c5 	.word	0x080023c5
 80023a0:	4a79      	ldr	r2, [pc, #484]	@ (8002588 <HAL_GPIO_Init+0x2b4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023a6:	e02c      	b.n	8002402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e029      	b.n	8002404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	3304      	adds	r3, #4
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e024      	b.n	8002404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	3308      	adds	r3, #8
 80023c0:	623b      	str	r3, [r7, #32]
          break;
 80023c2:	e01f      	b.n	8002404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	330c      	adds	r3, #12
 80023ca:	623b      	str	r3, [r7, #32]
          break;
 80023cc:	e01a      	b.n	8002404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023d6:	2304      	movs	r3, #4
 80023d8:	623b      	str	r3, [r7, #32]
          break;
 80023da:	e013      	b.n	8002404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e4:	2308      	movs	r3, #8
 80023e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	611a      	str	r2, [r3, #16]
          break;
 80023ee:	e009      	b.n	8002404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f0:	2308      	movs	r3, #8
 80023f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	615a      	str	r2, [r3, #20]
          break;
 80023fa:	e003      	b.n	8002404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
          break;
 8002400:	e000      	b.n	8002404 <HAL_GPIO_Init+0x130>
          break;
 8002402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2bff      	cmp	r3, #255	@ 0xff
 8002408:	d801      	bhi.n	800240e <HAL_GPIO_Init+0x13a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	e001      	b.n	8002412 <HAL_GPIO_Init+0x13e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2bff      	cmp	r3, #255	@ 0xff
 8002418:	d802      	bhi.n	8002420 <HAL_GPIO_Init+0x14c>
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	e002      	b.n	8002426 <HAL_GPIO_Init+0x152>
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	3b08      	subs	r3, #8
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	210f      	movs	r1, #15
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	401a      	ands	r2, r3
 8002438:	6a39      	ldr	r1, [r7, #32]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	431a      	orrs	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80b1 	beq.w	80025b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002454:	4b4d      	ldr	r3, [pc, #308]	@ (800258c <HAL_GPIO_Init+0x2b8>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a4c      	ldr	r2, [pc, #304]	@ (800258c <HAL_GPIO_Init+0x2b8>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b4a      	ldr	r3, [pc, #296]	@ (800258c <HAL_GPIO_Init+0x2b8>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800246c:	4a48      	ldr	r2, [pc, #288]	@ (8002590 <HAL_GPIO_Init+0x2bc>)
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a40      	ldr	r2, [pc, #256]	@ (8002594 <HAL_GPIO_Init+0x2c0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d013      	beq.n	80024c0 <HAL_GPIO_Init+0x1ec>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a3f      	ldr	r2, [pc, #252]	@ (8002598 <HAL_GPIO_Init+0x2c4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00d      	beq.n	80024bc <HAL_GPIO_Init+0x1e8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_GPIO_Init+0x2c8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x1e4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3d      	ldr	r2, [pc, #244]	@ (80025a0 <HAL_GPIO_Init+0x2cc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_GPIO_Init+0x1e0>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e006      	b.n	80024c2 <HAL_GPIO_Init+0x1ee>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e004      	b.n	80024c2 <HAL_GPIO_Init+0x1ee>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e002      	b.n	80024c2 <HAL_GPIO_Init+0x1ee>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_GPIO_Init+0x1ee>
 80024c0:	2300      	movs	r3, #0
 80024c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c4:	f002 0203 	and.w	r2, r2, #3
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	4093      	lsls	r3, r2
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024d2:	492f      	ldr	r1, [pc, #188]	@ (8002590 <HAL_GPIO_Init+0x2bc>)
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024ec:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	492c      	ldr	r1, [pc, #176]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024fa:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	4928      	ldr	r1, [pc, #160]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002504:	4013      	ands	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	4922      	ldr	r1, [pc, #136]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	491e      	ldr	r1, [pc, #120]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 800252c:	4013      	ands	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4918      	ldr	r1, [pc, #96]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800254a:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	43db      	mvns	r3, r3
 8002552:	4914      	ldr	r1, [pc, #80]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002554:	4013      	ands	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d021      	beq.n	80025a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002564:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	490e      	ldr	r1, [pc, #56]	@ (80025a4 <HAL_GPIO_Init+0x2d0>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e021      	b.n	80025b6 <HAL_GPIO_Init+0x2e2>
 8002572:	bf00      	nop
 8002574:	10320000 	.word	0x10320000
 8002578:	10310000 	.word	0x10310000
 800257c:	10220000 	.word	0x10220000
 8002580:	10210000 	.word	0x10210000
 8002584:	10120000 	.word	0x10120000
 8002588:	10110000 	.word	0x10110000
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	40010800 	.word	0x40010800
 8002598:	40010c00 	.word	0x40010c00
 800259c:	40011000 	.word	0x40011000
 80025a0:	40011400 	.word	0x40011400
 80025a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_GPIO_Init+0x304>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4909      	ldr	r1, [pc, #36]	@ (80025d8 <HAL_GPIO_Init+0x304>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	3301      	adds	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f47f ae8e 	bne.w	80022e8 <HAL_GPIO_Init+0x14>
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	372c      	adds	r7, #44	@ 0x2c
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40010400 	.word	0x40010400

080025dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e272      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8087 	beq.w	800270a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025fc:	4b92      	ldr	r3, [pc, #584]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b04      	cmp	r3, #4
 8002606:	d00c      	beq.n	8002622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002608:	4b8f      	ldr	r3, [pc, #572]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d112      	bne.n	800263a <HAL_RCC_OscConfig+0x5e>
 8002614:	4b8c      	ldr	r3, [pc, #560]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002620:	d10b      	bne.n	800263a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002622:	4b89      	ldr	r3, [pc, #548]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d06c      	beq.n	8002708 <HAL_RCC_OscConfig+0x12c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d168      	bne.n	8002708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e24c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x76>
 8002644:	4b80      	ldr	r3, [pc, #512]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7f      	ldr	r2, [pc, #508]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e02e      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b7b      	ldr	r3, [pc, #492]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7a      	ldr	r2, [pc, #488]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b78      	ldr	r3, [pc, #480]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a77      	ldr	r2, [pc, #476]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0xbc>
 800267e:	4b72      	ldr	r3, [pc, #456]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a71      	ldr	r2, [pc, #452]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b6f      	ldr	r3, [pc, #444]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6e      	ldr	r2, [pc, #440]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002698:	4b6b      	ldr	r3, [pc, #428]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a6a      	ldr	r2, [pc, #424]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b68      	ldr	r3, [pc, #416]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a67      	ldr	r2, [pc, #412]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff f8ce 	bl	8001858 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff f8ca 	bl	8001858 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e200      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe4>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff f8ba 	bl	8001858 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff f8b6 	bl	8001858 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1ec      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x10c>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d063      	beq.n	80027de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002716:	4b4c      	ldr	r3, [pc, #304]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002722:	4b49      	ldr	r3, [pc, #292]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11c      	bne.n	8002768 <HAL_RCC_OscConfig+0x18c>
 800272e:	4b46      	ldr	r3, [pc, #280]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	4b43      	ldr	r3, [pc, #268]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x176>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1c0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b3d      	ldr	r3, [pc, #244]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4939      	ldr	r1, [pc, #228]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	e03a      	b.n	80027de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002770:	4b36      	ldr	r3, [pc, #216]	@ (800284c <HAL_RCC_OscConfig+0x270>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7ff f86f 	bl	8001858 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff f86b 	bl	8001858 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1a1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b2a      	ldr	r3, [pc, #168]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4927      	ldr	r1, [pc, #156]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b26      	ldr	r3, [pc, #152]	@ (800284c <HAL_RCC_OscConfig+0x270>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff f84e 	bl	8001858 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c0:	f7ff f84a 	bl	8001858 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e180      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03a      	beq.n	8002860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d019      	beq.n	8002826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <HAL_RCC_OscConfig+0x274>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7ff f82e 	bl	8001858 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff f82a 	bl	8001858 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e160      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800281e:	2001      	movs	r0, #1
 8002820:	f000 faba 	bl	8002d98 <RCC_Delay>
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_RCC_OscConfig+0x274>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7ff f814 	bl	8001858 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002832:	e00f      	b.n	8002854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002834:	f7ff f810 	bl	8001858 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d908      	bls.n	8002854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e146      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	42420000 	.word	0x42420000
 8002850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b92      	ldr	r3, [pc, #584]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e9      	bne.n	8002834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a6 	beq.w	80029ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10d      	bne.n	800289a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b88      	ldr	r3, [pc, #544]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a87      	ldr	r2, [pc, #540]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b85      	ldr	r3, [pc, #532]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b82      	ldr	r3, [pc, #520]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a6:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b2:	f7fe ffd1 	bl	8001858 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ba:	f7fe ffcd 	bl	8001858 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b64      	cmp	r3, #100	@ 0x64
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e103      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b75      	ldr	r3, [pc, #468]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x312>
 80028e0:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6213      	str	r3, [r2, #32]
 80028ec:	e02d      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x334>
 80028f6:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a69      	ldr	r2, [pc, #420]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4b67      	ldr	r3, [pc, #412]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a66      	ldr	r2, [pc, #408]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	e01c      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x356>
 8002918:	4b61      	ldr	r3, [pc, #388]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a60      	ldr	r2, [pc, #384]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	4b5e      	ldr	r3, [pc, #376]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a5d      	ldr	r2, [pc, #372]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e00b      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 8002932:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a5a      	ldr	r2, [pc, #360]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b58      	ldr	r3, [pc, #352]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a57      	ldr	r2, [pc, #348]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d015      	beq.n	800297e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe ff81 	bl	8001858 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe ff7d 	bl	8001858 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0b1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ee      	beq.n	800295a <HAL_RCC_OscConfig+0x37e>
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe ff6b 	bl	8001858 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe ff67 	bl	8001858 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e09b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	4b40      	ldr	r3, [pc, #256]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ee      	bne.n	8002986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8087 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c4:	4b36      	ldr	r3, [pc, #216]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d061      	beq.n	8002a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d146      	bne.n	8002a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b33      	ldr	r3, [pc, #204]	@ (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe ff3b 	bl	8001858 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe ff37 	bl	8001858 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e06d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f8:	4b29      	ldr	r3, [pc, #164]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a0e:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4921      	ldr	r1, [pc, #132]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a20:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a19      	ldr	r1, [r3, #32]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	430b      	orrs	r3, r1
 8002a32:	491b      	ldr	r1, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7fe ff0b 	bl	8001858 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe ff07 	bl	8001858 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e03d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x46a>
 8002a64:	e035      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fef4 	bl	8001858 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fef0 	bl	8001858 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e026      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x498>
 8002a92:	e01e      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e019      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCC_OscConfig+0x500>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0d0      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d910      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b67      	ldr	r3, [pc, #412]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4965      	ldr	r1, [pc, #404]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a58      	ldr	r2, [pc, #352]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a52      	ldr	r2, [pc, #328]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d040      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e073      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4936      	ldr	r1, [pc, #216]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fe42 	bl	8001858 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe fe3e 	bl	8001858 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e053      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d210      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	4922      	ldr	r1, [pc, #136]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_RCC_ClockConfig+0x1cc>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fda0 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08003d00 	.word	0x08003d00
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d002      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x36>
 8002ce2:	e027      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce6:	613b      	str	r3, [r7, #16]
      break;
 8002ce8:	e027      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	0c9b      	lsrs	r3, r3, #18
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	4a17      	ldr	r2, [pc, #92]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d02:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	0c5b      	lsrs	r3, r3, #17
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	4a11      	ldr	r2, [pc, #68]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a0d      	ldr	r2, [pc, #52]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d16:	fb03 f202 	mul.w	r2, r3, r2
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e004      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0c      	ldr	r2, [pc, #48]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	613b      	str	r3, [r7, #16]
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d36:	613b      	str	r3, [r7, #16]
      break;
 8002d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3a:	693b      	ldr	r3, [r7, #16]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	007a1200 	.word	0x007a1200
 8002d50:	08003d18 	.word	0x08003d18
 8002d54:	08003d28 	.word	0x08003d28
 8002d58:	003d0900 	.word	0x003d0900

08002d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b02      	ldr	r3, [pc, #8]	@ (8002d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	20000000 	.word	0x20000000

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d74:	f7ff fff2 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	0adb      	lsrs	r3, r3, #11
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08003d10 	.word	0x08003d10

08002d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <RCC_Delay+0x34>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <RCC_Delay+0x38>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a5b      	lsrs	r3, r3, #9
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002db4:	bf00      	nop
  }
  while (Delay --);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e5a      	subs	r2, r3, #1
 8002dba:	60fa      	str	r2, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <RCC_Delay+0x1c>
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	10624dd3 	.word	0x10624dd3

08002dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d07d      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002df0:	2300      	movs	r3, #0
 8002df2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df4:	4b4f      	ldr	r3, [pc, #316]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b4c      	ldr	r3, [pc, #304]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a4b      	ldr	r2, [pc, #300]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	61d3      	str	r3, [r2, #28]
 8002e0c:	4b49      	ldr	r3, [pc, #292]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	4b46      	ldr	r3, [pc, #280]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d118      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e28:	4b43      	ldr	r3, [pc, #268]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a42      	ldr	r2, [pc, #264]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e34:	f7fe fd10 	bl	8001858 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	e008      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fe fd0c 	bl	8001858 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	@ 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e06d      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5a:	4b36      	ldr	r3, [pc, #216]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02e      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d027      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e78:	4b2e      	ldr	r3, [pc, #184]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e82:	4b2e      	ldr	r3, [pc, #184]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e88:	4b2c      	ldr	r3, [pc, #176]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e8e:	4a29      	ldr	r2, [pc, #164]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d014      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fcdb 	bl	8001858 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe fcd7 	bl	8001858 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e036      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ee      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4917      	ldr	r1, [pc, #92]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b14      	ldr	r3, [pc, #80]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	490b      	ldr	r1, [pc, #44]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f16:	4b07      	ldr	r3, [pc, #28]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4904      	ldr	r1, [pc, #16]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420440 	.word	0x42420440

08002f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	f200 808a 	bhi.w	800307e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d045      	beq.n	8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d075      	beq.n	8003062 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f76:	e082      	b.n	800307e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f78:	4b46      	ldr	r3, [pc, #280]	@ (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f7e:	4b45      	ldr	r3, [pc, #276]	@ (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d07b      	beq.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	0c9b      	lsrs	r3, r3, #18
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	4a41      	ldr	r2, [pc, #260]	@ (8003098 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f94:	5cd3      	ldrb	r3, [r2, r3]
 8002f96:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d015      	beq.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	0c5b      	lsrs	r3, r3, #17
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	4a3b      	ldr	r2, [pc, #236]	@ (800309c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00d      	beq.n	8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002fbc:	4a38      	ldr	r2, [pc, #224]	@ (80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4a34      	ldr	r2, [pc, #208]	@ (80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fe4:	d102      	bne.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	61bb      	str	r3, [r7, #24]
      break;
 8002fea:	e04a      	b.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
      break;
 8002ffa:	e042      	b.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ffc:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800300c:	d108      	bne.n	8003020 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003018:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e01f      	b.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800302a:	d109      	bne.n	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003038:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e00f      	b.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800304a:	d11c      	bne.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d016      	beq.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003058:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800305c:	61bb      	str	r3, [r7, #24]
      break;
 800305e:	e012      	b.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003060:	e011      	b.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003062:	f7ff fe85 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8003066:	4602      	mov	r2, r0
 8003068:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	0b9b      	lsrs	r3, r3, #14
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	3301      	adds	r3, #1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	61bb      	str	r3, [r7, #24]
      break;
 800307c:	e004      	b.n	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800307e:	bf00      	nop
 8003080:	e002      	b.n	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003086:	bf00      	nop
    }
  }
  return (frequency);
 8003088:	69bb      	ldr	r3, [r7, #24]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	08003d2c 	.word	0x08003d2c
 800309c:	08003d3c 	.word	0x08003d3c
 80030a0:	007a1200 	.word	0x007a1200
 80030a4:	003d0900 	.word	0x003d0900
 80030a8:	aaaaaaab 	.word	0xaaaaaaab

080030ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe fac4 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fab2 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e041      	b.n	80031e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f839 	bl	80031e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 fa63 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_TIM_PWM_Start+0x24>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e022      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d109      	bne.n	800323a <HAL_TIM_PWM_Start+0x3e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	e015      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start+0x58>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e05e      	b.n	800332c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0x82>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800327c:	e013      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0x92>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Start+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800329c:	e003      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fc5c 	bl	8003b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003334 <HAL_TIM_PWM_Start+0x138>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d107      	bne.n	80032ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a18      	ldr	r2, [pc, #96]	@ (8003334 <HAL_TIM_PWM_Start+0x138>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_TIM_PWM_Start+0xfa>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e0:	d009      	beq.n	80032f6 <HAL_TIM_PWM_Start+0xfa>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a14      	ldr	r2, [pc, #80]	@ (8003338 <HAL_TIM_PWM_Start+0x13c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_TIM_PWM_Start+0xfa>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a12      	ldr	r2, [pc, #72]	@ (800333c <HAL_TIM_PWM_Start+0x140>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d111      	bne.n	800331a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b06      	cmp	r3, #6
 8003306:	d010      	beq.n	800332a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003318:	e007      	b.n	800332a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800

08003340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800335a:	2302      	movs	r3, #2
 800335c:	e0ae      	b.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	f200 809f 	bhi.w	80034ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800336e:	a201      	add	r2, pc, #4	@ (adr r2, 8003374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	080033a9 	.word	0x080033a9
 8003378:	080034ad 	.word	0x080034ad
 800337c:	080034ad 	.word	0x080034ad
 8003380:	080034ad 	.word	0x080034ad
 8003384:	080033e9 	.word	0x080033e9
 8003388:	080034ad 	.word	0x080034ad
 800338c:	080034ad 	.word	0x080034ad
 8003390:	080034ad 	.word	0x080034ad
 8003394:	0800342b 	.word	0x0800342b
 8003398:	080034ad 	.word	0x080034ad
 800339c:	080034ad 	.word	0x080034ad
 80033a0:	080034ad 	.word	0x080034ad
 80033a4:	0800346b 	.word	0x0800346b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f9be 	bl	8003730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0208 	orr.w	r2, r2, #8
 80033c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0204 	bic.w	r2, r2, #4
 80033d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6999      	ldr	r1, [r3, #24]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	619a      	str	r2, [r3, #24]
      break;
 80033e6:	e064      	b.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fa04 	bl	80037fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6999      	ldr	r1, [r3, #24]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	021a      	lsls	r2, r3, #8
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	619a      	str	r2, [r3, #24]
      break;
 8003428:	e043      	b.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fa4d 	bl	80038d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0208 	orr.w	r2, r2, #8
 8003444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0204 	bic.w	r2, r2, #4
 8003454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	61da      	str	r2, [r3, #28]
      break;
 8003468:	e023      	b.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fa97 	bl	80039a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69d9      	ldr	r1, [r3, #28]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	61da      	str	r2, [r3, #28]
      break;
 80034aa:	e002      	b.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	75fb      	strb	r3, [r7, #23]
      break;
 80034b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0b4      	b.n	800364a <HAL_TIM_ConfigClockSource+0x186>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003518:	d03e      	beq.n	8003598 <HAL_TIM_ConfigClockSource+0xd4>
 800351a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800351e:	f200 8087 	bhi.w	8003630 <HAL_TIM_ConfigClockSource+0x16c>
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003526:	f000 8086 	beq.w	8003636 <HAL_TIM_ConfigClockSource+0x172>
 800352a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352e:	d87f      	bhi.n	8003630 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b70      	cmp	r3, #112	@ 0x70
 8003532:	d01a      	beq.n	800356a <HAL_TIM_ConfigClockSource+0xa6>
 8003534:	2b70      	cmp	r3, #112	@ 0x70
 8003536:	d87b      	bhi.n	8003630 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b60      	cmp	r3, #96	@ 0x60
 800353a:	d050      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x11a>
 800353c:	2b60      	cmp	r3, #96	@ 0x60
 800353e:	d877      	bhi.n	8003630 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b50      	cmp	r3, #80	@ 0x50
 8003542:	d03c      	beq.n	80035be <HAL_TIM_ConfigClockSource+0xfa>
 8003544:	2b50      	cmp	r3, #80	@ 0x50
 8003546:	d873      	bhi.n	8003630 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b40      	cmp	r3, #64	@ 0x40
 800354a:	d058      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x13a>
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d86f      	bhi.n	8003630 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b30      	cmp	r3, #48	@ 0x30
 8003552:	d064      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x15a>
 8003554:	2b30      	cmp	r3, #48	@ 0x30
 8003556:	d86b      	bhi.n	8003630 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b20      	cmp	r3, #32
 800355a:	d060      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x15a>
 800355c:	2b20      	cmp	r3, #32
 800355e:	d867      	bhi.n	8003630 <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d05c      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x15a>
 8003564:	2b10      	cmp	r3, #16
 8003566:	d05a      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x15a>
 8003568:	e062      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800357a:	f000 fad8 	bl	8003b2e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800358c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	609a      	str	r2, [r3, #8]
      break;
 8003596:	e04f      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035a8:	f000 fac1 	bl	8003b2e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ba:	609a      	str	r2, [r3, #8]
      break;
 80035bc:	e03c      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ca:	461a      	mov	r2, r3
 80035cc:	f000 fa38 	bl	8003a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2150      	movs	r1, #80	@ 0x50
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fa8f 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80035dc:	e02c      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ea:	461a      	mov	r2, r3
 80035ec:	f000 fa56 	bl	8003a9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2160      	movs	r1, #96	@ 0x60
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fa7f 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80035fc:	e01c      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360a:	461a      	mov	r2, r3
 800360c:	f000 fa18 	bl	8003a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2140      	movs	r1, #64	@ 0x40
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fa6f 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 800361c:	e00c      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f000 fa66 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 800362e:	e003      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	e000      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2f      	ldr	r2, [pc, #188]	@ (8003724 <TIM_Base_SetConfig+0xd0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00b      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003672:	d007      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a2c      	ldr	r2, [pc, #176]	@ (8003728 <TIM_Base_SetConfig+0xd4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a2b      	ldr	r2, [pc, #172]	@ (800372c <TIM_Base_SetConfig+0xd8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d108      	bne.n	8003696 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <TIM_Base_SetConfig+0xd0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00b      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a4:	d007      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003728 <TIM_Base_SetConfig+0xd4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <TIM_Base_SetConfig+0xd8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d108      	bne.n	80036c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <TIM_Base_SetConfig+0xd0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d103      	bne.n	80036fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]
  }
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800

08003730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f023 0201 	bic.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 0302 	bic.w	r3, r3, #2
 8003778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <TIM_OC1_SetConfig+0xc8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10c      	bne.n	80037a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0308 	bic.w	r3, r3, #8
 8003792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a13      	ldr	r2, [pc, #76]	@ (80037f8 <TIM_OC1_SetConfig+0xc8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d111      	bne.n	80037d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	621a      	str	r2, [r3, #32]
}
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00

080037fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f023 0210 	bic.w	r2, r3, #16
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0320 	bic.w	r3, r3, #32
 8003846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a1d      	ldr	r2, [pc, #116]	@ (80038cc <TIM_OC2_SetConfig+0xd0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d10d      	bne.n	8003878 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a14      	ldr	r2, [pc, #80]	@ (80038cc <TIM_OC2_SetConfig+0xd0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d113      	bne.n	80038a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800388e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00

080038d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1d      	ldr	r2, [pc, #116]	@ (80039a0 <TIM_OC3_SetConfig+0xd0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d10d      	bne.n	800394a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <TIM_OC3_SetConfig+0xd0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d113      	bne.n	800397a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	621a      	str	r2, [r3, #32]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00

080039a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	031b      	lsls	r3, r3, #12
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a0f      	ldr	r2, [pc, #60]	@ (8003a3c <TIM_OC4_SetConfig+0x98>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d109      	bne.n	8003a18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40012c00 	.word	0x40012c00

08003a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f023 0201 	bic.w	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 030a 	bic.w	r3, r3, #10
 8003a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f023 0210 	bic.w	r2, r3, #16
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	031b      	lsls	r3, r3, #12
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	621a      	str	r2, [r3, #32]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f043 0307 	orr.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b087      	sub	sp, #28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	021a      	lsls	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	609a      	str	r2, [r3, #8]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	2201      	movs	r2, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1a      	ldr	r2, [r3, #32]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	401a      	ands	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e046      	b.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a16      	ldr	r2, [pc, #88]	@ (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c18:	d009      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a12      	ldr	r2, [pc, #72]	@ (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a10      	ldr	r2, [pc, #64]	@ (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10c      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800

08003c70 <memset>:
 8003c70:	4603      	mov	r3, r0
 8003c72:	4402      	add	r2, r0
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d100      	bne.n	8003c7a <memset+0xa>
 8003c78:	4770      	bx	lr
 8003c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7e:	e7f9      	b.n	8003c74 <memset+0x4>

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	2600      	movs	r6, #0
 8003c84:	4d0c      	ldr	r5, [pc, #48]	@ (8003cb8 <__libc_init_array+0x38>)
 8003c86:	4c0d      	ldr	r4, [pc, #52]	@ (8003cbc <__libc_init_array+0x3c>)
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	42a6      	cmp	r6, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	f000 f81a 	bl	8003cc8 <_init>
 8003c94:	2600      	movs	r6, #0
 8003c96:	4d0a      	ldr	r5, [pc, #40]	@ (8003cc0 <__libc_init_array+0x40>)
 8003c98:	4c0a      	ldr	r4, [pc, #40]	@ (8003cc4 <__libc_init_array+0x44>)
 8003c9a:	1b64      	subs	r4, r4, r5
 8003c9c:	10a4      	asrs	r4, r4, #2
 8003c9e:	42a6      	cmp	r6, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca8:	4798      	blx	r3
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb2:	4798      	blx	r3
 8003cb4:	3601      	adds	r6, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	08003d40 	.word	0x08003d40
 8003cbc:	08003d40 	.word	0x08003d40
 8003cc0:	08003d40 	.word	0x08003d40
 8003cc4:	08003d44 	.word	0x08003d44

08003cc8 <_init>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr

08003cd4 <_fini>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr
