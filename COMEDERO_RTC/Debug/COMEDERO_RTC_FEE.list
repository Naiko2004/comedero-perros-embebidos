
COMEDERO_RTC_FEE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004538  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004644  08004644  00005644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046fc  080046fc  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080046fc  080046fc  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080046fc  080046fc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004704  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000060  08004760  00006060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004760  000062a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e08e  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002796  00000000  00000000  00014113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000168b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c82  00000000  00000000  000178e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ae4  00000000  00000000  0001856a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013480  00000000  00000000  0003104e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d32d  00000000  00000000  000444ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d17fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004870  00000000  00000000  000d1840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d60b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	0800462c 	.word	0x0800462c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	0800462c 	.word	0x0800462c

0800014c <FEE_Write>:
 */
#include "FEE.h"
#include "string.h"

HAL_StatusTypeDef FEE_Write(uint32_t address, uint16_t *data, uint32_t dataSize)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	f5ad 6d88 	sub.w	sp, sp, #1088	@ 0x440
 8000152:	af00      	add	r7, sp, #0
 8000154:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000158:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 800015c:	6018      	str	r0, [r3, #0]
 800015e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000162:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 8000166:	6019      	str	r1, [r3, #0]
 8000168:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800016c:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000170:	601a      	str	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8000172:	2300      	movs	r3, #0
 8000174:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
    uint32_t pageAddress = address & ~(FLASH_PAGE_SIZE - 1); // Get the start address of the page
 8000178:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800017c:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000186:	f023 0303 	bic.w	r3, r3, #3
 800018a:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
    uint16_t buffer[FEE_BUFFER_LEN]; // Create a buffer to hold the entire page
    HAL_FLASH_Unlock();
 800018e:	f001 f899 	bl	80012c4 <HAL_FLASH_Unlock>
    // Read the entire page into the buffer
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 8000192:	2300      	movs	r3, #0
 8000194:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8000198:	e014      	b.n	80001c4 <FEE_Write+0x78>
        buffer[i] = *(__IO uint16_t*)(pageAddress + i * 2);
 800019a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800019e:	005a      	lsls	r2, r3, #1
 80001a0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80001a4:	4413      	add	r3, r2
 80001a6:	881b      	ldrh	r3, [r3, #0]
 80001a8:	b299      	uxth	r1, r3
 80001aa:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80001ae:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80001b2:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 80001b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 80001ba:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80001be:	3301      	adds	r3, #1
 80001c0:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 80001c4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80001c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80001cc:	d3e5      	bcc.n	800019a <FEE_Write+0x4e>
    }
    // Modify the values at the desired address
    uint32_t offset = address - pageAddress;
 80001ce:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80001d2:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80001dc:	1ad3      	subs	r3, r2, r3
 80001de:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
    for (uint32_t i = 0; i < dataSize; i++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80001e8:	e01a      	b.n	8000220 <FEE_Write+0xd4>
        buffer[offset / 2 + i] = data[i];
 80001ea:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80001ee:	005b      	lsls	r3, r3, #1
 80001f0:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 80001f4:	f5a2 6287 	sub.w	r2, r2, #1080	@ 0x438
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	4413      	add	r3, r2
 80001fc:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8000200:	0851      	lsrs	r1, r2, #1
 8000202:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8000206:	440a      	add	r2, r1
 8000208:	8819      	ldrh	r1, [r3, #0]
 800020a:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800020e:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8000212:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint32_t i = 0; i < dataSize; i++) {
 8000216:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800021a:	3301      	adds	r3, #1
 800021c:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8000220:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000224:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000228:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d3db      	bcc.n	80001ea <FEE_Write+0x9e>
    }
    // Erase the page
    FLASH_EraseInitTypeDef eraseInitStruct;
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000232:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000236:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
    eraseInitStruct.PageAddress = pageAddress;
 800023e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000242:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000246:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 800024a:	609a      	str	r2, [r3, #8]
    eraseInitStruct.NbPages = 1;
 800024c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000250:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000254:	2201      	movs	r2, #1
 8000256:	60da      	str	r2, [r3, #12]
    uint32_t pageError;
    status = HAL_FLASHEx_Erase(&eraseInitStruct, &pageError);
 8000258:	f107 0214 	add.w	r2, r7, #20
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4611      	mov	r1, r2
 8000262:	4618      	mov	r0, r3
 8000264:	f001 f916 	bl	8001494 <HAL_FLASHEx_Erase>
 8000268:	4603      	mov	r3, r0
 800026a:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
    if (status != HAL_OK) {
 800026e:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 8000272:	2b00      	cmp	r3, #0
 8000274:	d004      	beq.n	8000280 <FEE_Write+0x134>
        HAL_FLASH_Lock();
 8000276:	f001 f84b 	bl	8001310 <HAL_FLASH_Lock>
        return status;
 800027a:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 800027e:	e031      	b.n	80002e4 <FEE_Write+0x198>
    }
    // Write the modified buffer back to the page
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 8000286:	e022      	b.n	80002ce <FEE_Write+0x182>
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, pageAddress + i * 2, buffer[i]);
 8000288:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800028c:	005a      	lsls	r2, r3, #1
 800028e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8000292:	18d1      	adds	r1, r2, r3
 8000294:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000298:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800029c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 80002a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	2200      	movs	r2, #0
 80002a8:	461c      	mov	r4, r3
 80002aa:	4615      	mov	r5, r2
 80002ac:	4622      	mov	r2, r4
 80002ae:	462b      	mov	r3, r5
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 ff97 	bl	80011e4 <HAL_FLASH_Program>
 80002b6:	4603      	mov	r3, r0
 80002b8:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
        if (status != HAL_OK) {
 80002bc:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d10a      	bne.n	80002da <FEE_Write+0x18e>
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 80002c4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80002c8:	3301      	adds	r3, #1
 80002ca:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 80002ce:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80002d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80002d6:	d3d7      	bcc.n	8000288 <FEE_Write+0x13c>
 80002d8:	e000      	b.n	80002dc <FEE_Write+0x190>
            break;
 80002da:	bf00      	nop
        }
    }
    HAL_FLASH_Lock();
 80002dc:	f001 f818 	bl	8001310 <HAL_FLASH_Lock>
    return status;
 80002e0:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	f507 6788 	add.w	r7, r7, #1088	@ 0x440
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bdb0      	pop	{r4, r5, r7, pc}

080002ee <FEE_Read>:

void FEE_Read(uint32_t address, uint16_t *data, uint32_t dataSize)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b087      	sub	sp, #28
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	60f8      	str	r0, [r7, #12]
 80002f6:	60b9      	str	r1, [r7, #8]
 80002f8:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < dataSize; i++) {
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	e00d      	b.n	800031c <FEE_Read+0x2e>
        data[i] = *(__IO uint16_t*)address;
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	440b      	add	r3, r1
 800030a:	8812      	ldrh	r2, [r2, #0]
 800030c:	b292      	uxth	r2, r2
 800030e:	801a      	strh	r2, [r3, #0]
        address += 2;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3302      	adds	r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < dataSize; i++) {
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	3301      	adds	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	697a      	ldr	r2, [r7, #20]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	d3ed      	bcc.n	8000300 <FEE_Read+0x12>
    }
}
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	371c      	adds	r7, #28
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <FEE_WriteData>:

// Generic APIs For Any Data Type
void FEE_WriteData(uint32_t address, void *data, size_t dataSize)
{
 8000330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000334:	b087      	sub	sp, #28
 8000336:	af00      	add	r7, sp, #0
 8000338:	60f8      	str	r0, [r7, #12]
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	607a      	str	r2, [r7, #4]
 800033e:	466b      	mov	r3, sp
 8000340:	461e      	mov	r6, r3
    uint16_t bytes[dataSize / 2];
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	0859      	lsrs	r1, r3, #1
 8000346:	460b      	mov	r3, r1
 8000348:	3b01      	subs	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	2300      	movs	r3, #0
 800034e:	4688      	mov	r8, r1
 8000350:	4699      	mov	r9, r3
 8000352:	f04f 0200 	mov.w	r2, #0
 8000356:	f04f 0300 	mov.w	r3, #0
 800035a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800035e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000362:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000366:	2300      	movs	r3, #0
 8000368:	460c      	mov	r4, r1
 800036a:	461d      	mov	r5, r3
 800036c:	f04f 0200 	mov.w	r2, #0
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	012b      	lsls	r3, r5, #4
 8000376:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800037a:	0122      	lsls	r2, r4, #4
 800037c:	004b      	lsls	r3, r1, #1
 800037e:	3307      	adds	r3, #7
 8000380:	08db      	lsrs	r3, r3, #3
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	ebad 0d03 	sub.w	sp, sp, r3
 8000388:	466b      	mov	r3, sp
 800038a:	3301      	adds	r3, #1
 800038c:	085b      	lsrs	r3, r3, #1
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	613b      	str	r3, [r7, #16]
    memcpy(bytes, data, dataSize);
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	68b9      	ldr	r1, [r7, #8]
 8000396:	6938      	ldr	r0, [r7, #16]
 8000398:	f003 fcee 	bl	8003d78 <memcpy>
    FEE_Write(address, bytes, dataSize);
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	6939      	ldr	r1, [r7, #16]
 80003a0:	68f8      	ldr	r0, [r7, #12]
 80003a2:	f7ff fed3 	bl	800014c <FEE_Write>
 80003a6:	46b5      	mov	sp, r6
}
 80003a8:	bf00      	nop
 80003aa:	371c      	adds	r7, #28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080003b2 <FEE_ReadData>:

void FEE_ReadData(uint32_t address, void *data, size_t dataSize)
{
 80003b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
 80003c0:	466b      	mov	r3, sp
 80003c2:	461e      	mov	r6, r3
    uint16_t bytes[dataSize / 2];
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	0859      	lsrs	r1, r3, #1
 80003c8:	460b      	mov	r3, r1
 80003ca:	3b01      	subs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
 80003ce:	2300      	movs	r3, #0
 80003d0:	4688      	mov	r8, r1
 80003d2:	4699      	mov	r9, r3
 80003d4:	f04f 0200 	mov.w	r2, #0
 80003d8:	f04f 0300 	mov.w	r3, #0
 80003dc:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80003e0:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80003e4:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80003e8:	2300      	movs	r3, #0
 80003ea:	460c      	mov	r4, r1
 80003ec:	461d      	mov	r5, r3
 80003ee:	f04f 0200 	mov.w	r2, #0
 80003f2:	f04f 0300 	mov.w	r3, #0
 80003f6:	012b      	lsls	r3, r5, #4
 80003f8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80003fc:	0122      	lsls	r2, r4, #4
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	3307      	adds	r3, #7
 8000402:	08db      	lsrs	r3, r3, #3
 8000404:	00db      	lsls	r3, r3, #3
 8000406:	ebad 0d03 	sub.w	sp, sp, r3
 800040a:	466b      	mov	r3, sp
 800040c:	3301      	adds	r3, #1
 800040e:	085b      	lsrs	r3, r3, #1
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	613b      	str	r3, [r7, #16]
    FEE_Read(address, bytes, dataSize);
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	6939      	ldr	r1, [r7, #16]
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f7ff ff68 	bl	80002ee <FEE_Read>
    memcpy(data, bytes, dataSize);
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	6939      	ldr	r1, [r7, #16]
 8000422:	68b8      	ldr	r0, [r7, #8]
 8000424:	f003 fca8 	bl	8003d78 <memcpy>
 8000428:	46b5      	mov	sp, r6
}
 800042a:	bf00      	nop
 800042c:	371c      	adds	r7, #28
 800042e:	46bd      	mov	sp, r7
 8000430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000434 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af02      	add	r7, sp, #8
 800043a:	4603      	mov	r3, r0
 800043c:	460a      	mov	r2, r1
 800043e:	71fb      	strb	r3, [r7, #7]
 8000440:	4613      	mov	r3, r2
 8000442:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	4a13      	ldr	r2, [pc, #76]	@ (8000494 <I2C_LCD_ExpanderWrite+0x60>)
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4413      	add	r3, r2
 800044c:	785a      	ldrb	r2, [r3, #1]
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	4313      	orrs	r3, r2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000456:	79fa      	ldrb	r2, [r7, #7]
 8000458:	490f      	ldr	r1, [pc, #60]	@ (8000498 <I2C_LCD_ExpanderWrite+0x64>)
 800045a:	4613      	mov	r3, r2
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	4413      	add	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	440b      	add	r3, r1
 8000464:	3304      	adds	r3, #4
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	79fa      	ldrb	r2, [r7, #7]
 800046a:	490b      	ldr	r1, [pc, #44]	@ (8000498 <I2C_LCD_ExpanderWrite+0x64>)
 800046c:	4613      	mov	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4413      	add	r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	440b      	add	r3, r1
 8000476:	3308      	adds	r3, #8
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	b299      	uxth	r1, r3
 800047e:	f107 020f 	add.w	r2, r7, #15
 8000482:	2364      	movs	r3, #100	@ 0x64
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2301      	movs	r3, #1
 8000488:	f001 fb74 	bl	8001b74 <HAL_I2C_Master_Transmit>
}
 800048c:	bf00      	nop
 800048e:	3710      	adds	r7, #16
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000007c 	.word	0x2000007c
 8000498:	0800467c 	.word	0x0800467c

0800049c <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	460a      	mov	r2, r1
 80004a6:	71fb      	strb	r3, [r7, #7]
 80004a8:	4613      	mov	r3, r2
 80004aa:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 80004ac:	79bb      	ldrb	r3, [r7, #6]
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ffbb 	bl	8000434 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 80004be:	4b22      	ldr	r3, [pc, #136]	@ (8000548 <I2C_LCD_EnPulse+0xac>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	4b21      	ldr	r3, [pc, #132]	@ (800054c <I2C_LCD_EnPulse+0xb0>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a21      	ldr	r2, [pc, #132]	@ (8000550 <I2C_LCD_EnPulse+0xb4>)
 80004ca:	fba2 2303 	umull	r2, r3, r2, r3
 80004ce:	0c9b      	lsrs	r3, r3, #18
 80004d0:	005a      	lsls	r2, r3, #1
 80004d2:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <I2C_LCD_EnPulse+0xb0>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	491e      	ldr	r1, [pc, #120]	@ (8000550 <I2C_LCD_EnPulse+0xb4>)
 80004d8:	fba1 1303 	umull	r1, r3, r1, r3
 80004dc:	0c9b      	lsrs	r3, r3, #18
 80004de:	085b      	lsrs	r3, r3, #1
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <I2C_LCD_EnPulse+0xac>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	697a      	ldr	r2, [r7, #20]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	693a      	ldr	r2, [r7, #16]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d8f8      	bhi.n	80004e4 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	f023 0304 	bic.w	r3, r3, #4
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff98 	bl	8000434 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <I2C_LCD_EnPulse+0xac>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <I2C_LCD_EnPulse+0xb0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <I2C_LCD_EnPulse+0xb4>)
 8000510:	fba2 2303 	umull	r2, r3, r2, r3
 8000514:	0c9b      	lsrs	r3, r3, #18
 8000516:	2232      	movs	r2, #50	@ 0x32
 8000518:	fb03 f202 	mul.w	r2, r3, r2
 800051c:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <I2C_LCD_EnPulse+0xb0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	490b      	ldr	r1, [pc, #44]	@ (8000550 <I2C_LCD_EnPulse+0xb4>)
 8000522:	fba1 1303 	umull	r1, r3, r1, r3
 8000526:	0c9b      	lsrs	r3, r3, #18
 8000528:	085b      	lsrs	r3, r3, #1
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <I2C_LCD_EnPulse+0xac>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	429a      	cmp	r2, r3
 800053a:	d8f8      	bhi.n	800052e <I2C_LCD_EnPulse+0x92>
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	e000e010 	.word	0xe000e010
 800054c:	20000000 	.word	0x20000000
 8000550:	431bde83 	.word	0x431bde83

08000554 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	460a      	mov	r2, r1
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	4613      	mov	r3, r2
 8000562:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8000564:	79ba      	ldrb	r2, [r7, #6]
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4611      	mov	r1, r2
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ff62 	bl	8000434 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8000570:	79ba      	ldrb	r2, [r7, #6]
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff90 	bl	800049c <I2C_LCD_EnPulse>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	460b      	mov	r3, r1
 8000590:	71bb      	strb	r3, [r7, #6]
 8000592:	4613      	mov	r3, r2
 8000594:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	f023 030f 	bic.w	r3, r3, #15
 800059c:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	797b      	ldrb	r3, [r7, #5]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ffcf 	bl	8000554 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 80005b6:	7bba      	ldrb	r2, [r7, #14]
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffc6 	bl	8000554 <I2C_LCD_Write4Bits>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80005e0:	79b9      	ldrb	r1, [r7, #6]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2200      	movs	r2, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffcc 	bl	8000584 <I2C_LCD_Send>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8000604:	79b9      	ldrb	r1, [r7, #6]
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2201      	movs	r2, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffba 	bl	8000584 <I2C_LCD_Send>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	@ 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8000622:	bf00      	nop
 8000624:	f000 fccc 	bl	8000fc0 <HAL_GetTick>
 8000628:	4603      	mov	r3, r0
 800062a:	2b31      	cmp	r3, #49	@ 0x31
 800062c:	d9fa      	bls.n	8000624 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2130      	movs	r1, #48	@ 0x30
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ffcc 	bl	80005d0 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
 800063c:	e01f      	b.n	800067e <I2C_LCD_Init+0x66>
 800063e:	4b4b      	ldr	r3, [pc, #300]	@ (800076c <I2C_LCD_Init+0x154>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	4b4a      	ldr	r3, [pc, #296]	@ (8000770 <I2C_LCD_Init+0x158>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a4a      	ldr	r2, [pc, #296]	@ (8000774 <I2C_LCD_Init+0x15c>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	0c9b      	lsrs	r3, r3, #18
 8000650:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000654:	fb03 f202 	mul.w	r2, r3, r2
 8000658:	4b45      	ldr	r3, [pc, #276]	@ (8000770 <I2C_LCD_Init+0x158>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4945      	ldr	r1, [pc, #276]	@ (8000774 <I2C_LCD_Init+0x15c>)
 800065e:	fba1 1303 	umull	r1, r3, r1, r3
 8000662:	0c9b      	lsrs	r3, r3, #18
 8000664:	085b      	lsrs	r3, r3, #1
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b40      	ldr	r3, [pc, #256]	@ (800076c <I2C_LCD_Init+0x154>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	429a      	cmp	r2, r3
 8000676:	d8f8      	bhi.n	800066a <I2C_LCD_Init+0x52>
 8000678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067a:	3301      	adds	r3, #1
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
 800067e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000680:	2b04      	cmp	r3, #4
 8000682:	d9dc      	bls.n	800063e <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2130      	movs	r1, #48	@ 0x30
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffa1 	bl	80005d0 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
 8000692:	e01f      	b.n	80006d4 <I2C_LCD_Init+0xbc>
 8000694:	4b35      	ldr	r3, [pc, #212]	@ (800076c <I2C_LCD_Init+0x154>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <I2C_LCD_Init+0x158>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a35      	ldr	r2, [pc, #212]	@ (8000774 <I2C_LCD_Init+0x15c>)
 80006a0:	fba2 2303 	umull	r2, r3, r2, r3
 80006a4:	0c9b      	lsrs	r3, r3, #18
 80006a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006aa:	fb03 f202 	mul.w	r2, r3, r2
 80006ae:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <I2C_LCD_Init+0x158>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4930      	ldr	r1, [pc, #192]	@ (8000774 <I2C_LCD_Init+0x15c>)
 80006b4:	fba1 1303 	umull	r1, r3, r1, r3
 80006b8:	0c9b      	lsrs	r3, r3, #18
 80006ba:	085b      	lsrs	r3, r3, #1
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <I2C_LCD_Init+0x154>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d8f8      	bhi.n	80006c0 <I2C_LCD_Init+0xa8>
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	3301      	adds	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	d9dc      	bls.n	8000694 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2130      	movs	r1, #48	@ 0x30
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff76 	bl	80005d0 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <I2C_LCD_Init+0x154>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	61fb      	str	r3, [r7, #28]
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <I2C_LCD_Init+0x158>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <I2C_LCD_Init+0x15c>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	0c9b      	lsrs	r3, r3, #18
 80006f6:	2296      	movs	r2, #150	@ 0x96
 80006f8:	fb03 f202 	mul.w	r2, r3, r2
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <I2C_LCD_Init+0x158>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	491c      	ldr	r1, [pc, #112]	@ (8000774 <I2C_LCD_Init+0x15c>)
 8000702:	fba1 1303 	umull	r1, r3, r1, r3
 8000706:	0c9b      	lsrs	r3, r3, #18
 8000708:	085b      	lsrs	r3, r3, #1
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <I2C_LCD_Init+0x154>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	69fa      	ldr	r2, [r7, #28]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	69ba      	ldr	r2, [r7, #24]
 8000718:	429a      	cmp	r2, r3
 800071a:	d8f8      	bhi.n	800070e <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2102      	movs	r1, #2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff55 	bl	80005d0 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2128      	movs	r1, #40	@ 0x28
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff50 	bl	80005d0 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	210c      	movs	r1, #12
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff4b 	bl	80005d0 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2106      	movs	r1, #6
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff46 	bl	80005d0 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <I2C_LCD_Init+0x160>)
 8000748:	2104      	movs	r1, #4
 800074a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4a09      	ldr	r2, [pc, #36]	@ (8000778 <I2C_LCD_Init+0x160>)
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	2208      	movs	r2, #8
 8000758:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f80d 	bl	800077c <I2C_LCD_Clear>
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	@ 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010
 8000770:	20000000 	.word	0x20000000
 8000774:	431bde83 	.word	0x431bde83
 8000778:	2000007c 	.word	0x2000007c

0800077c <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2101      	movs	r1, #1
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff20 	bl	80005d0 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e01f      	b.n	80007d6 <I2C_LCD_Clear+0x5a>
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <I2C_LCD_Clear+0x6c>)
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <I2C_LCD_Clear+0x70>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <I2C_LCD_Clear+0x74>)
 80007a2:	fba2 2303 	umull	r2, r3, r2, r3
 80007a6:	0c9b      	lsrs	r3, r3, #18
 80007a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007ac:	fb03 f202 	mul.w	r2, r3, r2
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <I2C_LCD_Clear+0x70>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	490e      	ldr	r1, [pc, #56]	@ (80007f0 <I2C_LCD_Clear+0x74>)
 80007b6:	fba1 1303 	umull	r1, r3, r1, r3
 80007ba:	0c9b      	lsrs	r3, r3, #18
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <I2C_LCD_Clear+0x6c>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d8f8      	bhi.n	80007c2 <I2C_LCD_Clear+0x46>
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d9dc      	bls.n	8000796 <I2C_LCD_Clear+0x1a>
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010
 80007ec:	20000000 	.word	0x20000000
 80007f0:	431bde83 	.word	0x431bde83

080007f4 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	460b      	mov	r3, r1
 8000800:	71bb      	strb	r3, [r7, #6]
 8000802:	4613      	mov	r3, r2
 8000804:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <I2C_LCD_SetCursor+0x7c>)
 8000808:	f107 0408 	add.w	r4, r7, #8
 800080c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	4917      	ldr	r1, [pc, #92]	@ (8000874 <I2C_LCD_SetCursor+0x80>)
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	330a      	adds	r3, #10
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	797a      	ldrb	r2, [r7, #5]
 8000826:	429a      	cmp	r2, r3
 8000828:	d90a      	bls.n	8000840 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 800082a:	79fa      	ldrb	r2, [r7, #7]
 800082c:	4911      	ldr	r1, [pc, #68]	@ (8000874 <I2C_LCD_SetCursor+0x80>)
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	440b      	add	r3, r1
 8000838:	330a      	adds	r3, #10
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8000840:	797b      	ldrb	r3, [r7, #5]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	3318      	adds	r3, #24
 8000846:	443b      	add	r3, r7
 8000848:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	4413      	add	r3, r2
 8000852:	b2db      	uxtb	r3, r3
 8000854:	b25b      	sxtb	r3, r3
 8000856:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800085a:	b25b      	sxtb	r3, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff feb4 	bl	80005d0 <I2C_LCD_Cmd>
}
 8000868:	bf00      	nop
 800086a:	371c      	adds	r7, #28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	08004644 	.word	0x08004644
 8000874:	0800467c 	.word	0x0800467c

08000878 <I2C_LCD_WriteChar>:

void I2C_LCD_WriteChar(uint8_t I2C_LCD_InstanceIndex, char Ch)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	460a      	mov	r2, r1
 8000882:	71fb      	strb	r3, [r7, #7]
 8000884:	4613      	mov	r3, r2
 8000886:	71bb      	strb	r3, [r7, #6]
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
 8000888:	79ba      	ldrb	r2, [r7, #6]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff feb0 	bl	80005f4 <I2C_LCD_Data>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <I2C_LCD_WriteString>:

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 80008a8:	e008      	b.n	80008bc <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	603a      	str	r2, [r7, #0]
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe9c 	bl	80005f4 <I2C_LCD_Data>
    while (*Str)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f2      	bne.n	80008aa <I2C_LCD_WriteString+0xe>
    }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <I2C_LCD_WriteInt32>:
{
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CharIndex, RS);
}

// Funciones NICO
void I2C_LCD_WriteInt32(uint8_t I2C_LCD_InstanceIndex, int32_t Number){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
	char buffer[12];
	sprintf(buffer, "%ld", (long)Number);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	4907      	ldr	r1, [pc, #28]	@ (8000900 <I2C_LCD_WriteInt32+0x30>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 f9f1 	bl	8003ccc <siprintf>
	I2C_LCD_WriteString(I2C_LCD_InstanceIndex, buffer);
 80008ea:	f107 020c 	add.w	r2, r7, #12
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffd2 	bl	800089c <I2C_LCD_WriteString>
};
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	08004654 	.word	0x08004654

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint16_t i = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090e:	f000 faff 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000912:	f000 f86b 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000916:	f000 f989 	bl	8000c2c <MX_GPIO_Init>
  MX_TIM2_Init();
 800091a:	f000 f93b 	bl	8000b94 <MX_TIM2_Init>
  MX_I2C1_Init();
 800091e:	f000 f8c1 	bl	8000aa4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000922:	f000 f8ed 	bl	8000b00 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  I2C_LCD_Init(MyI2C_LCD);
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff fe76 	bl	8000618 <I2C_LCD_Init>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff5f 	bl	80007f4 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "Hora actual: ");
 8000936:	4928      	ldr	r1, [pc, #160]	@ (80009d8 <main+0xd4>)
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ffaf 	bl	800089c <I2C_LCD_WriteString>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff ff56 	bl	80007f4 <I2C_LCD_SetCursor>

  FEE_ReadData(FEE_START_ADDRESS, &gTime, sizeof(RTC_TimeTypeDef));
 8000948:	2203      	movs	r2, #3
 800094a:	4924      	ldr	r1, [pc, #144]	@ (80009dc <main+0xd8>)
 800094c:	4824      	ldr	r0, [pc, #144]	@ (80009e0 <main+0xdc>)
 800094e:	f7ff fd30 	bl	80003b2 <FEE_ReadData>
  HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000952:	2200      	movs	r2, #0
 8000954:	4921      	ldr	r1, [pc, #132]	@ (80009dc <main+0xd8>)
 8000956:	4823      	ldr	r0, [pc, #140]	@ (80009e4 <main+0xe0>)
 8000958:	f002 fa78 	bl	8002e4c <HAL_RTC_SetTime>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800095c:	2200      	movs	r2, #0
 800095e:	491f      	ldr	r1, [pc, #124]	@ (80009dc <main+0xd8>)
 8000960:	4820      	ldr	r0, [pc, #128]	@ (80009e4 <main+0xe0>)
 8000962:	f002 fb0b 	bl	8002f7c <HAL_RTC_GetTime>
	  I2C_LCD_WriteInt32(MyI2C_LCD, (int32_t)gTime.Hours);
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <main+0xd8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff ffaf 	bl	80008d0 <I2C_LCD_WriteInt32>
	  I2C_LCD_WriteChar(MyI2C_LCD, ':');
 8000972:	213a      	movs	r1, #58	@ 0x3a
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff7f 	bl	8000878 <I2C_LCD_WriteChar>
	  I2C_LCD_WriteInt32(MyI2C_LCD, (int32_t)gTime.Minutes);
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <main+0xd8>)
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	4619      	mov	r1, r3
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ffa5 	bl	80008d0 <I2C_LCD_WriteInt32>
	  I2C_LCD_WriteChar(MyI2C_LCD, ':');
 8000986:	213a      	movs	r1, #58	@ 0x3a
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ff75 	bl	8000878 <I2C_LCD_WriteChar>
	  I2C_LCD_WriteInt32(MyI2C_LCD, (int32_t)gTime.Seconds);
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <main+0xd8>)
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	4619      	mov	r1, r3
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff9b 	bl	80008d0 <I2C_LCD_WriteInt32>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 800099a:	2201      	movs	r2, #1
 800099c:	2100      	movs	r1, #0
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff ff28 	bl	80007f4 <I2C_LCD_SetCursor>
	  HAL_Delay(1000);
 80009a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a8:	f000 fb14 	bl	8000fd4 <HAL_Delay>
	  I2C_LCD_WriteString(MyI2C_LCD, "                ");
 80009ac:	490e      	ldr	r1, [pc, #56]	@ (80009e8 <main+0xe4>)
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff ff74 	bl	800089c <I2C_LCD_WriteString>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2100      	movs	r1, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff1b 	bl	80007f4 <I2C_LCD_SetCursor>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i++;
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	3301      	adds	r3, #1
 80009c2:	80fb      	strh	r3, [r7, #6]
	  if(i == 300)
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80009ca:	d1c7      	bne.n	800095c <main+0x58>
	  {
		  FEE_WriteData(FEE_START_ADDRESS, &gTime, sizeof(RTC_TimeTypeDef));
 80009cc:	2203      	movs	r2, #3
 80009ce:	4903      	ldr	r1, [pc, #12]	@ (80009dc <main+0xd8>)
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <main+0xdc>)
 80009d2:	f7ff fcad 	bl	8000330 <FEE_WriteData>
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80009d6:	e7c1      	b.n	800095c <main+0x58>
 80009d8:	08004658 	.word	0x08004658
 80009dc:	20000130 	.word	0x20000130
 80009e0:	0800f000 	.word	0x0800f000
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	08004668 	.word	0x08004668

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	@ 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009f6:	2228      	movs	r2, #40	@ 0x28
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 f988 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2309      	movs	r3, #9
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fbf9 	bl	800223c <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a50:	f000 f91a 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fe66 	bl	8002740 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a7a:	f000 f905 	bl	8000c88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a86:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 ffe6 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a96:	f000 f8f7 	bl	8000c88 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3750      	adds	r7, #80	@ 0x50
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	@ (8000af8 <MX_I2C1_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <MX_I2C1_Init+0x58>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ae2:	f000 ff03 	bl	80018ec <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 f8cc 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000080 	.word	0x20000080
 8000af8:	40005400 	.word	0x40005400
 8000afc:	000186a0 	.word	0x000186a0

08000b00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2100      	movs	r1, #0
 8000b0a:	460a      	mov	r2, r1
 8000b0c:	801a      	strh	r2, [r3, #0]
 8000b0e:	460a      	mov	r2, r1
 8000b10:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b16:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <MX_RTC_Init+0x8c>)
 8000b18:	4a1d      	ldr	r2, [pc, #116]	@ (8000b90 <MX_RTC_Init+0x90>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <MX_RTC_Init+0x8c>)
 8000b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b22:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000b24:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <MX_RTC_Init+0x8c>)
 8000b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b2a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b2c:	4817      	ldr	r0, [pc, #92]	@ (8000b8c <MX_RTC_Init+0x8c>)
 8000b2e:	f002 f901 	bl	8002d34 <HAL_RTC_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000b38:	f000 f8a6 	bl	8000c88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 8000b3c:	2316      	movs	r3, #22
 8000b3e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8000b40:	2310      	movs	r3, #16
 8000b42:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <MX_RTC_Init+0x8c>)
 8000b50:	f002 f97c 	bl	8002e4c <HAL_RTC_SetTime>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000b5a:	f000 f895 	bl	8000c88 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000b62:	2301      	movs	r3, #1
 8000b64:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_RTC_Init+0x8c>)
 8000b76:	f002 fad9 	bl	800312c <HAL_RTC_SetDate>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000b80:	f000 f882 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000d4 	.word	0x200000d4
 8000b90:	40002800 	.word	0x40002800

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000bba:	220f      	movs	r2, #15
 8000bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000bc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd8:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000bda:	f002 fdff 	bl	80037dc <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000be4:	f000 f850 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000bf6:	f002 fe40 	bl	800387a <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c00:	f000 f842 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_TIM2_Init+0x94>)
 8000c12:	f002 fffd 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f834 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000e8 	.word	0x200000e8

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0320 	and.w	r3, r3, #32
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6193      	str	r3, [r2, #24]
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <MX_GPIO_Init+0x58>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40021000 	.word	0x40021000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_MspInit+0x60>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_MspInit+0x60>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a15      	ldr	r2, [pc, #84]	@ (8000d68 <HAL_I2C_MspInit+0x70>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d123      	bne.n	8000d60 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a13      	ldr	r2, [pc, #76]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d30:	23c0      	movs	r3, #192	@ 0xc0
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <HAL_I2C_MspInit+0x78>)
 8000d44:	f000 fc4e 	bl	80015e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d52:	61d3      	str	r3, [r2, #28]
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <HAL_RTC_MspInit+0x3c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d110      	bne.n	8000da8 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000d86:	f001 fa4d 	bl	8002224 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_RTC_MspInit+0x40>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <HAL_RTC_MspInit+0x40>)
 8000d90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <HAL_RTC_MspInit+0x40>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000da2:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_RTC_MspInit+0x44>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40002800 	.word	0x40002800
 8000db4:	40021000 	.word	0x40021000
 8000db8:	4242043c 	.word	0x4242043c

08000dbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dcc:	d10b      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_TIM_Base_MspInit+0x34>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <HAL_TIM_Base_MspInit+0x34>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_TIM_Base_MspInit+0x34>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 f8aa 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a14      	ldr	r2, [pc, #80]	@ (8000ea8 <_sbrk+0x5c>)
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <_sbrk+0x60>)
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <_sbrk+0x64>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <_sbrk+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d207      	bcs.n	8000e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e7c:	f002 ff50 	bl	8003d20 <__errno>
 8000e80:	4603      	mov	r3, r0
 8000e82:	220c      	movs	r2, #12
 8000e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	e009      	b.n	8000ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e92:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <_sbrk+0x64>)
 8000e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20005000 	.word	0x20005000
 8000eac:	00000400 	.word	0x00000400
 8000eb0:	20000134 	.word	0x20000134
 8000eb4:	200002a8 	.word	0x200002a8

08000eb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff fff8 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eca:	490c      	ldr	r1, [pc, #48]	@ (8000efc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ee0:	4c09      	ldr	r4, [pc, #36]	@ (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f002 ff1d 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef2:	f7ff fd07 	bl	8000904 <main>
  bx lr
 8000ef6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f00:	08004704 	.word	0x08004704
  ldr r2, =_sbss
 8000f04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f08:	200002a8 	.word	0x200002a8

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_Init+0x28>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_Init+0x28>)
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f92b 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	200f      	movs	r0, #15
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff feb2 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40022000 	.word	0x40022000

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f935 	bl	80011ca <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f90b 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <HAL_IncTick+0x1c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a03      	ldr	r2, [pc, #12]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000138 	.word	0x20000138

08000fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	@ (8000fd0 <HAL_GetTick+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000138 	.word	0x20000138

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff fff0 	bl	8000fc0 <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffe0 	bl	8000fc0 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff90 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff49 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff5e 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff90 	bl	80010d4 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5f 	bl	8001080 <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffb0 	bl	8001138 <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011fe:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <HAL_FLASH_Program+0xd8>)
 8001200:	7e1b      	ldrb	r3, [r3, #24]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_FLASH_Program+0x26>
 8001206:	2302      	movs	r3, #2
 8001208:	e054      	b.n	80012b4 <HAL_FLASH_Program+0xd0>
 800120a:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <HAL_FLASH_Program+0xd8>)
 800120c:	2201      	movs	r2, #1
 800120e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001210:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001214:	f000 f8a8 	bl	8001368 <FLASH_WaitForLastOperation>
 8001218:	4603      	mov	r3, r0
 800121a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d144      	bne.n	80012ac <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001228:	2301      	movs	r3, #1
 800122a:	757b      	strb	r3, [r7, #21]
 800122c:	e007      	b.n	800123e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d102      	bne.n	800123a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001234:	2302      	movs	r3, #2
 8001236:	757b      	strb	r3, [r7, #21]
 8001238:	e001      	b.n	800123e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800123a:	2304      	movs	r3, #4
 800123c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800123e:	2300      	movs	r3, #0
 8001240:	75bb      	strb	r3, [r7, #22]
 8001242:	e02d      	b.n	80012a0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001244:	7dbb      	ldrb	r3, [r7, #22]
 8001246:	005a      	lsls	r2, r3, #1
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	eb02 0c03 	add.w	ip, r2, r3
 800124e:	7dbb      	ldrb	r3, [r7, #22]
 8001250:	0119      	lsls	r1, r3, #4
 8001252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001256:	f1c1 0620 	rsb	r6, r1, #32
 800125a:	f1a1 0020 	sub.w	r0, r1, #32
 800125e:	fa22 f401 	lsr.w	r4, r2, r1
 8001262:	fa03 f606 	lsl.w	r6, r3, r6
 8001266:	4334      	orrs	r4, r6
 8001268:	fa23 f000 	lsr.w	r0, r3, r0
 800126c:	4304      	orrs	r4, r0
 800126e:	fa23 f501 	lsr.w	r5, r3, r1
 8001272:	b2a3      	uxth	r3, r4
 8001274:	4619      	mov	r1, r3
 8001276:	4660      	mov	r0, ip
 8001278:	f000 f85a 	bl	8001330 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800127c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001280:	f000 f872 	bl	8001368 <FLASH_WaitForLastOperation>
 8001284:	4603      	mov	r3, r0
 8001286:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <HAL_FLASH_Program+0xdc>)
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	4a0c      	ldr	r2, [pc, #48]	@ (80012c0 <HAL_FLASH_Program+0xdc>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d107      	bne.n	80012aa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	3301      	adds	r3, #1
 800129e:	75bb      	strb	r3, [r7, #22]
 80012a0:	7dba      	ldrb	r2, [r7, #22]
 80012a2:	7d7b      	ldrb	r3, [r7, #21]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3cd      	bcc.n	8001244 <HAL_FLASH_Program+0x60>
 80012a8:	e000      	b.n	80012ac <HAL_FLASH_Program+0xc8>
      {
        break;
 80012aa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_FLASH_Program+0xd8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	761a      	strb	r2, [r3, #24]

  return status;
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012bc:	20000140 	.word	0x20000140
 80012c0:	40022000 	.word	0x40022000

080012c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_FLASH_Unlock+0x40>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00d      	beq.n	80012f6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_FLASH_Unlock+0x40>)
 80012dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <HAL_FLASH_Unlock+0x44>)
 80012de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <HAL_FLASH_Unlock+0x40>)
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <HAL_FLASH_Unlock+0x48>)
 80012e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_FLASH_Unlock+0x40>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000
 8001308:	45670123 	.word	0x45670123
 800130c:	cdef89ab 	.word	0xcdef89ab

08001310 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_FLASH_Lock+0x1c>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_FLASH_Lock+0x1c>)
 800131a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <FLASH_Program_HalfWord+0x30>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <FLASH_Program_HalfWord+0x34>)
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <FLASH_Program_HalfWord+0x34>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	887a      	ldrh	r2, [r7, #2]
 8001352:	801a      	strh	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000140 	.word	0x20000140
 8001364:	40022000 	.word	0x40022000

08001368 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff fe26 	bl	8000fc0 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001376:	e010      	b.n	800139a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137e:	d00c      	beq.n	800139a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <FLASH_WaitForLastOperation+0x2e>
 8001386:	f7ff fe1b 	bl	8000fc0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d201      	bcs.n	800139a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e025      	b.n	80013e6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <FLASH_WaitForLastOperation+0x88>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1e8      	bne.n	8001378 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <FLASH_WaitForLastOperation+0x88>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <FLASH_WaitForLastOperation+0x88>)
 80013b4:	2220      	movs	r2, #32
 80013b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <FLASH_WaitForLastOperation+0x88>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10b      	bne.n	80013dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <FLASH_WaitForLastOperation+0x88>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <FLASH_WaitForLastOperation+0x88>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013dc:	f000 f80a 	bl	80013f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000

080013f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <FLASH_SetErrorCode+0x98>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d009      	beq.n	800141e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <FLASH_SetErrorCode+0x9c>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	4a1f      	ldr	r2, [pc, #124]	@ (8001490 <FLASH_SetErrorCode+0x9c>)
 8001414:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800141e:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <FLASH_SetErrorCode+0x98>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	d009      	beq.n	800143e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <FLASH_SetErrorCode+0x9c>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <FLASH_SetErrorCode+0x9c>)
 8001434:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <FLASH_SetErrorCode+0x98>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <FLASH_SetErrorCode+0x9c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <FLASH_SetErrorCode+0x9c>)
 8001454:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <FLASH_SetErrorCode+0x98>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a0c      	ldr	r2, [pc, #48]	@ (800148c <FLASH_SetErrorCode+0x98>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f240 1201 	movw	r2, #257	@ 0x101
 8001468:	4293      	cmp	r3, r2
 800146a:	d106      	bne.n	800147a <FLASH_SetErrorCode+0x86>
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <FLASH_SetErrorCode+0x98>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	4a06      	ldr	r2, [pc, #24]	@ (800148c <FLASH_SetErrorCode+0x98>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	61d3      	str	r3, [r2, #28]
}  
 8001478:	e002      	b.n	8001480 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800147a:	4a04      	ldr	r2, [pc, #16]	@ (800148c <FLASH_SetErrorCode+0x98>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	60d3      	str	r3, [r2, #12]
}  
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40022000 	.word	0x40022000
 8001490:	20000140 	.word	0x20000140

08001494 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <HAL_FLASHEx_Erase+0xd0>)
 80014a8:	7e1b      	ldrb	r3, [r3, #24]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_FLASHEx_Erase+0x1e>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e053      	b.n	800155a <HAL_FLASHEx_Erase+0xc6>
 80014b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001564 <HAL_FLASHEx_Erase+0xd0>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d116      	bne.n	80014ee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014c4:	f7ff ff50 	bl	8001368 <FLASH_WaitForLastOperation>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d141      	bne.n	8001552 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 f84c 	bl	800156c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014d8:	f7ff ff46 	bl	8001368 <FLASH_WaitForLastOperation>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80014e0:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <HAL_FLASHEx_Erase+0xd4>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4a20      	ldr	r2, [pc, #128]	@ (8001568 <HAL_FLASHEx_Erase+0xd4>)
 80014e6:	f023 0304 	bic.w	r3, r3, #4
 80014ea:	6113      	str	r3, [r2, #16]
 80014ec:	e031      	b.n	8001552 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014ee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014f2:	f7ff ff39 	bl	8001368 <FLASH_WaitForLastOperation>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d12a      	bne.n	8001552 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001502:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	e019      	b.n	8001540 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800150c:	68b8      	ldr	r0, [r7, #8]
 800150e:	f000 f849 	bl	80015a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001512:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001516:	f7ff ff27 	bl	8001368 <FLASH_WaitForLastOperation>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_FLASHEx_Erase+0xd4>)
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <HAL_FLASHEx_Erase+0xd4>)
 8001524:	f023 0302 	bic.w	r3, r3, #2
 8001528:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	601a      	str	r2, [r3, #0]
            break;
 8001536:	e00c      	b.n	8001552 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800153e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	029a      	lsls	r2, r3, #10
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4413      	add	r3, r2
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	429a      	cmp	r2, r3
 8001550:	d3dc      	bcc.n	800150c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001552:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <HAL_FLASHEx_Erase+0xd0>)
 8001554:	2200      	movs	r2, #0
 8001556:	761a      	strb	r2, [r3, #24]

  return status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000140 	.word	0x20000140
 8001568:	40022000 	.word	0x40022000

0800156c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <FLASH_MassErase+0x30>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <FLASH_MassErase+0x34>)
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <FLASH_MassErase+0x34>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <FLASH_MassErase+0x34>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <FLASH_MassErase+0x34>)
 800158c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001590:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000140 	.word	0x20000140
 80015a0:	40022000 	.word	0x40022000

080015a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <FLASH_PageErase+0x38>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <FLASH_PageErase+0x3c>)
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <FLASH_PageErase+0x3c>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <FLASH_PageErase+0x3c>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <FLASH_PageErase+0x3c>)
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <FLASH_PageErase+0x3c>)
 80015ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000140 	.word	0x20000140
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b08b      	sub	sp, #44	@ 0x2c
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f6:	e169      	b.n	80018cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015f8:	2201      	movs	r2, #1
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 8158 	bne.w	80018c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4a9a      	ldr	r2, [pc, #616]	@ (8001884 <HAL_GPIO_Init+0x2a0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d05e      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001620:	4a98      	ldr	r2, [pc, #608]	@ (8001884 <HAL_GPIO_Init+0x2a0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d875      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001626:	4a98      	ldr	r2, [pc, #608]	@ (8001888 <HAL_GPIO_Init+0x2a4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d058      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 800162c:	4a96      	ldr	r2, [pc, #600]	@ (8001888 <HAL_GPIO_Init+0x2a4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d86f      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001632:	4a96      	ldr	r2, [pc, #600]	@ (800188c <HAL_GPIO_Init+0x2a8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d052      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001638:	4a94      	ldr	r2, [pc, #592]	@ (800188c <HAL_GPIO_Init+0x2a8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d869      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800163e:	4a94      	ldr	r2, [pc, #592]	@ (8001890 <HAL_GPIO_Init+0x2ac>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d04c      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001644:	4a92      	ldr	r2, [pc, #584]	@ (8001890 <HAL_GPIO_Init+0x2ac>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d863      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800164a:	4a92      	ldr	r2, [pc, #584]	@ (8001894 <HAL_GPIO_Init+0x2b0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d046      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001650:	4a90      	ldr	r2, [pc, #576]	@ (8001894 <HAL_GPIO_Init+0x2b0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d85d      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001656:	2b12      	cmp	r3, #18
 8001658:	d82a      	bhi.n	80016b0 <HAL_GPIO_Init+0xcc>
 800165a:	2b12      	cmp	r3, #18
 800165c:	d859      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800165e:	a201      	add	r2, pc, #4	@ (adr r2, 8001664 <HAL_GPIO_Init+0x80>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	080016df 	.word	0x080016df
 8001668:	080016b9 	.word	0x080016b9
 800166c:	080016cb 	.word	0x080016cb
 8001670:	0800170d 	.word	0x0800170d
 8001674:	08001713 	.word	0x08001713
 8001678:	08001713 	.word	0x08001713
 800167c:	08001713 	.word	0x08001713
 8001680:	08001713 	.word	0x08001713
 8001684:	08001713 	.word	0x08001713
 8001688:	08001713 	.word	0x08001713
 800168c:	08001713 	.word	0x08001713
 8001690:	08001713 	.word	0x08001713
 8001694:	08001713 	.word	0x08001713
 8001698:	08001713 	.word	0x08001713
 800169c:	08001713 	.word	0x08001713
 80016a0:	08001713 	.word	0x08001713
 80016a4:	08001713 	.word	0x08001713
 80016a8:	080016c1 	.word	0x080016c1
 80016ac:	080016d5 	.word	0x080016d5
 80016b0:	4a79      	ldr	r2, [pc, #484]	@ (8001898 <HAL_GPIO_Init+0x2b4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016b6:	e02c      	b.n	8001712 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e029      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	3304      	adds	r3, #4
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e024      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	3308      	adds	r3, #8
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e01f      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	330c      	adds	r3, #12
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e01a      	b.n	8001714 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016e6:	2304      	movs	r3, #4
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e013      	b.n	8001714 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f4:	2308      	movs	r3, #8
 80016f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	611a      	str	r2, [r3, #16]
          break;
 80016fe:	e009      	b.n	8001714 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001700:	2308      	movs	r3, #8
 8001702:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	615a      	str	r2, [r3, #20]
          break;
 800170a:	e003      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x130>
          break;
 8001712:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2bff      	cmp	r3, #255	@ 0xff
 8001718:	d801      	bhi.n	800171e <HAL_GPIO_Init+0x13a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	e001      	b.n	8001722 <HAL_GPIO_Init+0x13e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2bff      	cmp	r3, #255	@ 0xff
 8001728:	d802      	bhi.n	8001730 <HAL_GPIO_Init+0x14c>
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x152>
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	3b08      	subs	r3, #8
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	210f      	movs	r1, #15
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	401a      	ands	r2, r3
 8001748:	6a39      	ldr	r1, [r7, #32]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	431a      	orrs	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80b1 	beq.w	80018c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001764:	4b4d      	ldr	r3, [pc, #308]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a4c      	ldr	r2, [pc, #304]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b4a      	ldr	r3, [pc, #296]	@ (800189c <HAL_GPIO_Init+0x2b8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800177c:	4a48      	ldr	r2, [pc, #288]	@ (80018a0 <HAL_GPIO_Init+0x2bc>)
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a40      	ldr	r2, [pc, #256]	@ (80018a4 <HAL_GPIO_Init+0x2c0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d013      	beq.n	80017d0 <HAL_GPIO_Init+0x1ec>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3f      	ldr	r2, [pc, #252]	@ (80018a8 <HAL_GPIO_Init+0x2c4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1e8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3e      	ldr	r2, [pc, #248]	@ (80018ac <HAL_GPIO_Init+0x2c8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1e4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a3d      	ldr	r2, [pc, #244]	@ (80018b0 <HAL_GPIO_Init+0x2cc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1e0>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e006      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e004      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017d0:	2300      	movs	r3, #0
 80017d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d4:	f002 0203 	and.w	r2, r2, #3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4093      	lsls	r3, r2
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e2:	492f      	ldr	r1, [pc, #188]	@ (80018a0 <HAL_GPIO_Init+0x2bc>)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017fc:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	492c      	ldr	r1, [pc, #176]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180a:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	4928      	ldr	r1, [pc, #160]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001814:	4013      	ands	r3, r2
 8001816:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001824:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	4922      	ldr	r1, [pc, #136]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	491e      	ldr	r1, [pc, #120]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 800183c:	4013      	ands	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4918      	ldr	r1, [pc, #96]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185a:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	4914      	ldr	r1, [pc, #80]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001864:	4013      	ands	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d021      	beq.n	80018b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	490e      	ldr	r1, [pc, #56]	@ (80018b4 <HAL_GPIO_Init+0x2d0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e021      	b.n	80018c6 <HAL_GPIO_Init+0x2e2>
 8001882:	bf00      	nop
 8001884:	10320000 	.word	0x10320000
 8001888:	10310000 	.word	0x10310000
 800188c:	10220000 	.word	0x10220000
 8001890:	10210000 	.word	0x10210000
 8001894:	10120000 	.word	0x10120000
 8001898:	10110000 	.word	0x10110000
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40011400 	.word	0x40011400
 80018b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_GPIO_Init+0x304>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	43db      	mvns	r3, r3
 80018c0:	4909      	ldr	r1, [pc, #36]	@ (80018e8 <HAL_GPIO_Init+0x304>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	3301      	adds	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f47f ae8e 	bne.w	80015f8 <HAL_GPIO_Init+0x14>
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	372c      	adds	r7, #44	@ 0x2c
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e12b      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff f9f0 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	@ 0x24
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800193e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800194e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001950:	f001 f83e 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a81      	ldr	r2, [pc, #516]	@ (8001b60 <HAL_I2C_Init+0x274>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d807      	bhi.n	8001970 <HAL_I2C_Init+0x84>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a80      	ldr	r2, [pc, #512]	@ (8001b64 <HAL_I2C_Init+0x278>)
 8001964:	4293      	cmp	r3, r2
 8001966:	bf94      	ite	ls
 8001968:	2301      	movls	r3, #1
 800196a:	2300      	movhi	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e006      	b.n	800197e <HAL_I2C_Init+0x92>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a7d      	ldr	r2, [pc, #500]	@ (8001b68 <HAL_I2C_Init+0x27c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	bf94      	ite	ls
 8001978:	2301      	movls	r3, #1
 800197a:	2300      	movhi	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0e7      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a78      	ldr	r2, [pc, #480]	@ (8001b6c <HAL_I2C_Init+0x280>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9b      	lsrs	r3, r3, #18
 8001990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b60 <HAL_I2C_Init+0x274>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d802      	bhi.n	80019c0 <HAL_I2C_Init+0xd4>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	e009      	b.n	80019d4 <HAL_I2C_Init+0xe8>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	4a69      	ldr	r2, [pc, #420]	@ (8001b70 <HAL_I2C_Init+0x284>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	3301      	adds	r3, #1
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	430b      	orrs	r3, r1
 80019da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	495c      	ldr	r1, [pc, #368]	@ (8001b60 <HAL_I2C_Init+0x274>)
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d819      	bhi.n	8001a28 <HAL_I2C_Init+0x13c>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e59      	subs	r1, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <HAL_I2C_Init+0x138>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e59      	subs	r1, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a22:	e051      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e04f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_I2C_Init+0x168>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e012      	b.n	8001a7a <HAL_I2C_Init+0x18e>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Init+0x196>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e022      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10e      	bne.n	8001aa8 <HAL_I2C_Init+0x1bc>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e58      	subs	r0, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa6:	e00f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	0099      	lsls	r1, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	6809      	ldr	r1, [r1, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001af6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6911      	ldr	r1, [r2, #16]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68d2      	ldr	r2, [r2, #12]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	000186a0 	.word	0x000186a0
 8001b64:	001e847f 	.word	0x001e847f
 8001b68:	003d08ff 	.word	0x003d08ff
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	10624dd3 	.word	0x10624dd3

08001b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	817b      	strh	r3, [r7, #10]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fa1a 	bl	8000fc0 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f040 80e0 	bne.w	8001d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4970      	ldr	r1, [pc, #448]	@ (8001d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f964 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0d3      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x50>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0cc      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d007      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	@ 0x21
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2210      	movs	r2, #16
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a50      	ldr	r2, [pc, #320]	@ (8001d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f89c 	bl	8001d70 <I2C_MasterRequestWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08d      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c58:	e066      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fa22 	bl	80020a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d107      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d017      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fa19 	bl	8002138 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e01a      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d194      	bne.n	8001c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	00100002 	.word	0x00100002
 8001d6c:	ffff0000 	.word	0xffff0000

08001d70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d006      	beq.n	8001d9a <I2C_MasterRequestWrite+0x2a>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d003      	beq.n	8001d9a <I2C_MasterRequestWrite+0x2a>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d98:	d108      	bne.n	8001dac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e00b      	b.n	8001dc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	2b12      	cmp	r3, #18
 8001db2:	d107      	bne.n	8001dc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f84f 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00d      	beq.n	8001df8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dea:	d103      	bne.n	8001df4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e035      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e00:	d108      	bne.n	8001e14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	e01b      	b.n	8001e4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e14:	897b      	ldrh	r3, [r7, #10]
 8001e16:	11db      	asrs	r3, r3, #7
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f003 0306 	and.w	r3, r3, #6
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f063 030f 	orn	r3, r3, #15
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	490e      	ldr	r1, [pc, #56]	@ (8001e6c <I2C_MasterRequestWrite+0xfc>)
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f898 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e010      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <I2C_MasterRequestWrite+0x100>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f888 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	00010008 	.word	0x00010008
 8001e70:	00010002 	.word	0x00010002

08001e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e84:	e048      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d044      	beq.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7ff f897 	bl	8000fc0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d139      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10d      	bne.n	8001eca <I2C_WaitOnFlagUntilTimeout+0x56>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	e00c      	b.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d116      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e023      	b.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10d      	bne.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	e00c      	b.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d093      	beq.n	8001e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f76:	e071      	b.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f86:	d123      	bne.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e067      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d041      	beq.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd8:	f7fe fff2 	bl	8000fc0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d302      	bcc.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d136      	bne.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4013      	ands	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	bf14      	ite	ne
 800200a:	2301      	movne	r3, #1
 800200c:	2300      	moveq	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	e00b      	b.n	800202a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	43da      	mvns	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e021      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10c      	bne.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e00b      	b.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4013      	ands	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	f47f af6d 	bne.w	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b4:	e034      	b.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f886 	bl	80021c8 <I2C_IsAcknowledgeFailed>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e034      	b.n	8002130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d028      	beq.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ce:	f7fe ff77 	bl	8000fc0 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d11d      	bne.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ee:	2b80      	cmp	r3, #128	@ 0x80
 80020f0:	d016      	beq.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e007      	b.n	8002130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b80      	cmp	r3, #128	@ 0x80
 800212c:	d1c3      	bne.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002144:	e034      	b.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f83e 	bl	80021c8 <I2C_IsAcknowledgeFailed>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e034      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d028      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7fe ff2f 	bl	8000fc0 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d11d      	bne.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	d016      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d1c3      	bne.n	8002146 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021de:	d11b      	bne.n	8002218 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_PWR_EnableBkUpAccess+0x14>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	420e0020 	.word	0x420e0020

0800223c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e272      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8087 	beq.w	800236a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800225c:	4b92      	ldr	r3, [pc, #584]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b04      	cmp	r3, #4
 8002266:	d00c      	beq.n	8002282 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002268:	4b8f      	ldr	r3, [pc, #572]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b08      	cmp	r3, #8
 8002272:	d112      	bne.n	800229a <HAL_RCC_OscConfig+0x5e>
 8002274:	4b8c      	ldr	r3, [pc, #560]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002280:	d10b      	bne.n	800229a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002282:	4b89      	ldr	r3, [pc, #548]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d06c      	beq.n	8002368 <HAL_RCC_OscConfig+0x12c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d168      	bne.n	8002368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e24c      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x76>
 80022a4:	4b80      	ldr	r3, [pc, #512]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a7f      	ldr	r2, [pc, #508]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e02e      	b.n	8002310 <HAL_RCC_OscConfig+0xd4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x98>
 80022ba:	4b7b      	ldr	r3, [pc, #492]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7a      	ldr	r2, [pc, #488]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b78      	ldr	r3, [pc, #480]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a77      	ldr	r2, [pc, #476]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e01d      	b.n	8002310 <HAL_RCC_OscConfig+0xd4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0xbc>
 80022de:	4b72      	ldr	r3, [pc, #456]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a71      	ldr	r2, [pc, #452]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b6f      	ldr	r3, [pc, #444]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a6e      	ldr	r2, [pc, #440]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0xd4>
 80022f8:	4b6b      	ldr	r3, [pc, #428]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b68      	ldr	r3, [pc, #416]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a67      	ldr	r2, [pc, #412]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fe52 	bl	8000fc0 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fe4e 	bl	8000fc0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	@ 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e200      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b5d      	ldr	r3, [pc, #372]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0xe4>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fe3e 	bl	8000fc0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fe3a 	bl	8000fc0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1ec      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	4b53      	ldr	r3, [pc, #332]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x10c>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d063      	beq.n	800243e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002376:	4b4c      	ldr	r3, [pc, #304]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00b      	beq.n	800239a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002382:	4b49      	ldr	r3, [pc, #292]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b08      	cmp	r3, #8
 800238c:	d11c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x18c>
 800238e:	4b46      	ldr	r3, [pc, #280]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d116      	bne.n	80023c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	4b43      	ldr	r3, [pc, #268]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_RCC_OscConfig+0x176>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e1c0      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b2:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4939      	ldr	r1, [pc, #228]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c6:	e03a      	b.n	800243e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d0:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <HAL_RCC_OscConfig+0x270>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fdf3 	bl	8000fc0 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023de:	f7fe fdef 	bl	8000fc0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1a1      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f0:	4b2d      	ldr	r3, [pc, #180]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fc:	4b2a      	ldr	r3, [pc, #168]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4927      	ldr	r1, [pc, #156]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]
 8002410:	e015      	b.n	800243e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002412:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <HAL_RCC_OscConfig+0x270>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdd2 	bl	8000fc0 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7fe fdce 	bl	8000fc0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e180      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d03a      	beq.n	80024c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d019      	beq.n	8002486 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002452:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe fdb2 	bl	8000fc0 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002460:	f7fe fdae 	bl	8000fc0 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e160      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002472:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HAL_RCC_OscConfig+0x26c>)
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800247e:	2001      	movs	r0, #1
 8002480:	f000 face 	bl	8002a20 <RCC_Delay>
 8002484:	e01c      	b.n	80024c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002486:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7fe fd98 	bl	8000fc0 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002492:	e00f      	b.n	80024b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f7fe fd94 	bl	8000fc0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d908      	bls.n	80024b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e146      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	42420000 	.word	0x42420000
 80024b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	4b92      	ldr	r3, [pc, #584]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1e9      	bne.n	8002494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a6 	beq.w	800261a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b88      	ldr	r3, [pc, #544]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4a87      	ldr	r2, [pc, #540]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	61d3      	str	r3, [r2, #28]
 80024ea:	4b85      	ldr	r3, [pc, #532]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b82      	ldr	r3, [pc, #520]	@ (8002704 <HAL_RCC_OscConfig+0x4c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002506:	4b7f      	ldr	r3, [pc, #508]	@ (8002704 <HAL_RCC_OscConfig+0x4c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7e      	ldr	r2, [pc, #504]	@ (8002704 <HAL_RCC_OscConfig+0x4c8>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002512:	f7fe fd55 	bl	8000fc0 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7fe fd51 	bl	8000fc0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	@ 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e103      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	4b75      	ldr	r3, [pc, #468]	@ (8002704 <HAL_RCC_OscConfig+0x4c8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x312>
 8002540:	4b6f      	ldr	r3, [pc, #444]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a6e      	ldr	r2, [pc, #440]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e02d      	b.n	80025aa <HAL_RCC_OscConfig+0x36e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x334>
 8002556:	4b6a      	ldr	r3, [pc, #424]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a69      	ldr	r2, [pc, #420]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	4b67      	ldr	r3, [pc, #412]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a66      	ldr	r2, [pc, #408]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	e01c      	b.n	80025aa <HAL_RCC_OscConfig+0x36e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b05      	cmp	r3, #5
 8002576:	d10c      	bne.n	8002592 <HAL_RCC_OscConfig+0x356>
 8002578:	4b61      	ldr	r3, [pc, #388]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a60      	ldr	r2, [pc, #384]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	4b5e      	ldr	r3, [pc, #376]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a5d      	ldr	r2, [pc, #372]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	e00b      	b.n	80025aa <HAL_RCC_OscConfig+0x36e>
 8002592:	4b5b      	ldr	r3, [pc, #364]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a5a      	ldr	r2, [pc, #360]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	4b58      	ldr	r3, [pc, #352]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a57      	ldr	r2, [pc, #348]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d015      	beq.n	80025de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fd05 	bl	8000fc0 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fd01 	bl	8000fc0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0b1      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ee      	beq.n	80025ba <HAL_RCC_OscConfig+0x37e>
 80025dc:	e014      	b.n	8002608 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025de:	f7fe fcef 	bl	8000fc0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fceb 	bl	8000fc0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e09b      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fc:	4b40      	ldr	r3, [pc, #256]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ee      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d105      	bne.n	800261a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260e:	4b3c      	ldr	r3, [pc, #240]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4a3b      	ldr	r2, [pc, #236]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002618:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b08      	cmp	r3, #8
 800262e:	d061      	beq.n	80026f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d146      	bne.n	80026c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002638:	4b33      	ldr	r3, [pc, #204]	@ (8002708 <HAL_RCC_OscConfig+0x4cc>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe fcbf 	bl	8000fc0 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe fcbb 	bl	8000fc0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e06d      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002658:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f0      	bne.n	8002646 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266c:	d108      	bne.n	8002680 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4921      	ldr	r1, [pc, #132]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002680:	4b1f      	ldr	r3, [pc, #124]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a19      	ldr	r1, [r3, #32]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	430b      	orrs	r3, r1
 8002692:	491b      	ldr	r1, [pc, #108]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x4cc>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fc8f 	bl	8000fc0 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fc8b 	bl	8000fc0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e03d      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x46a>
 80026c4:	e035      	b.n	8002732 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <HAL_RCC_OscConfig+0x4cc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fc78 	bl	8000fc0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fc74 	bl	8000fc0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e026      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x498>
 80026f2:	e01e      	b.n	8002732 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e019      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
 8002708:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_RCC_OscConfig+0x500>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	429a      	cmp	r2, r3
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000

08002740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0d0      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b6a      	ldr	r3, [pc, #424]	@ (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d910      	bls.n	8002784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b67      	ldr	r3, [pc, #412]	@ (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4965      	ldr	r1, [pc, #404]	@ (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a52      	ldr	r2, [pc, #328]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d040      	beq.n	8002860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d115      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	4b41      	ldr	r3, [pc, #260]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e073      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	4b3d      	ldr	r3, [pc, #244]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e06b      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281e:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4936      	ldr	r1, [pc, #216]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002830:	f7fe fbc6 	bl	8000fc0 <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe fbc2 	bl	8000fc0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e053      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b2d      	ldr	r3, [pc, #180]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 020c 	and.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d1eb      	bne.n	8002838 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002860:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d210      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0207 	bic.w	r2, r3, #7
 8002876:	4922      	ldr	r1, [pc, #136]	@ (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	490a      	ldr	r1, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x1c8>)
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_RCC_ClockConfig+0x1cc>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_ClockConfig+0x1d0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fb24 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40022000 	.word	0x40022000
 8002904:	40021000 	.word	0x40021000
 8002908:	08004688 	.word	0x08004688
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b04      	cmp	r3, #4
 800293c:	d002      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x30>
 800293e:	2b08      	cmp	r3, #8
 8002940:	d003      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x36>
 8002942:	e027      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002946:	613b      	str	r3, [r7, #16]
      break;
 8002948:	e027      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	0c9b      	lsrs	r3, r3, #18
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a17      	ldr	r2, [pc, #92]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d010      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0c5b      	lsrs	r3, r3, #17
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	4a11      	ldr	r2, [pc, #68]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	fb03 f202 	mul.w	r2, r3, r2
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e004      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0c      	ldr	r2, [pc, #48]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	613b      	str	r3, [r7, #16]
      break;
 8002992:	e002      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002996:	613b      	str	r3, [r7, #16]
      break;
 8002998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299a:	693b      	ldr	r3, [r7, #16]
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	007a1200 	.word	0x007a1200
 80029b0:	080046a0 	.word	0x080046a0
 80029b4:	080046b0 	.word	0x080046b0
 80029b8:	003d0900 	.word	0x003d0900

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b02      	ldr	r3, [pc, #8]	@ (80029cc <HAL_RCC_GetHCLKFreq+0x10>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000000 	.word	0x20000000

080029d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d4:	f7ff fff2 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4903      	ldr	r1, [pc, #12]	@ (80029f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08004698 	.word	0x08004698

080029f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029fc:	f7ff ffde 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	0adb      	lsrs	r3, r3, #11
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4903      	ldr	r1, [pc, #12]	@ (8002a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08004698 	.word	0x08004698

08002a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <RCC_Delay+0x34>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <RCC_Delay+0x38>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a5b      	lsrs	r3, r3, #9
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a3c:	bf00      	nop
  }
  while (Delay --);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	60fa      	str	r2, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f9      	bne.n	8002a3c <RCC_Delay+0x1c>
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	20000000 	.word	0x20000000
 8002a58:	10624dd3 	.word	0x10624dd3

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d07d      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b4c      	ldr	r3, [pc, #304]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	61d3      	str	r3, [r2, #28]
 8002a94:	4b49      	ldr	r3, [pc, #292]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b46      	ldr	r3, [pc, #280]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d118      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab0:	4b43      	ldr	r3, [pc, #268]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a42      	ldr	r2, [pc, #264]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fa80 	bl	8000fc0 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fa7c 	bl	8000fc0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	@ 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e06d      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae2:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02e      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d027      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b10:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b16:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fa4b 	bl	8000fc0 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fa47 	bl	8000fc0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e036      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4917      	ldr	r1, [pc, #92]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b80:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	490b      	ldr	r1, [pc, #44]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4904      	ldr	r1, [pc, #16]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42420440 	.word	0x42420440

08002bc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	f200 808a 	bhi.w	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d045      	beq.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d075      	beq.n	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002bfe:	e082      	b.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c00:	4b46      	ldr	r3, [pc, #280]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c06:	4b45      	ldr	r3, [pc, #276]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d07b      	beq.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	0c9b      	lsrs	r3, r3, #18
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a41      	ldr	r2, [pc, #260]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d015      	beq.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c5b      	lsrs	r3, r3, #17
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	4a3b      	ldr	r2, [pc, #236]	@ (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c44:	4a38      	ldr	r2, [pc, #224]	@ (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	e004      	b.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4a34      	ldr	r2, [pc, #208]	@ (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c60:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	61bb      	str	r3, [r7, #24]
      break;
 8002c72:	e04a      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4a2d      	ldr	r2, [pc, #180]	@ (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	61bb      	str	r3, [r7, #24]
      break;
 8002c82:	e042      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002c84:	4b25      	ldr	r3, [pc, #148]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d108      	bne.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e01f      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002cc0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cd2:	d11c      	bne.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cd4:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d016      	beq.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002ce0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002ce4:	61bb      	str	r3, [r7, #24]
      break;
 8002ce6:	e012      	b.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ce8:	e011      	b.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002cea:	f7ff fe85 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	0b9b      	lsrs	r3, r3, #14
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	61bb      	str	r3, [r7, #24]
      break;
 8002d04:	e004      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d0e:	bf00      	nop
    }
  }
  return (frequency);
 8002d10:	69bb      	ldr	r3, [r7, #24]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	080046b4 	.word	0x080046b4
 8002d24:	080046c4 	.word	0x080046c4
 8002d28:	007a1200 	.word	0x007a1200
 8002d2c:	003d0900 	.word	0x003d0900
 8002d30:	aaaaaaab 	.word	0xaaaaaaab

08002d34 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e07a      	b.n	8002e40 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7c5b      	ldrb	r3, [r3, #17]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe f80a 	bl	8000d74 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa96 	bl	8003298 <HAL_RTC_WaitForSynchro>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2204      	movs	r2, #4
 8002d76:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e061      	b.n	8002e40 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fb4f 	bl	8003420 <RTC_EnterInitMode>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e056      	b.n	8002e40 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0207 	bic.w	r2, r2, #7
 8002da0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002daa:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_RTC_Init+0x114>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	4a26      	ldr	r2, [pc, #152]	@ (8002e48 <HAL_RTC_Init+0x114>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <HAL_RTC_Init+0x114>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4921      	ldr	r1, [pc, #132]	@ (8002e48 <HAL_RTC_Init+0x114>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d003      	beq.n	8002dda <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e00e      	b.n	8002df8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f7ff fef4 	bl	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002de0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2204      	movs	r2, #4
 8002dec:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e026      	b.n	8002e40 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	0c1a      	lsrs	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f002 020f 	and.w	r2, r2, #15
 8002e04:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fb2d 	bl	8003470 <RTC_ExitInitMode>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00c      	b.n	8002e40 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
  }
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40006c00 	.word	0x40006c00

08002e4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_RTC_SetTime+0x20>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e080      	b.n	8002f72 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	7c1b      	ldrb	r3, [r3, #16]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_RTC_SetTime+0x30>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e07a      	b.n	8002f72 <HAL_RTC_SetTime+0x126>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2202      	movs	r2, #2
 8002e86:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d113      	bne.n	8002eb6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002e98:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a5b      	subs	r3, r3, r1
 8002ea8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002eaa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e01e      	b.n	8002ef4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fb1d 	bl	80034fa <RTC_Bcd2ToByte>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002ec8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fb12 	bl	80034fa <RTC_Bcd2ToByte>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ee2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	789b      	ldrb	r3, [r3, #2]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fb06 	bl	80034fa <RTC_Bcd2ToByte>
 8002eee:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ef0:	4423      	add	r3, r4
 8002ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002ef4:	6979      	ldr	r1, [r7, #20]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fa2b 	bl	8003352 <RTC_WriteTimeCounter>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2204      	movs	r2, #4
 8002f06:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e02f      	b.n	8002f72 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0205 	bic.w	r2, r2, #5
 8002f20:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fa3c 	bl	80033a0 <RTC_ReadAlarmCounter>
 8002f28:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d018      	beq.n	8002f64 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d214      	bcs.n	8002f64 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002f40:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002f44:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f46:	6939      	ldr	r1, [r7, #16]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fa42 	bl	80033d2 <RTC_WriteAlarmCounter>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2204      	movs	r2, #4
 8002f58:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e006      	b.n	8002f72 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd90      	pop	{r4, r7, pc}
	...

08002f7c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RTC_GetTime+0x28>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b5      	b.n	8003114 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0ac      	b.n	8003114 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f999 	bl	80032f2 <RTC_ReadTimeCounter>
 8002fc0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4a55      	ldr	r2, [pc, #340]	@ (800311c <HAL_RTC_GetTime+0x1a0>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0adb      	lsrs	r3, r3, #11
 8002fcc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4b52      	ldr	r3, [pc, #328]	@ (800311c <HAL_RTC_GetTime+0x1a0>)
 8002fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd6:	0adb      	lsrs	r3, r3, #11
 8002fd8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	4a4f      	ldr	r2, [pc, #316]	@ (8003120 <HAL_RTC_GetTime+0x1a4>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800311c <HAL_RTC_GetTime+0x1a0>)
 8002ff4:	fba2 1203 	umull	r1, r2, r2, r3
 8002ff8:	0ad2      	lsrs	r2, r2, #11
 8002ffa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002ffe:	fb01 f202 	mul.w	r2, r1, r2
 8003002:	1a9a      	subs	r2, r3, r2
 8003004:	4b46      	ldr	r3, [pc, #280]	@ (8003120 <HAL_RTC_GetTime+0x1a4>)
 8003006:	fba3 1302 	umull	r1, r3, r3, r2
 800300a:	0959      	lsrs	r1, r3, #5
 800300c:	460b      	mov	r3, r1
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a5b      	subs	r3, r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	1ad1      	subs	r1, r2, r3
 8003016:	b2ca      	uxtb	r2, r1
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b17      	cmp	r3, #23
 8003020:	d955      	bls.n	80030ce <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4a3f      	ldr	r2, [pc, #252]	@ (8003124 <HAL_RTC_GetTime+0x1a8>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800302e:	6939      	ldr	r1, [r7, #16]
 8003030:	4b3c      	ldr	r3, [pc, #240]	@ (8003124 <HAL_RTC_GetTime+0x1a8>)
 8003032:	fba3 2301 	umull	r2, r3, r3, r1
 8003036:	091a      	lsrs	r2, r3, #4
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1aca      	subs	r2, r1, r3
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f9a9 	bl	80033a0 <RTC_ReadAlarmCounter>
 800304e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d008      	beq.n	800306a <HAL_RTC_GetTime+0xee>
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	429a      	cmp	r2, r3
 800305e:	d904      	bls.n	800306a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e002      	b.n	8003070 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	4a2d      	ldr	r2, [pc, #180]	@ (8003128 <HAL_RTC_GetTime+0x1ac>)
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f966 	bl	8003352 <RTC_WriteTimeCounter>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e041      	b.n	8003114 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d00c      	beq.n	80030b2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4413      	add	r3, r2
 800309e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80030a0:	69f9      	ldr	r1, [r7, #28]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f995 	bl	80033d2 <RTC_WriteAlarmCounter>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e030      	b.n	8003114 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80030b2:	69f9      	ldr	r1, [r7, #28]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f98c 	bl	80033d2 <RTC_WriteAlarmCounter>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e027      	b.n	8003114 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80030c4:	6979      	ldr	r1, [r7, #20]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fa34 	bl	8003534 <RTC_DateUpdate>
 80030cc:	e003      	b.n	80030d6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01a      	beq.n	8003112 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f9ed 	bl	80034c0 <RTC_ByteToBcd2>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f9e4 	bl	80034c0 <RTC_ByteToBcd2>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	789b      	ldrb	r3, [r3, #2]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f9db 	bl	80034c0 <RTC_ByteToBcd2>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	91a2b3c5 	.word	0x91a2b3c5
 8003120:	88888889 	.word	0x88888889
 8003124:	aaaaaaab 	.word	0xaaaaaaab
 8003128:	00015180 	.word	0x00015180

0800312c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	2300      	movs	r3, #0
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_RTC_SetDate+0x24>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e097      	b.n	8003284 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	7c1b      	ldrb	r3, [r3, #16]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_RTC_SetDate+0x34>
 800315c:	2302      	movs	r3, #2
 800315e:	e091      	b.n	8003284 <HAL_RTC_SetDate+0x158>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2202      	movs	r2, #2
 800316a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	78da      	ldrb	r2, [r3, #3]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	785a      	ldrb	r2, [r3, #1]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	789a      	ldrb	r2, [r3, #2]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	739a      	strb	r2, [r3, #14]
 800318a:	e01a      	b.n	80031c2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	78db      	ldrb	r3, [r3, #3]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f9b2 	bl	80034fa <RTC_Bcd2ToByte>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f9a9 	bl	80034fa <RTC_Bcd2ToByte>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	789b      	ldrb	r3, [r3, #2]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f9a0 	bl	80034fa <RTC_Bcd2ToByte>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	7bdb      	ldrb	r3, [r3, #15]
 80031c6:	4618      	mov	r0, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	7b59      	ldrb	r1, [r3, #13]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	7b9b      	ldrb	r3, [r3, #14]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f000 fa8b 	bl	80036ec <RTC_WeekDayNum>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461a      	mov	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	7b1a      	ldrb	r2, [r3, #12]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f883 	bl	80032f2 <RTC_ReadTimeCounter>
 80031ec:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4a26      	ldr	r2, [pc, #152]	@ (800328c <HAL_RTC_SetDate+0x160>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0adb      	lsrs	r3, r3, #11
 80031f8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b18      	cmp	r3, #24
 80031fe:	d93a      	bls.n	8003276 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_RTC_SetDate+0x164>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <HAL_RTC_SetDate+0x168>)
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003216:	69f9      	ldr	r1, [r7, #28]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f89a 	bl	8003352 <RTC_WriteTimeCounter>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2204      	movs	r2, #4
 8003228:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e027      	b.n	8003284 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f8b3 	bl	80033a0 <RTC_ReadAlarmCounter>
 800323a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d018      	beq.n	8003276 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	d214      	bcs.n	8003276 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003252:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003256:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003258:	69b9      	ldr	r1, [r7, #24]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f8b9 	bl	80033d2 <RTC_WriteAlarmCounter>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2204      	movs	r2, #4
 800326a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e006      	b.n	8003284 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	91a2b3c5 	.word	0x91a2b3c5
 8003290:	aaaaaaab 	.word	0xaaaaaaab
 8003294:	00015180 	.word	0x00015180

08003298 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e01d      	b.n	80032ea <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0208 	bic.w	r2, r2, #8
 80032bc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80032be:	f7fd fe7f 	bl	8000fc0 <HAL_GetTick>
 80032c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80032c4:	e009      	b.n	80032da <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80032c6:	f7fd fe7b 	bl	8000fc0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032d4:	d901      	bls.n	80032da <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e007      	b.n	80032ea <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b087      	sub	sp, #28
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	827b      	strh	r3, [r7, #18]
 80032fe:	2300      	movs	r3, #0
 8003300:	823b      	strh	r3, [r7, #16]
 8003302:	2300      	movs	r3, #0
 8003304:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003322:	8a7a      	ldrh	r2, [r7, #18]
 8003324:	8a3b      	ldrh	r3, [r7, #16]
 8003326:	429a      	cmp	r2, r3
 8003328:	d008      	beq.n	800333c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800332a:	8a3b      	ldrh	r3, [r7, #16]
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	b29b      	uxth	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e004      	b.n	8003346 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800333c:	8a7b      	ldrh	r3, [r7, #18]
 800333e:	041a      	lsls	r2, r3, #16
 8003340:	89fb      	ldrh	r3, [r7, #14]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f85d 	bl	8003420 <RTC_EnterInitMode>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e011      	b.n	8003396 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	0c12      	lsrs	r2, r2, #16
 800337a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b292      	uxth	r2, r2
 8003384:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f872 	bl	8003470 <RTC_ExitInitMode>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	81fb      	strh	r3, [r7, #14]
 80033ac:	2300      	movs	r3, #0
 80033ae:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	041a      	lsls	r2, r3, #16
 80033c4:	89bb      	ldrh	r3, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f81d 	bl	8003420 <RTC_EnterInitMode>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e011      	b.n	8003416 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	0c12      	lsrs	r2, r2, #16
 80033fa:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b292      	uxth	r2, r2
 8003404:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f832 	bl	8003470 <RTC_ExitInitMode>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800342c:	f7fd fdc8 	bl	8000fc0 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003432:	e009      	b.n	8003448 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003434:	f7fd fdc4 	bl	8000fc0 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003442:	d901      	bls.n	8003448 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e00f      	b.n	8003468 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ee      	beq.n	8003434 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0210 	orr.w	r2, r2, #16
 8003464:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0210 	bic.w	r2, r2, #16
 800348a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800348c:	f7fd fd98 	bl	8000fc0 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003492:	e009      	b.n	80034a8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003494:	f7fd fd94 	bl	8000fc0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034a2:	d901      	bls.n	80034a8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e007      	b.n	80034b8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ee      	beq.n	8003494 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80034ce:	e005      	b.n	80034dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	3b0a      	subs	r3, #10
 80034da:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	2b09      	cmp	r3, #9
 80034e0:	d8f6      	bhi.n	80034d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b2db      	uxtb	r3, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr

080034fa <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b085      	sub	sp, #20
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	4413      	add	r3, r2
 8003528:	b2db      	uxtb	r3, r3
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7bdb      	ldrb	r3, [r3, #15]
 8003552:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7b5b      	ldrb	r3, [r3, #13]
 8003558:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7b9b      	ldrb	r3, [r3, #14]
 800355e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	e06f      	b.n	8003646 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d011      	beq.n	8003590 <RTC_DateUpdate+0x5c>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d00e      	beq.n	8003590 <RTC_DateUpdate+0x5c>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b05      	cmp	r3, #5
 8003576:	d00b      	beq.n	8003590 <RTC_DateUpdate+0x5c>
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b07      	cmp	r3, #7
 800357c:	d008      	beq.n	8003590 <RTC_DateUpdate+0x5c>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d005      	beq.n	8003590 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b0a      	cmp	r3, #10
 8003588:	d002      	beq.n	8003590 <RTC_DateUpdate+0x5c>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d117      	bne.n	80035c0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b1e      	cmp	r3, #30
 8003594:	d803      	bhi.n	800359e <RTC_DateUpdate+0x6a>
      {
        day++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3301      	adds	r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800359c:	e050      	b.n	8003640 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	d005      	beq.n	80035b0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3301      	adds	r3, #1
 80035a8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80035aa:	2301      	movs	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80035ae:	e047      	b.n	8003640 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80035b0:	2301      	movs	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80035b4:	2301      	movs	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
          year++;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3301      	adds	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80035be:	e03f      	b.n	8003640 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d008      	beq.n	80035d8 <RTC_DateUpdate+0xa4>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d005      	beq.n	80035d8 <RTC_DateUpdate+0xa4>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b09      	cmp	r3, #9
 80035d0:	d002      	beq.n	80035d8 <RTC_DateUpdate+0xa4>
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b0b      	cmp	r3, #11
 80035d6:	d10c      	bne.n	80035f2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b1d      	cmp	r3, #29
 80035dc:	d803      	bhi.n	80035e6 <RTC_DateUpdate+0xb2>
      {
        day++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3301      	adds	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80035e4:	e02c      	b.n	8003640 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	3301      	adds	r3, #1
 80035ea:	613b      	str	r3, [r7, #16]
        day = 1U;
 80035ec:	2301      	movs	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80035f0:	e026      	b.n	8003640 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d123      	bne.n	8003640 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b1b      	cmp	r3, #27
 80035fc:	d803      	bhi.n	8003606 <RTC_DateUpdate+0xd2>
      {
        day++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3301      	adds	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e01c      	b.n	8003640 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b1c      	cmp	r3, #28
 800360a:	d111      	bne.n	8003630 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	b29b      	uxth	r3, r3
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f839 	bl	8003688 <RTC_IsLeapYear>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <RTC_DateUpdate+0xf0>
        {
          day++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3301      	adds	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	e00d      	b.n	8003640 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	3301      	adds	r3, #1
 8003628:	613b      	str	r3, [r7, #16]
          day = 1U;
 800362a:	2301      	movs	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e007      	b.n	8003640 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b1d      	cmp	r3, #29
 8003634:	d104      	bne.n	8003640 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	3301      	adds	r3, #1
 800363a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800363c:	2301      	movs	r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3301      	adds	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d38b      	bcc.n	8003566 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	4619      	mov	r1, r3
 8003670:	6978      	ldr	r0, [r7, #20]
 8003672:	f000 f83b 	bl	80036ec <RTC_WeekDayNum>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	731a      	strb	r2, [r3, #12]
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	e01d      	b.n	80036de <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	4a10      	ldr	r2, [pc, #64]	@ (80036e8 <RTC_IsLeapYear+0x60>)
 80036a6:	fba2 1203 	umull	r1, r2, r2, r3
 80036aa:	0952      	lsrs	r2, r2, #5
 80036ac:	2164      	movs	r1, #100	@ 0x64
 80036ae:	fb01 f202 	mul.w	r2, r1, r2
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	4a09      	ldr	r2, [pc, #36]	@ (80036e8 <RTC_IsLeapYear+0x60>)
 80036c2:	fba2 1203 	umull	r1, r2, r2, r3
 80036c6:	09d2      	lsrs	r2, r2, #7
 80036c8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80036cc:	fb01 f202 	mul.w	r2, r1, r2
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80036dc:	2300      	movs	r3, #0
  }
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	51eb851f 	.word	0x51eb851f

080036ec <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
 80036f8:	4613      	mov	r3, r2
 80036fa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800370a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d82d      	bhi.n	800376e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	4a2c      	ldr	r2, [pc, #176]	@ (80037d0 <RTC_WeekDayNum+0xe4>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	085a      	lsrs	r2, r3, #1
 8003726:	78bb      	ldrb	r3, [r7, #2]
 8003728:	441a      	add	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	441a      	add	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3b01      	subs	r3, #1
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3b01      	subs	r3, #1
 800373a:	4926      	ldr	r1, [pc, #152]	@ (80037d4 <RTC_WeekDayNum+0xe8>)
 800373c:	fba1 1303 	umull	r1, r3, r1, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3b01      	subs	r3, #1
 8003748:	4922      	ldr	r1, [pc, #136]	@ (80037d4 <RTC_WeekDayNum+0xe8>)
 800374a:	fba1 1303 	umull	r1, r3, r1, r3
 800374e:	09db      	lsrs	r3, r3, #7
 8003750:	4413      	add	r3, r2
 8003752:	1d1a      	adds	r2, r3, #4
 8003754:	4b20      	ldr	r3, [pc, #128]	@ (80037d8 <RTC_WeekDayNum+0xec>)
 8003756:	fba3 1302 	umull	r1, r3, r3, r2
 800375a:	1ad1      	subs	r1, r2, r3
 800375c:	0849      	lsrs	r1, r1, #1
 800375e:	440b      	add	r3, r1
 8003760:	0899      	lsrs	r1, r3, #2
 8003762:	460b      	mov	r3, r1
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	1a5b      	subs	r3, r3, r1
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e029      	b.n	80037c2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	4a15      	ldr	r2, [pc, #84]	@ (80037d0 <RTC_WeekDayNum+0xe4>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	085a      	lsrs	r2, r3, #1
 8003782:	78bb      	ldrb	r3, [r7, #2]
 8003784:	441a      	add	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	441a      	add	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	441a      	add	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4910      	ldr	r1, [pc, #64]	@ (80037d4 <RTC_WeekDayNum+0xe8>)
 8003794:	fba1 1303 	umull	r1, r3, r1, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	1ad2      	subs	r2, r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	490d      	ldr	r1, [pc, #52]	@ (80037d4 <RTC_WeekDayNum+0xe8>)
 80037a0:	fba1 1303 	umull	r1, r3, r1, r3
 80037a4:	09db      	lsrs	r3, r3, #7
 80037a6:	4413      	add	r3, r2
 80037a8:	1c9a      	adds	r2, r3, #2
 80037aa:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <RTC_WeekDayNum+0xec>)
 80037ac:	fba3 1302 	umull	r1, r3, r3, r2
 80037b0:	1ad1      	subs	r1, r2, r3
 80037b2:	0849      	lsrs	r1, r1, #1
 80037b4:	440b      	add	r3, r1
 80037b6:	0899      	lsrs	r1, r3, #2
 80037b8:	460b      	mov	r3, r1
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a5b      	subs	r3, r3, r1
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	b2db      	uxtb	r3, r3
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	38e38e39 	.word	0x38e38e39
 80037d4:	51eb851f 	.word	0x51eb851f
 80037d8:	24924925 	.word	0x24924925

080037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e041      	b.n	8003872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fada 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 f8f4 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_TIM_ConfigClockSource+0x1c>
 8003892:	2302      	movs	r3, #2
 8003894:	e0b4      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x186>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ce:	d03e      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xd4>
 80038d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d4:	f200 8087 	bhi.w	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038dc:	f000 8086 	beq.w	80039ec <HAL_TIM_ConfigClockSource+0x172>
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e4:	d87f      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
 80038e6:	2b70      	cmp	r3, #112	@ 0x70
 80038e8:	d01a      	beq.n	8003920 <HAL_TIM_ConfigClockSource+0xa6>
 80038ea:	2b70      	cmp	r3, #112	@ 0x70
 80038ec:	d87b      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
 80038ee:	2b60      	cmp	r3, #96	@ 0x60
 80038f0:	d050      	beq.n	8003994 <HAL_TIM_ConfigClockSource+0x11a>
 80038f2:	2b60      	cmp	r3, #96	@ 0x60
 80038f4:	d877      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
 80038f6:	2b50      	cmp	r3, #80	@ 0x50
 80038f8:	d03c      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0xfa>
 80038fa:	2b50      	cmp	r3, #80	@ 0x50
 80038fc:	d873      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
 80038fe:	2b40      	cmp	r3, #64	@ 0x40
 8003900:	d058      	beq.n	80039b4 <HAL_TIM_ConfigClockSource+0x13a>
 8003902:	2b40      	cmp	r3, #64	@ 0x40
 8003904:	d86f      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
 8003906:	2b30      	cmp	r3, #48	@ 0x30
 8003908:	d064      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0x15a>
 800390a:	2b30      	cmp	r3, #48	@ 0x30
 800390c:	d86b      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d060      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0x15a>
 8003912:	2b20      	cmp	r3, #32
 8003914:	d867      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d05c      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0x15a>
 800391a:	2b10      	cmp	r3, #16
 800391c:	d05a      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0x15a>
 800391e:	e062      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003930:	f000 f94f 	bl	8003bd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003942:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
      break;
 800394c:	e04f      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800395e:	f000 f938 	bl	8003bd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003970:	609a      	str	r2, [r3, #8]
      break;
 8003972:	e03c      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003980:	461a      	mov	r2, r3
 8003982:	f000 f8af 	bl	8003ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2150      	movs	r1, #80	@ 0x50
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f906 	bl	8003b9e <TIM_ITRx_SetConfig>
      break;
 8003992:	e02c      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a0:	461a      	mov	r2, r3
 80039a2:	f000 f8cd 	bl	8003b40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2160      	movs	r1, #96	@ 0x60
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f8f6 	bl	8003b9e <TIM_ITRx_SetConfig>
      break;
 80039b2:	e01c      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c0:	461a      	mov	r2, r3
 80039c2:	f000 f88f 	bl	8003ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2140      	movs	r1, #64	@ 0x40
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f8e6 	bl	8003b9e <TIM_ITRx_SetConfig>
      break;
 80039d2:	e00c      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f000 f8dd 	bl	8003b9e <TIM_ITRx_SetConfig>
      break;
 80039e4:	e003      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ea:	e000      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad8 <TIM_Base_SetConfig+0xd0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0x30>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0x30>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003adc <TIM_Base_SetConfig+0xd4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0x30>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae0 <TIM_Base_SetConfig+0xd8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a22      	ldr	r2, [pc, #136]	@ (8003ad8 <TIM_Base_SetConfig+0xd0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <TIM_Base_SetConfig+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a58:	d007      	beq.n	8003a6a <TIM_Base_SetConfig+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003adc <TIM_Base_SetConfig+0xd4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <TIM_Base_SetConfig+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae0 <TIM_Base_SetConfig+0xd8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad8 <TIM_Base_SetConfig+0xd0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	611a      	str	r2, [r3, #16]
  }
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800

08003ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 0201 	bic.w	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f023 030a 	bic.w	r3, r3, #10
 8003b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0210 	bic.w	r2, r3, #16
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	031b      	lsls	r3, r3, #12
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	621a      	str	r2, [r3, #32]
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f043 0307 	orr.w	r3, r3, #7
 8003bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e046      	b.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a16      	ldr	r2, [pc, #88]	@ (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d009      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a12      	ldr	r2, [pc, #72]	@ (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a10      	ldr	r2, [pc, #64]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800

08003ccc <siprintf>:
 8003ccc:	b40e      	push	{r1, r2, r3}
 8003cce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	2400      	movs	r4, #0
 8003cd6:	b09d      	sub	sp, #116	@ 0x74
 8003cd8:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003cda:	9002      	str	r0, [sp, #8]
 8003cdc:	9006      	str	r0, [sp, #24]
 8003cde:	9107      	str	r1, [sp, #28]
 8003ce0:	9104      	str	r1, [sp, #16]
 8003ce2:	4809      	ldr	r0, [pc, #36]	@ (8003d08 <siprintf+0x3c>)
 8003ce4:	4909      	ldr	r1, [pc, #36]	@ (8003d0c <siprintf+0x40>)
 8003ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cea:	9105      	str	r1, [sp, #20]
 8003cec:	6800      	ldr	r0, [r0, #0]
 8003cee:	a902      	add	r1, sp, #8
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003cf4:	f000 f9a0 	bl	8004038 <_svfiprintf_r>
 8003cf8:	9b02      	ldr	r3, [sp, #8]
 8003cfa:	701c      	strb	r4, [r3, #0]
 8003cfc:	b01d      	add	sp, #116	@ 0x74
 8003cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d02:	b003      	add	sp, #12
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	2000000c 	.word	0x2000000c
 8003d0c:	ffff0208 	.word	0xffff0208

08003d10 <memset>:
 8003d10:	4603      	mov	r3, r0
 8003d12:	4402      	add	r2, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	@ (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	2600      	movs	r6, #0
 8003d30:	4d0c      	ldr	r5, [pc, #48]	@ (8003d64 <__libc_init_array+0x38>)
 8003d32:	4c0d      	ldr	r4, [pc, #52]	@ (8003d68 <__libc_init_array+0x3c>)
 8003d34:	1b64      	subs	r4, r4, r5
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	f000 fc76 	bl	800462c <_init>
 8003d40:	2600      	movs	r6, #0
 8003d42:	4d0a      	ldr	r5, [pc, #40]	@ (8003d6c <__libc_init_array+0x40>)
 8003d44:	4c0a      	ldr	r4, [pc, #40]	@ (8003d70 <__libc_init_array+0x44>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	080046fc 	.word	0x080046fc
 8003d68:	080046fc 	.word	0x080046fc
 8003d6c:	080046fc 	.word	0x080046fc
 8003d70:	08004700 	.word	0x08004700

08003d74 <__retarget_lock_acquire_recursive>:
 8003d74:	4770      	bx	lr

08003d76 <__retarget_lock_release_recursive>:
 8003d76:	4770      	bx	lr

08003d78 <memcpy>:
 8003d78:	440a      	add	r2, r1
 8003d7a:	4291      	cmp	r1, r2
 8003d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d80:	d100      	bne.n	8003d84 <memcpy+0xc>
 8003d82:	4770      	bx	lr
 8003d84:	b510      	push	{r4, lr}
 8003d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d8a:	4291      	cmp	r1, r2
 8003d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d90:	d1f9      	bne.n	8003d86 <memcpy+0xe>
 8003d92:	bd10      	pop	{r4, pc}

08003d94 <_free_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4605      	mov	r5, r0
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	d040      	beq.n	8003e1e <_free_r+0x8a>
 8003d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003da0:	1f0c      	subs	r4, r1, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bfb8      	it	lt
 8003da6:	18e4      	addlt	r4, r4, r3
 8003da8:	f000 f8de 	bl	8003f68 <__malloc_lock>
 8003dac:	4a1c      	ldr	r2, [pc, #112]	@ (8003e20 <_free_r+0x8c>)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	b933      	cbnz	r3, 8003dc0 <_free_r+0x2c>
 8003db2:	6063      	str	r3, [r4, #4]
 8003db4:	6014      	str	r4, [r2, #0]
 8003db6:	4628      	mov	r0, r5
 8003db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dbc:	f000 b8da 	b.w	8003f74 <__malloc_unlock>
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	d908      	bls.n	8003dd6 <_free_r+0x42>
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	1821      	adds	r1, r4, r0
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	bf01      	itttt	eq
 8003dcc:	6819      	ldreq	r1, [r3, #0]
 8003dce:	685b      	ldreq	r3, [r3, #4]
 8003dd0:	1809      	addeq	r1, r1, r0
 8003dd2:	6021      	streq	r1, [r4, #0]
 8003dd4:	e7ed      	b.n	8003db2 <_free_r+0x1e>
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b10b      	cbz	r3, 8003de0 <_free_r+0x4c>
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	d9fa      	bls.n	8003dd6 <_free_r+0x42>
 8003de0:	6811      	ldr	r1, [r2, #0]
 8003de2:	1850      	adds	r0, r2, r1
 8003de4:	42a0      	cmp	r0, r4
 8003de6:	d10b      	bne.n	8003e00 <_free_r+0x6c>
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	4401      	add	r1, r0
 8003dec:	1850      	adds	r0, r2, r1
 8003dee:	4283      	cmp	r3, r0
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	d1e0      	bne.n	8003db6 <_free_r+0x22>
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4408      	add	r0, r1
 8003dfa:	6010      	str	r0, [r2, #0]
 8003dfc:	6053      	str	r3, [r2, #4]
 8003dfe:	e7da      	b.n	8003db6 <_free_r+0x22>
 8003e00:	d902      	bls.n	8003e08 <_free_r+0x74>
 8003e02:	230c      	movs	r3, #12
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	e7d6      	b.n	8003db6 <_free_r+0x22>
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	1821      	adds	r1, r4, r0
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	bf01      	itttt	eq
 8003e10:	6819      	ldreq	r1, [r3, #0]
 8003e12:	685b      	ldreq	r3, [r3, #4]
 8003e14:	1809      	addeq	r1, r1, r0
 8003e16:	6021      	streq	r1, [r4, #0]
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	6054      	str	r4, [r2, #4]
 8003e1c:	e7cb      	b.n	8003db6 <_free_r+0x22>
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	200002a4 	.word	0x200002a4

08003e24 <sbrk_aligned>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	4e0f      	ldr	r6, [pc, #60]	@ (8003e64 <sbrk_aligned+0x40>)
 8003e28:	460c      	mov	r4, r1
 8003e2a:	6831      	ldr	r1, [r6, #0]
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	b911      	cbnz	r1, 8003e36 <sbrk_aligned+0x12>
 8003e30:	f000 fba8 	bl	8004584 <_sbrk_r>
 8003e34:	6030      	str	r0, [r6, #0]
 8003e36:	4621      	mov	r1, r4
 8003e38:	4628      	mov	r0, r5
 8003e3a:	f000 fba3 	bl	8004584 <_sbrk_r>
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	d103      	bne.n	8003e4a <sbrk_aligned+0x26>
 8003e42:	f04f 34ff 	mov.w	r4, #4294967295
 8003e46:	4620      	mov	r0, r4
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
 8003e4a:	1cc4      	adds	r4, r0, #3
 8003e4c:	f024 0403 	bic.w	r4, r4, #3
 8003e50:	42a0      	cmp	r0, r4
 8003e52:	d0f8      	beq.n	8003e46 <sbrk_aligned+0x22>
 8003e54:	1a21      	subs	r1, r4, r0
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 fb94 	bl	8004584 <_sbrk_r>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d1f2      	bne.n	8003e46 <sbrk_aligned+0x22>
 8003e60:	e7ef      	b.n	8003e42 <sbrk_aligned+0x1e>
 8003e62:	bf00      	nop
 8003e64:	200002a0 	.word	0x200002a0

08003e68 <_malloc_r>:
 8003e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e6c:	1ccd      	adds	r5, r1, #3
 8003e6e:	f025 0503 	bic.w	r5, r5, #3
 8003e72:	3508      	adds	r5, #8
 8003e74:	2d0c      	cmp	r5, #12
 8003e76:	bf38      	it	cc
 8003e78:	250c      	movcc	r5, #12
 8003e7a:	2d00      	cmp	r5, #0
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	db01      	blt.n	8003e84 <_malloc_r+0x1c>
 8003e80:	42a9      	cmp	r1, r5
 8003e82:	d904      	bls.n	8003e8e <_malloc_r+0x26>
 8003e84:	230c      	movs	r3, #12
 8003e86:	6033      	str	r3, [r6, #0]
 8003e88:	2000      	movs	r0, #0
 8003e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f64 <_malloc_r+0xfc>
 8003e92:	f000 f869 	bl	8003f68 <__malloc_lock>
 8003e96:	f8d8 3000 	ldr.w	r3, [r8]
 8003e9a:	461c      	mov	r4, r3
 8003e9c:	bb44      	cbnz	r4, 8003ef0 <_malloc_r+0x88>
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f7ff ffbf 	bl	8003e24 <sbrk_aligned>
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	d158      	bne.n	8003f5e <_malloc_r+0xf6>
 8003eac:	f8d8 4000 	ldr.w	r4, [r8]
 8003eb0:	4627      	mov	r7, r4
 8003eb2:	2f00      	cmp	r7, #0
 8003eb4:	d143      	bne.n	8003f3e <_malloc_r+0xd6>
 8003eb6:	2c00      	cmp	r4, #0
 8003eb8:	d04b      	beq.n	8003f52 <_malloc_r+0xea>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	eb04 0903 	add.w	r9, r4, r3
 8003ec4:	f000 fb5e 	bl	8004584 <_sbrk_r>
 8003ec8:	4581      	cmp	r9, r0
 8003eca:	d142      	bne.n	8003f52 <_malloc_r+0xea>
 8003ecc:	6821      	ldr	r1, [r4, #0]
 8003ece:	4630      	mov	r0, r6
 8003ed0:	1a6d      	subs	r5, r5, r1
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f7ff ffa6 	bl	8003e24 <sbrk_aligned>
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d03a      	beq.n	8003f52 <_malloc_r+0xea>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	442b      	add	r3, r5
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	bb62      	cbnz	r2, 8003f44 <_malloc_r+0xdc>
 8003eea:	f8c8 7000 	str.w	r7, [r8]
 8003eee:	e00f      	b.n	8003f10 <_malloc_r+0xa8>
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	1b52      	subs	r2, r2, r5
 8003ef4:	d420      	bmi.n	8003f38 <_malloc_r+0xd0>
 8003ef6:	2a0b      	cmp	r2, #11
 8003ef8:	d917      	bls.n	8003f2a <_malloc_r+0xc2>
 8003efa:	1961      	adds	r1, r4, r5
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	6025      	str	r5, [r4, #0]
 8003f00:	bf18      	it	ne
 8003f02:	6059      	strne	r1, [r3, #4]
 8003f04:	6863      	ldr	r3, [r4, #4]
 8003f06:	bf08      	it	eq
 8003f08:	f8c8 1000 	streq.w	r1, [r8]
 8003f0c:	5162      	str	r2, [r4, r5]
 8003f0e:	604b      	str	r3, [r1, #4]
 8003f10:	4630      	mov	r0, r6
 8003f12:	f000 f82f 	bl	8003f74 <__malloc_unlock>
 8003f16:	f104 000b 	add.w	r0, r4, #11
 8003f1a:	1d23      	adds	r3, r4, #4
 8003f1c:	f020 0007 	bic.w	r0, r0, #7
 8003f20:	1ac2      	subs	r2, r0, r3
 8003f22:	bf1c      	itt	ne
 8003f24:	1a1b      	subne	r3, r3, r0
 8003f26:	50a3      	strne	r3, [r4, r2]
 8003f28:	e7af      	b.n	8003e8a <_malloc_r+0x22>
 8003f2a:	6862      	ldr	r2, [r4, #4]
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	bf0c      	ite	eq
 8003f30:	f8c8 2000 	streq.w	r2, [r8]
 8003f34:	605a      	strne	r2, [r3, #4]
 8003f36:	e7eb      	b.n	8003f10 <_malloc_r+0xa8>
 8003f38:	4623      	mov	r3, r4
 8003f3a:	6864      	ldr	r4, [r4, #4]
 8003f3c:	e7ae      	b.n	8003e9c <_malloc_r+0x34>
 8003f3e:	463c      	mov	r4, r7
 8003f40:	687f      	ldr	r7, [r7, #4]
 8003f42:	e7b6      	b.n	8003eb2 <_malloc_r+0x4a>
 8003f44:	461a      	mov	r2, r3
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	42a3      	cmp	r3, r4
 8003f4a:	d1fb      	bne.n	8003f44 <_malloc_r+0xdc>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6053      	str	r3, [r2, #4]
 8003f50:	e7de      	b.n	8003f10 <_malloc_r+0xa8>
 8003f52:	230c      	movs	r3, #12
 8003f54:	4630      	mov	r0, r6
 8003f56:	6033      	str	r3, [r6, #0]
 8003f58:	f000 f80c 	bl	8003f74 <__malloc_unlock>
 8003f5c:	e794      	b.n	8003e88 <_malloc_r+0x20>
 8003f5e:	6005      	str	r5, [r0, #0]
 8003f60:	e7d6      	b.n	8003f10 <_malloc_r+0xa8>
 8003f62:	bf00      	nop
 8003f64:	200002a4 	.word	0x200002a4

08003f68 <__malloc_lock>:
 8003f68:	4801      	ldr	r0, [pc, #4]	@ (8003f70 <__malloc_lock+0x8>)
 8003f6a:	f7ff bf03 	b.w	8003d74 <__retarget_lock_acquire_recursive>
 8003f6e:	bf00      	nop
 8003f70:	2000029c 	.word	0x2000029c

08003f74 <__malloc_unlock>:
 8003f74:	4801      	ldr	r0, [pc, #4]	@ (8003f7c <__malloc_unlock+0x8>)
 8003f76:	f7ff befe 	b.w	8003d76 <__retarget_lock_release_recursive>
 8003f7a:	bf00      	nop
 8003f7c:	2000029c 	.word	0x2000029c

08003f80 <__ssputs_r>:
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	461f      	mov	r7, r3
 8003f86:	688e      	ldr	r6, [r1, #8]
 8003f88:	4682      	mov	sl, r0
 8003f8a:	42be      	cmp	r6, r7
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	4690      	mov	r8, r2
 8003f90:	680b      	ldr	r3, [r1, #0]
 8003f92:	d82d      	bhi.n	8003ff0 <__ssputs_r+0x70>
 8003f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f9c:	d026      	beq.n	8003fec <__ssputs_r+0x6c>
 8003f9e:	6965      	ldr	r5, [r4, #20]
 8003fa0:	6909      	ldr	r1, [r1, #16]
 8003fa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fa6:	eba3 0901 	sub.w	r9, r3, r1
 8003faa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fae:	1c7b      	adds	r3, r7, #1
 8003fb0:	444b      	add	r3, r9
 8003fb2:	106d      	asrs	r5, r5, #1
 8003fb4:	429d      	cmp	r5, r3
 8003fb6:	bf38      	it	cc
 8003fb8:	461d      	movcc	r5, r3
 8003fba:	0553      	lsls	r3, r2, #21
 8003fbc:	d527      	bpl.n	800400e <__ssputs_r+0x8e>
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f7ff ff52 	bl	8003e68 <_malloc_r>
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	b360      	cbz	r0, 8004022 <__ssputs_r+0xa2>
 8003fc8:	464a      	mov	r2, r9
 8003fca:	6921      	ldr	r1, [r4, #16]
 8003fcc:	f7ff fed4 	bl	8003d78 <memcpy>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	6126      	str	r6, [r4, #16]
 8003fde:	444e      	add	r6, r9
 8003fe0:	6026      	str	r6, [r4, #0]
 8003fe2:	463e      	mov	r6, r7
 8003fe4:	6165      	str	r5, [r4, #20]
 8003fe6:	eba5 0509 	sub.w	r5, r5, r9
 8003fea:	60a5      	str	r5, [r4, #8]
 8003fec:	42be      	cmp	r6, r7
 8003fee:	d900      	bls.n	8003ff2 <__ssputs_r+0x72>
 8003ff0:	463e      	mov	r6, r7
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	6820      	ldr	r0, [r4, #0]
 8003ff8:	f000 faaa 	bl	8004550 <memmove>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	68a3      	ldr	r3, [r4, #8]
 8004000:	1b9b      	subs	r3, r3, r6
 8004002:	60a3      	str	r3, [r4, #8]
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	4433      	add	r3, r6
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400e:	462a      	mov	r2, r5
 8004010:	f000 fad6 	bl	80045c0 <_realloc_r>
 8004014:	4606      	mov	r6, r0
 8004016:	2800      	cmp	r0, #0
 8004018:	d1e0      	bne.n	8003fdc <__ssputs_r+0x5c>
 800401a:	4650      	mov	r0, sl
 800401c:	6921      	ldr	r1, [r4, #16]
 800401e:	f7ff feb9 	bl	8003d94 <_free_r>
 8004022:	230c      	movs	r3, #12
 8004024:	f8ca 3000 	str.w	r3, [sl]
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f04f 30ff 	mov.w	r0, #4294967295
 800402e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	e7e9      	b.n	800400a <__ssputs_r+0x8a>
	...

08004038 <_svfiprintf_r>:
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	4698      	mov	r8, r3
 800403e:	898b      	ldrh	r3, [r1, #12]
 8004040:	4607      	mov	r7, r0
 8004042:	061b      	lsls	r3, r3, #24
 8004044:	460d      	mov	r5, r1
 8004046:	4614      	mov	r4, r2
 8004048:	b09d      	sub	sp, #116	@ 0x74
 800404a:	d510      	bpl.n	800406e <_svfiprintf_r+0x36>
 800404c:	690b      	ldr	r3, [r1, #16]
 800404e:	b973      	cbnz	r3, 800406e <_svfiprintf_r+0x36>
 8004050:	2140      	movs	r1, #64	@ 0x40
 8004052:	f7ff ff09 	bl	8003e68 <_malloc_r>
 8004056:	6028      	str	r0, [r5, #0]
 8004058:	6128      	str	r0, [r5, #16]
 800405a:	b930      	cbnz	r0, 800406a <_svfiprintf_r+0x32>
 800405c:	230c      	movs	r3, #12
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	f04f 30ff 	mov.w	r0, #4294967295
 8004064:	b01d      	add	sp, #116	@ 0x74
 8004066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800406a:	2340      	movs	r3, #64	@ 0x40
 800406c:	616b      	str	r3, [r5, #20]
 800406e:	2300      	movs	r3, #0
 8004070:	9309      	str	r3, [sp, #36]	@ 0x24
 8004072:	2320      	movs	r3, #32
 8004074:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004078:	2330      	movs	r3, #48	@ 0x30
 800407a:	f04f 0901 	mov.w	r9, #1
 800407e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004082:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800421c <_svfiprintf_r+0x1e4>
 8004086:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800408a:	4623      	mov	r3, r4
 800408c:	469a      	mov	sl, r3
 800408e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004092:	b10a      	cbz	r2, 8004098 <_svfiprintf_r+0x60>
 8004094:	2a25      	cmp	r2, #37	@ 0x25
 8004096:	d1f9      	bne.n	800408c <_svfiprintf_r+0x54>
 8004098:	ebba 0b04 	subs.w	fp, sl, r4
 800409c:	d00b      	beq.n	80040b6 <_svfiprintf_r+0x7e>
 800409e:	465b      	mov	r3, fp
 80040a0:	4622      	mov	r2, r4
 80040a2:	4629      	mov	r1, r5
 80040a4:	4638      	mov	r0, r7
 80040a6:	f7ff ff6b 	bl	8003f80 <__ssputs_r>
 80040aa:	3001      	adds	r0, #1
 80040ac:	f000 80a7 	beq.w	80041fe <_svfiprintf_r+0x1c6>
 80040b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040b2:	445a      	add	r2, fp
 80040b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80040b6:	f89a 3000 	ldrb.w	r3, [sl]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 809f 	beq.w	80041fe <_svfiprintf_r+0x1c6>
 80040c0:	2300      	movs	r3, #0
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ca:	f10a 0a01 	add.w	sl, sl, #1
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	9307      	str	r3, [sp, #28]
 80040d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80040d8:	4654      	mov	r4, sl
 80040da:	2205      	movs	r2, #5
 80040dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e0:	484e      	ldr	r0, [pc, #312]	@ (800421c <_svfiprintf_r+0x1e4>)
 80040e2:	f000 fa5f 	bl	80045a4 <memchr>
 80040e6:	9a04      	ldr	r2, [sp, #16]
 80040e8:	b9d8      	cbnz	r0, 8004122 <_svfiprintf_r+0xea>
 80040ea:	06d0      	lsls	r0, r2, #27
 80040ec:	bf44      	itt	mi
 80040ee:	2320      	movmi	r3, #32
 80040f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040f4:	0711      	lsls	r1, r2, #28
 80040f6:	bf44      	itt	mi
 80040f8:	232b      	movmi	r3, #43	@ 0x2b
 80040fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004102:	2b2a      	cmp	r3, #42	@ 0x2a
 8004104:	d015      	beq.n	8004132 <_svfiprintf_r+0xfa>
 8004106:	4654      	mov	r4, sl
 8004108:	2000      	movs	r0, #0
 800410a:	f04f 0c0a 	mov.w	ip, #10
 800410e:	9a07      	ldr	r2, [sp, #28]
 8004110:	4621      	mov	r1, r4
 8004112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004116:	3b30      	subs	r3, #48	@ 0x30
 8004118:	2b09      	cmp	r3, #9
 800411a:	d94b      	bls.n	80041b4 <_svfiprintf_r+0x17c>
 800411c:	b1b0      	cbz	r0, 800414c <_svfiprintf_r+0x114>
 800411e:	9207      	str	r2, [sp, #28]
 8004120:	e014      	b.n	800414c <_svfiprintf_r+0x114>
 8004122:	eba0 0308 	sub.w	r3, r0, r8
 8004126:	fa09 f303 	lsl.w	r3, r9, r3
 800412a:	4313      	orrs	r3, r2
 800412c:	46a2      	mov	sl, r4
 800412e:	9304      	str	r3, [sp, #16]
 8004130:	e7d2      	b.n	80040d8 <_svfiprintf_r+0xa0>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	1d19      	adds	r1, r3, #4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	9103      	str	r1, [sp, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	bfbb      	ittet	lt
 800413e:	425b      	neglt	r3, r3
 8004140:	f042 0202 	orrlt.w	r2, r2, #2
 8004144:	9307      	strge	r3, [sp, #28]
 8004146:	9307      	strlt	r3, [sp, #28]
 8004148:	bfb8      	it	lt
 800414a:	9204      	strlt	r2, [sp, #16]
 800414c:	7823      	ldrb	r3, [r4, #0]
 800414e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004150:	d10a      	bne.n	8004168 <_svfiprintf_r+0x130>
 8004152:	7863      	ldrb	r3, [r4, #1]
 8004154:	2b2a      	cmp	r3, #42	@ 0x2a
 8004156:	d132      	bne.n	80041be <_svfiprintf_r+0x186>
 8004158:	9b03      	ldr	r3, [sp, #12]
 800415a:	3402      	adds	r4, #2
 800415c:	1d1a      	adds	r2, r3, #4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	9203      	str	r2, [sp, #12]
 8004162:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004166:	9305      	str	r3, [sp, #20]
 8004168:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004220 <_svfiprintf_r+0x1e8>
 800416c:	2203      	movs	r2, #3
 800416e:	4650      	mov	r0, sl
 8004170:	7821      	ldrb	r1, [r4, #0]
 8004172:	f000 fa17 	bl	80045a4 <memchr>
 8004176:	b138      	cbz	r0, 8004188 <_svfiprintf_r+0x150>
 8004178:	2240      	movs	r2, #64	@ 0x40
 800417a:	9b04      	ldr	r3, [sp, #16]
 800417c:	eba0 000a 	sub.w	r0, r0, sl
 8004180:	4082      	lsls	r2, r0
 8004182:	4313      	orrs	r3, r2
 8004184:	3401      	adds	r4, #1
 8004186:	9304      	str	r3, [sp, #16]
 8004188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418c:	2206      	movs	r2, #6
 800418e:	4825      	ldr	r0, [pc, #148]	@ (8004224 <_svfiprintf_r+0x1ec>)
 8004190:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004194:	f000 fa06 	bl	80045a4 <memchr>
 8004198:	2800      	cmp	r0, #0
 800419a:	d036      	beq.n	800420a <_svfiprintf_r+0x1d2>
 800419c:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <_svfiprintf_r+0x1f0>)
 800419e:	bb1b      	cbnz	r3, 80041e8 <_svfiprintf_r+0x1b0>
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	3307      	adds	r3, #7
 80041a4:	f023 0307 	bic.w	r3, r3, #7
 80041a8:	3308      	adds	r3, #8
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ae:	4433      	add	r3, r6
 80041b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80041b2:	e76a      	b.n	800408a <_svfiprintf_r+0x52>
 80041b4:	460c      	mov	r4, r1
 80041b6:	2001      	movs	r0, #1
 80041b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80041bc:	e7a8      	b.n	8004110 <_svfiprintf_r+0xd8>
 80041be:	2300      	movs	r3, #0
 80041c0:	f04f 0c0a 	mov.w	ip, #10
 80041c4:	4619      	mov	r1, r3
 80041c6:	3401      	adds	r4, #1
 80041c8:	9305      	str	r3, [sp, #20]
 80041ca:	4620      	mov	r0, r4
 80041cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041d0:	3a30      	subs	r2, #48	@ 0x30
 80041d2:	2a09      	cmp	r2, #9
 80041d4:	d903      	bls.n	80041de <_svfiprintf_r+0x1a6>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0c6      	beq.n	8004168 <_svfiprintf_r+0x130>
 80041da:	9105      	str	r1, [sp, #20]
 80041dc:	e7c4      	b.n	8004168 <_svfiprintf_r+0x130>
 80041de:	4604      	mov	r4, r0
 80041e0:	2301      	movs	r3, #1
 80041e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041e6:	e7f0      	b.n	80041ca <_svfiprintf_r+0x192>
 80041e8:	ab03      	add	r3, sp, #12
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	462a      	mov	r2, r5
 80041ee:	4638      	mov	r0, r7
 80041f0:	4b0e      	ldr	r3, [pc, #56]	@ (800422c <_svfiprintf_r+0x1f4>)
 80041f2:	a904      	add	r1, sp, #16
 80041f4:	f3af 8000 	nop.w
 80041f8:	1c42      	adds	r2, r0, #1
 80041fa:	4606      	mov	r6, r0
 80041fc:	d1d6      	bne.n	80041ac <_svfiprintf_r+0x174>
 80041fe:	89ab      	ldrh	r3, [r5, #12]
 8004200:	065b      	lsls	r3, r3, #25
 8004202:	f53f af2d 	bmi.w	8004060 <_svfiprintf_r+0x28>
 8004206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004208:	e72c      	b.n	8004064 <_svfiprintf_r+0x2c>
 800420a:	ab03      	add	r3, sp, #12
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	462a      	mov	r2, r5
 8004210:	4638      	mov	r0, r7
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <_svfiprintf_r+0x1f4>)
 8004214:	a904      	add	r1, sp, #16
 8004216:	f000 f87d 	bl	8004314 <_printf_i>
 800421a:	e7ed      	b.n	80041f8 <_svfiprintf_r+0x1c0>
 800421c:	080046c6 	.word	0x080046c6
 8004220:	080046cc 	.word	0x080046cc
 8004224:	080046d0 	.word	0x080046d0
 8004228:	00000000 	.word	0x00000000
 800422c:	08003f81 	.word	0x08003f81

08004230 <_printf_common>:
 8004230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	4616      	mov	r6, r2
 8004236:	4698      	mov	r8, r3
 8004238:	688a      	ldr	r2, [r1, #8]
 800423a:	690b      	ldr	r3, [r1, #16]
 800423c:	4607      	mov	r7, r0
 800423e:	4293      	cmp	r3, r2
 8004240:	bfb8      	it	lt
 8004242:	4613      	movlt	r3, r2
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800424a:	460c      	mov	r4, r1
 800424c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004250:	b10a      	cbz	r2, 8004256 <_printf_common+0x26>
 8004252:	3301      	adds	r3, #1
 8004254:	6033      	str	r3, [r6, #0]
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	0699      	lsls	r1, r3, #26
 800425a:	bf42      	ittt	mi
 800425c:	6833      	ldrmi	r3, [r6, #0]
 800425e:	3302      	addmi	r3, #2
 8004260:	6033      	strmi	r3, [r6, #0]
 8004262:	6825      	ldr	r5, [r4, #0]
 8004264:	f015 0506 	ands.w	r5, r5, #6
 8004268:	d106      	bne.n	8004278 <_printf_common+0x48>
 800426a:	f104 0a19 	add.w	sl, r4, #25
 800426e:	68e3      	ldr	r3, [r4, #12]
 8004270:	6832      	ldr	r2, [r6, #0]
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	42ab      	cmp	r3, r5
 8004276:	dc2b      	bgt.n	80042d0 <_printf_common+0xa0>
 8004278:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	3b00      	subs	r3, #0
 8004280:	bf18      	it	ne
 8004282:	2301      	movne	r3, #1
 8004284:	0692      	lsls	r2, r2, #26
 8004286:	d430      	bmi.n	80042ea <_printf_common+0xba>
 8004288:	4641      	mov	r1, r8
 800428a:	4638      	mov	r0, r7
 800428c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004290:	47c8      	blx	r9
 8004292:	3001      	adds	r0, #1
 8004294:	d023      	beq.n	80042de <_printf_common+0xae>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	6922      	ldr	r2, [r4, #16]
 800429a:	f003 0306 	and.w	r3, r3, #6
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf14      	ite	ne
 80042a2:	2500      	movne	r5, #0
 80042a4:	6833      	ldreq	r3, [r6, #0]
 80042a6:	f04f 0600 	mov.w	r6, #0
 80042aa:	bf08      	it	eq
 80042ac:	68e5      	ldreq	r5, [r4, #12]
 80042ae:	f104 041a 	add.w	r4, r4, #26
 80042b2:	bf08      	it	eq
 80042b4:	1aed      	subeq	r5, r5, r3
 80042b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042ba:	bf08      	it	eq
 80042bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c0:	4293      	cmp	r3, r2
 80042c2:	bfc4      	itt	gt
 80042c4:	1a9b      	subgt	r3, r3, r2
 80042c6:	18ed      	addgt	r5, r5, r3
 80042c8:	42b5      	cmp	r5, r6
 80042ca:	d11a      	bne.n	8004302 <_printf_common+0xd2>
 80042cc:	2000      	movs	r0, #0
 80042ce:	e008      	b.n	80042e2 <_printf_common+0xb2>
 80042d0:	2301      	movs	r3, #1
 80042d2:	4652      	mov	r2, sl
 80042d4:	4641      	mov	r1, r8
 80042d6:	4638      	mov	r0, r7
 80042d8:	47c8      	blx	r9
 80042da:	3001      	adds	r0, #1
 80042dc:	d103      	bne.n	80042e6 <_printf_common+0xb6>
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e6:	3501      	adds	r5, #1
 80042e8:	e7c1      	b.n	800426e <_printf_common+0x3e>
 80042ea:	2030      	movs	r0, #48	@ 0x30
 80042ec:	18e1      	adds	r1, r4, r3
 80042ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042f8:	4422      	add	r2, r4
 80042fa:	3302      	adds	r3, #2
 80042fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004300:	e7c2      	b.n	8004288 <_printf_common+0x58>
 8004302:	2301      	movs	r3, #1
 8004304:	4622      	mov	r2, r4
 8004306:	4641      	mov	r1, r8
 8004308:	4638      	mov	r0, r7
 800430a:	47c8      	blx	r9
 800430c:	3001      	adds	r0, #1
 800430e:	d0e6      	beq.n	80042de <_printf_common+0xae>
 8004310:	3601      	adds	r6, #1
 8004312:	e7d9      	b.n	80042c8 <_printf_common+0x98>

08004314 <_printf_i>:
 8004314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004318:	7e0f      	ldrb	r7, [r1, #24]
 800431a:	4691      	mov	r9, r2
 800431c:	2f78      	cmp	r7, #120	@ 0x78
 800431e:	4680      	mov	r8, r0
 8004320:	460c      	mov	r4, r1
 8004322:	469a      	mov	sl, r3
 8004324:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800432a:	d807      	bhi.n	800433c <_printf_i+0x28>
 800432c:	2f62      	cmp	r7, #98	@ 0x62
 800432e:	d80a      	bhi.n	8004346 <_printf_i+0x32>
 8004330:	2f00      	cmp	r7, #0
 8004332:	f000 80d1 	beq.w	80044d8 <_printf_i+0x1c4>
 8004336:	2f58      	cmp	r7, #88	@ 0x58
 8004338:	f000 80b8 	beq.w	80044ac <_printf_i+0x198>
 800433c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004344:	e03a      	b.n	80043bc <_printf_i+0xa8>
 8004346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800434a:	2b15      	cmp	r3, #21
 800434c:	d8f6      	bhi.n	800433c <_printf_i+0x28>
 800434e:	a101      	add	r1, pc, #4	@ (adr r1, 8004354 <_printf_i+0x40>)
 8004350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043c1 	.word	0x080043c1
 800435c:	0800433d 	.word	0x0800433d
 8004360:	0800433d 	.word	0x0800433d
 8004364:	0800433d 	.word	0x0800433d
 8004368:	0800433d 	.word	0x0800433d
 800436c:	080043c1 	.word	0x080043c1
 8004370:	0800433d 	.word	0x0800433d
 8004374:	0800433d 	.word	0x0800433d
 8004378:	0800433d 	.word	0x0800433d
 800437c:	0800433d 	.word	0x0800433d
 8004380:	080044bf 	.word	0x080044bf
 8004384:	080043eb 	.word	0x080043eb
 8004388:	08004479 	.word	0x08004479
 800438c:	0800433d 	.word	0x0800433d
 8004390:	0800433d 	.word	0x0800433d
 8004394:	080044e1 	.word	0x080044e1
 8004398:	0800433d 	.word	0x0800433d
 800439c:	080043eb 	.word	0x080043eb
 80043a0:	0800433d 	.word	0x0800433d
 80043a4:	0800433d 	.word	0x0800433d
 80043a8:	08004481 	.word	0x08004481
 80043ac:	6833      	ldr	r3, [r6, #0]
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6032      	str	r2, [r6, #0]
 80043b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043bc:	2301      	movs	r3, #1
 80043be:	e09c      	b.n	80044fa <_printf_i+0x1e6>
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	1d19      	adds	r1, r3, #4
 80043c6:	6031      	str	r1, [r6, #0]
 80043c8:	0606      	lsls	r6, r0, #24
 80043ca:	d501      	bpl.n	80043d0 <_printf_i+0xbc>
 80043cc:	681d      	ldr	r5, [r3, #0]
 80043ce:	e003      	b.n	80043d8 <_printf_i+0xc4>
 80043d0:	0645      	lsls	r5, r0, #25
 80043d2:	d5fb      	bpl.n	80043cc <_printf_i+0xb8>
 80043d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043d8:	2d00      	cmp	r5, #0
 80043da:	da03      	bge.n	80043e4 <_printf_i+0xd0>
 80043dc:	232d      	movs	r3, #45	@ 0x2d
 80043de:	426d      	negs	r5, r5
 80043e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043e4:	230a      	movs	r3, #10
 80043e6:	4858      	ldr	r0, [pc, #352]	@ (8004548 <_printf_i+0x234>)
 80043e8:	e011      	b.n	800440e <_printf_i+0xfa>
 80043ea:	6821      	ldr	r1, [r4, #0]
 80043ec:	6833      	ldr	r3, [r6, #0]
 80043ee:	0608      	lsls	r0, r1, #24
 80043f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80043f4:	d402      	bmi.n	80043fc <_printf_i+0xe8>
 80043f6:	0649      	lsls	r1, r1, #25
 80043f8:	bf48      	it	mi
 80043fa:	b2ad      	uxthmi	r5, r5
 80043fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80043fe:	6033      	str	r3, [r6, #0]
 8004400:	bf14      	ite	ne
 8004402:	230a      	movne	r3, #10
 8004404:	2308      	moveq	r3, #8
 8004406:	4850      	ldr	r0, [pc, #320]	@ (8004548 <_printf_i+0x234>)
 8004408:	2100      	movs	r1, #0
 800440a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800440e:	6866      	ldr	r6, [r4, #4]
 8004410:	2e00      	cmp	r6, #0
 8004412:	60a6      	str	r6, [r4, #8]
 8004414:	db05      	blt.n	8004422 <_printf_i+0x10e>
 8004416:	6821      	ldr	r1, [r4, #0]
 8004418:	432e      	orrs	r6, r5
 800441a:	f021 0104 	bic.w	r1, r1, #4
 800441e:	6021      	str	r1, [r4, #0]
 8004420:	d04b      	beq.n	80044ba <_printf_i+0x1a6>
 8004422:	4616      	mov	r6, r2
 8004424:	fbb5 f1f3 	udiv	r1, r5, r3
 8004428:	fb03 5711 	mls	r7, r3, r1, r5
 800442c:	5dc7      	ldrb	r7, [r0, r7]
 800442e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004432:	462f      	mov	r7, r5
 8004434:	42bb      	cmp	r3, r7
 8004436:	460d      	mov	r5, r1
 8004438:	d9f4      	bls.n	8004424 <_printf_i+0x110>
 800443a:	2b08      	cmp	r3, #8
 800443c:	d10b      	bne.n	8004456 <_printf_i+0x142>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	07df      	lsls	r7, r3, #31
 8004442:	d508      	bpl.n	8004456 <_printf_i+0x142>
 8004444:	6923      	ldr	r3, [r4, #16]
 8004446:	6861      	ldr	r1, [r4, #4]
 8004448:	4299      	cmp	r1, r3
 800444a:	bfde      	ittt	le
 800444c:	2330      	movle	r3, #48	@ 0x30
 800444e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004452:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004456:	1b92      	subs	r2, r2, r6
 8004458:	6122      	str	r2, [r4, #16]
 800445a:	464b      	mov	r3, r9
 800445c:	4621      	mov	r1, r4
 800445e:	4640      	mov	r0, r8
 8004460:	f8cd a000 	str.w	sl, [sp]
 8004464:	aa03      	add	r2, sp, #12
 8004466:	f7ff fee3 	bl	8004230 <_printf_common>
 800446a:	3001      	adds	r0, #1
 800446c:	d14a      	bne.n	8004504 <_printf_i+0x1f0>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	b004      	add	sp, #16
 8004474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f043 0320 	orr.w	r3, r3, #32
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	2778      	movs	r7, #120	@ 0x78
 8004482:	4832      	ldr	r0, [pc, #200]	@ (800454c <_printf_i+0x238>)
 8004484:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	6831      	ldr	r1, [r6, #0]
 800448c:	061f      	lsls	r7, r3, #24
 800448e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004492:	d402      	bmi.n	800449a <_printf_i+0x186>
 8004494:	065f      	lsls	r7, r3, #25
 8004496:	bf48      	it	mi
 8004498:	b2ad      	uxthmi	r5, r5
 800449a:	6031      	str	r1, [r6, #0]
 800449c:	07d9      	lsls	r1, r3, #31
 800449e:	bf44      	itt	mi
 80044a0:	f043 0320 	orrmi.w	r3, r3, #32
 80044a4:	6023      	strmi	r3, [r4, #0]
 80044a6:	b11d      	cbz	r5, 80044b0 <_printf_i+0x19c>
 80044a8:	2310      	movs	r3, #16
 80044aa:	e7ad      	b.n	8004408 <_printf_i+0xf4>
 80044ac:	4826      	ldr	r0, [pc, #152]	@ (8004548 <_printf_i+0x234>)
 80044ae:	e7e9      	b.n	8004484 <_printf_i+0x170>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	f023 0320 	bic.w	r3, r3, #32
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	e7f6      	b.n	80044a8 <_printf_i+0x194>
 80044ba:	4616      	mov	r6, r2
 80044bc:	e7bd      	b.n	800443a <_printf_i+0x126>
 80044be:	6833      	ldr	r3, [r6, #0]
 80044c0:	6825      	ldr	r5, [r4, #0]
 80044c2:	1d18      	adds	r0, r3, #4
 80044c4:	6961      	ldr	r1, [r4, #20]
 80044c6:	6030      	str	r0, [r6, #0]
 80044c8:	062e      	lsls	r6, r5, #24
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	d501      	bpl.n	80044d2 <_printf_i+0x1be>
 80044ce:	6019      	str	r1, [r3, #0]
 80044d0:	e002      	b.n	80044d8 <_printf_i+0x1c4>
 80044d2:	0668      	lsls	r0, r5, #25
 80044d4:	d5fb      	bpl.n	80044ce <_printf_i+0x1ba>
 80044d6:	8019      	strh	r1, [r3, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	4616      	mov	r6, r2
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	e7bc      	b.n	800445a <_printf_i+0x146>
 80044e0:	6833      	ldr	r3, [r6, #0]
 80044e2:	2100      	movs	r1, #0
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	6032      	str	r2, [r6, #0]
 80044e8:	681e      	ldr	r6, [r3, #0]
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 f859 	bl	80045a4 <memchr>
 80044f2:	b108      	cbz	r0, 80044f8 <_printf_i+0x1e4>
 80044f4:	1b80      	subs	r0, r0, r6
 80044f6:	6060      	str	r0, [r4, #4]
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	2300      	movs	r3, #0
 80044fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004502:	e7aa      	b.n	800445a <_printf_i+0x146>
 8004504:	4632      	mov	r2, r6
 8004506:	4649      	mov	r1, r9
 8004508:	4640      	mov	r0, r8
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	47d0      	blx	sl
 800450e:	3001      	adds	r0, #1
 8004510:	d0ad      	beq.n	800446e <_printf_i+0x15a>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	079b      	lsls	r3, r3, #30
 8004516:	d413      	bmi.n	8004540 <_printf_i+0x22c>
 8004518:	68e0      	ldr	r0, [r4, #12]
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	4298      	cmp	r0, r3
 800451e:	bfb8      	it	lt
 8004520:	4618      	movlt	r0, r3
 8004522:	e7a6      	b.n	8004472 <_printf_i+0x15e>
 8004524:	2301      	movs	r3, #1
 8004526:	4632      	mov	r2, r6
 8004528:	4649      	mov	r1, r9
 800452a:	4640      	mov	r0, r8
 800452c:	47d0      	blx	sl
 800452e:	3001      	adds	r0, #1
 8004530:	d09d      	beq.n	800446e <_printf_i+0x15a>
 8004532:	3501      	adds	r5, #1
 8004534:	68e3      	ldr	r3, [r4, #12]
 8004536:	9903      	ldr	r1, [sp, #12]
 8004538:	1a5b      	subs	r3, r3, r1
 800453a:	42ab      	cmp	r3, r5
 800453c:	dcf2      	bgt.n	8004524 <_printf_i+0x210>
 800453e:	e7eb      	b.n	8004518 <_printf_i+0x204>
 8004540:	2500      	movs	r5, #0
 8004542:	f104 0619 	add.w	r6, r4, #25
 8004546:	e7f5      	b.n	8004534 <_printf_i+0x220>
 8004548:	080046d7 	.word	0x080046d7
 800454c:	080046e8 	.word	0x080046e8

08004550 <memmove>:
 8004550:	4288      	cmp	r0, r1
 8004552:	b510      	push	{r4, lr}
 8004554:	eb01 0402 	add.w	r4, r1, r2
 8004558:	d902      	bls.n	8004560 <memmove+0x10>
 800455a:	4284      	cmp	r4, r0
 800455c:	4623      	mov	r3, r4
 800455e:	d807      	bhi.n	8004570 <memmove+0x20>
 8004560:	1e43      	subs	r3, r0, #1
 8004562:	42a1      	cmp	r1, r4
 8004564:	d008      	beq.n	8004578 <memmove+0x28>
 8004566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800456a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800456e:	e7f8      	b.n	8004562 <memmove+0x12>
 8004570:	4601      	mov	r1, r0
 8004572:	4402      	add	r2, r0
 8004574:	428a      	cmp	r2, r1
 8004576:	d100      	bne.n	800457a <memmove+0x2a>
 8004578:	bd10      	pop	{r4, pc}
 800457a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800457e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004582:	e7f7      	b.n	8004574 <memmove+0x24>

08004584 <_sbrk_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	2300      	movs	r3, #0
 8004588:	4d05      	ldr	r5, [pc, #20]	@ (80045a0 <_sbrk_r+0x1c>)
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	f7fc fc5c 	bl	8000e4c <_sbrk>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_sbrk_r+0x1a>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_sbrk_r+0x1a>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000298 	.word	0x20000298

080045a4 <memchr>:
 80045a4:	4603      	mov	r3, r0
 80045a6:	b510      	push	{r4, lr}
 80045a8:	b2c9      	uxtb	r1, r1
 80045aa:	4402      	add	r2, r0
 80045ac:	4293      	cmp	r3, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	d101      	bne.n	80045b6 <memchr+0x12>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e003      	b.n	80045be <memchr+0x1a>
 80045b6:	7804      	ldrb	r4, [r0, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	428c      	cmp	r4, r1
 80045bc:	d1f6      	bne.n	80045ac <memchr+0x8>
 80045be:	bd10      	pop	{r4, pc}

080045c0 <_realloc_r>:
 80045c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	4607      	mov	r7, r0
 80045c6:	4614      	mov	r4, r2
 80045c8:	460d      	mov	r5, r1
 80045ca:	b921      	cbnz	r1, 80045d6 <_realloc_r+0x16>
 80045cc:	4611      	mov	r1, r2
 80045ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d2:	f7ff bc49 	b.w	8003e68 <_malloc_r>
 80045d6:	b92a      	cbnz	r2, 80045e4 <_realloc_r+0x24>
 80045d8:	f7ff fbdc 	bl	8003d94 <_free_r>
 80045dc:	4625      	mov	r5, r4
 80045de:	4628      	mov	r0, r5
 80045e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e4:	f000 f81a 	bl	800461c <_malloc_usable_size_r>
 80045e8:	4284      	cmp	r4, r0
 80045ea:	4606      	mov	r6, r0
 80045ec:	d802      	bhi.n	80045f4 <_realloc_r+0x34>
 80045ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045f2:	d8f4      	bhi.n	80045de <_realloc_r+0x1e>
 80045f4:	4621      	mov	r1, r4
 80045f6:	4638      	mov	r0, r7
 80045f8:	f7ff fc36 	bl	8003e68 <_malloc_r>
 80045fc:	4680      	mov	r8, r0
 80045fe:	b908      	cbnz	r0, 8004604 <_realloc_r+0x44>
 8004600:	4645      	mov	r5, r8
 8004602:	e7ec      	b.n	80045de <_realloc_r+0x1e>
 8004604:	42b4      	cmp	r4, r6
 8004606:	4622      	mov	r2, r4
 8004608:	4629      	mov	r1, r5
 800460a:	bf28      	it	cs
 800460c:	4632      	movcs	r2, r6
 800460e:	f7ff fbb3 	bl	8003d78 <memcpy>
 8004612:	4629      	mov	r1, r5
 8004614:	4638      	mov	r0, r7
 8004616:	f7ff fbbd 	bl	8003d94 <_free_r>
 800461a:	e7f1      	b.n	8004600 <_realloc_r+0x40>

0800461c <_malloc_usable_size_r>:
 800461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004620:	1f18      	subs	r0, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfbc      	itt	lt
 8004626:	580b      	ldrlt	r3, [r1, r0]
 8004628:	18c0      	addlt	r0, r0, r3
 800462a:	4770      	bx	lr

0800462c <_init>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr

08004638 <_fini>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr
